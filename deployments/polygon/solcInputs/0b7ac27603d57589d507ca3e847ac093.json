{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotesUpgradeable {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20CappedUpgradeable is Initializable, ERC20Upgradeable {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    function __ERC20Capped_init(uint256 cap_) internal onlyInitializing {\n        __ERC20Capped_init_unchained(cap_);\n    }\n\n    function __ERC20Capped_init_unchained(uint256 cap_) internal onlyInitializing {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20Upgradeable.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20PermitUpgradeable.sol\";\nimport \"../../../utils/math/MathUpgradeable.sol\";\nimport \"../../../governance/utils/IVotesUpgradeable.sol\";\nimport \"../../../utils/math/SafeCastUpgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20VotesUpgradeable is Initializable, IVotesUpgradeable, ERC20PermitUpgradeable {\n    function __ERC20Votes_init() internal onlyInitializing {\n    }\n\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\n    }\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual override returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // Initially we check if the block is recent to narrow the search range.\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 length = ckpts.length;\n\n        uint256 low = 0;\n        uint256 high = length;\n\n        if (length > 5) {\n            uint256 mid = length - MathUpgradeable.sqrt(length);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual override {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSAUpgradeable.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n\n        Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\n\n        oldWeight = oldCkpt.votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && oldCkpt.fromBlock == block.number) {\n            _unsafeAccess(ckpts, pos - 1).votes = SafeCastUpgradeable.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, ckpts.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2Upgradeable {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/CustomProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\n\r\nimport \"./interfaces/governor/IGovernanceSettings.sol\";\r\nimport \"./interfaces/governor/IGovernor.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/registry/IRecordsRegistry.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\n/**\r\n * @title Custom Proposal Contract\r\n * @notice This contract is designed for constructing proposals from user input. The methods generate calldata from the input arguments and pass it to the specified pool as a proposal.\r\n * @dev It is a supporting part of the protocol that takes user input arguments and constructs OZ Governor-compatible structures describing the transactions to be executed upon successful voting on the proposal. It does not store user input, but only passes it on in a transformed format to the specified pool contract.\r\n */\r\ncontract CustomProposal is Initializable, AccessControlEnumerableUpgradeable {\r\n    // STORAGE\r\n\r\n    /// @dev The address of the Service contract.\r\n    IService public service;\r\n\r\n    // MODIFIERS\r\n\r\n    /// @notice Modifier that makes the function callable only by the Service contract.\r\n    /// @dev Allows the function to be executed only if the address sending the transaction is equal to the address of the Service contract stored in the memory of this contract.\r\n    modifier onlyService() {\r\n        require(msg.sender == address(service), ExceptionsLibrary.NOT_SERVICE);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that checks the existence of a pool at the given address.\r\n    /// @dev Checks the existence of the pool for which the proposal is being constructed. The pool should store the same Service contract address as stored in the Custom Proposal contract and be registered in the Registry contract with the corresponding type.\r\n    modifier onlyForPool(address pool) {\r\n        //check if pool registry record exists\r\n        require(\r\n            service.registry().typeOf(pool) ==\r\n                IRecordsRegistry.ContractType.Pool,\r\n            ExceptionsLibrary.NOT_POOL\r\n        );\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @notice Contract initializer\r\n     * @dev This method replaces the constructor for upgradeable contracts.\r\n     */\r\n    function initialize() public initializer {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @dev Stores a new address of the Service contract in the memory of this contract.\r\n     * @param service_ The new address of the Service contract.\r\n     */\r\n    function setService(\r\n        address service_\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        service = IService(service_);\r\n    }\r\n\r\n    /**\r\n     * @notice This proposal is the only way to withdraw funds from the pool account.\r\n     * @dev This function prepares a proposal from the list of recipients and corresponding amounts and submits it to the pool for a vote to transfer those amounts to the specified recipients. The asset type is specified as a separate argument, which is the same for all recipients.\r\n     * @param pool The address of the pool on behalf of which this proposal will be launched and from whose balance the values will be transferred.\r\n     * @param asset Asset to transfer (address(0) for ETH transfers).\r\n     * @param recipients Transfer recipients.\r\n     * @param amounts Transfer amounts.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeTransfer(\r\n        address pool,\r\n        address asset,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external returns (uint256 proposalId) {\r\n        // Check lengths\r\n\r\n        require(\r\n            recipients.length > 0 && recipients.length == amounts.length,\r\n            ExceptionsLibrary.INVALID_VALUE\r\n        );\r\n\r\n        // Prepare proposal actions\r\n        address[] memory targets = new address[](recipients.length);\r\n        uint256[] memory values = new uint256[](recipients.length);\r\n        bytes[] memory callDatas = new bytes[](recipients.length);\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            if (asset == address(0)) {\r\n                targets[i] = recipients[i];\r\n                callDatas[i] = \"\";\r\n                values[i] = amounts[i];\r\n            } else {\r\n                targets[i] = asset;\r\n                callDatas[i] = abi.encodeWithSelector(\r\n                    IERC20Upgradeable.transfer.selector,\r\n                    recipients[i],\r\n                    amounts[i]\r\n                );\r\n                values[i] = 0;\r\n            }\r\n        }\r\n\r\n        // Create proposal\r\n\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            0,\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.Transfer,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice This proposal is launched when there is a need to issue additional tokens (both Governance and Preference) for an existing pool. In other words, the issuance of tokens for any DAO is possible only through the creation of such a proposal.\r\n     * @dev Proposal to launch a new token generation event (TGE). It can only be created if the maximum supply threshold value for an existing token has not been reached or if a new token is being created, in which case a new token contract will be deployed simultaneously with the TGE contract.\r\n     * @param pool The address of the pool on behalf of which this proposal will be launched and for which the TGE event will be launched.\r\n     * @param tgeInfo TGE parameters.\r\n     * @param tokenInfo Token parameters.\r\n     * @param metadataURI TGE metadata URI.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeTGE(\r\n        address pool,\r\n        address token,\r\n        ITGE.TGEInfo memory tgeInfo,\r\n        IToken.TokenInfo memory tokenInfo,\r\n        string memory metadataURI,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external returns (uint256 proposalId) {\r\n        // Get cap and supply data\r\n        uint256 totalSupplyWithReserves = 0;\r\n\r\n        //Check if token is new or exists for pool\r\n        require(\r\n            address(token) == address(0) ||\r\n                IPool(pool).tokenExists(IToken(token)),\r\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\r\n        );\r\n\r\n        if (tokenInfo.tokenType == IToken.TokenType.Governance) {\r\n            tokenInfo.cap = IToken(token).cap();\r\n            totalSupplyWithReserves = IToken(token).totalSupplyWithReserves();\r\n        } else if (tokenInfo.tokenType == IToken.TokenType.Preference) {\r\n            if (token != address(0)) {\r\n                if (IToken(token).isPrimaryTGESuccessful()) {\r\n                    tokenInfo.cap = IToken(token).cap();\r\n                    totalSupplyWithReserves = IToken(token)\r\n                        .totalSupplyWithReserves();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validate TGE info\r\n        IService(service).validateTGEInfo(\r\n            tgeInfo,\r\n            tokenInfo.cap,\r\n            totalSupplyWithReserves,\r\n            tokenInfo.tokenType\r\n        );\r\n\r\n        // Prepare proposal action\r\n        address[] memory targets = new address[](1);\r\n        targets[0] = address(IService(service).tgeFactory());\r\n\r\n        uint256[] memory values = new uint256[](1);\r\n        values[0] = 0;\r\n\r\n        bytes[] memory callDatas = new bytes[](1);\r\n        callDatas[0] = abi.encodeWithSelector(\r\n            ITGEFactory.createSecondaryTGE.selector,\r\n            token,\r\n            tgeInfo,\r\n            tokenInfo,\r\n            metadataURI\r\n        );\r\n\r\n        // Propose\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            1,\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.TGE,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice Proposal to replace Governance settings. One of the two methods to change voting parameters.\r\n     * @dev The main parameter should be a structure of type NewGovernanceSettings, which includes the Governance Threshold, Decision Threshold, Proposal Threshold, and execution delay lists for proposals.\r\n     * @param pool The address of the pool on behalf of which this proposal will be launched and for which the Governance settings will be changed.\r\n     * @param settings New governance settings.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeGovernanceSettings(\r\n        address pool,\r\n        IGovernanceSettings.NewGovernanceSettings memory settings,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external returns (uint256 proposalId) {\r\n        //Check if last GovernanceSettings proposal is not Active\r\n\r\n        require(\r\n            !IPool(pool).isLastProposalIdByTypeActive(2),\r\n            ExceptionsLibrary.ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\r\n        );\r\n\r\n        // Validate settings\r\n        IPool(pool).validateGovernanceSettings(settings);\r\n\r\n        // Prepare proposal action\r\n        address[] memory targets = new address[](1);\r\n        targets[0] = pool;\r\n\r\n        uint256[] memory values = new uint256[](1);\r\n        values[0] = 0;\r\n\r\n        bytes[] memory callDatas = new bytes[](1);\r\n        callDatas[0] = abi.encodeWithSelector(\r\n            IGovernanceSettings.setGovernanceSettings.selector,\r\n            settings\r\n        );\r\n\r\n        // Propose\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            2,\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.GovernanceSettings,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice Creating a custom proposal.\r\n     * @dev This tool can be useful for creating a transaction with arbitrary parameters and putting it to a vote for execution on behalf of the pool.\r\n     * @param pool The address of the pool on behalf of which this proposal will be launched.\r\n     * @param targets Transfer recipients.\r\n     * @param values Transfer amounts for payable.\r\n     * @param callDatas Raw calldatas.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeCustomTx(\r\n        address pool,\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        bytes[] memory callDatas,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external onlyForPool(pool) returns (uint256 proposalId) {\r\n        // Check lengths\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == callDatas.length,\r\n            ExceptionsLibrary.INVALID_VALUE\r\n        );\r\n\r\n        for (uint256 i = 0; i < targets.length; i++) {\r\n            require(\r\n                IRegistry(IService(service).registry()).typeOf(targets[i]) ==\r\n                    IRecordsRegistry.ContractType.None,\r\n                ExceptionsLibrary.INVALID_TARGET\r\n            );\r\n        }\r\n\r\n        // Create proposal\r\n\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            4, // - CustomTx Type\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.Transfer,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice This proposal is launched when there is a need to issue ERC1155 Preference tokens, additional collections, and token units in existing collections for an existing ERC1155 token. In other words, the issuance of tokens of this format for any DAO is possible only through the creation of such a proposal.\r\n     * @dev Proposal to launch a new token generation event (TGE) for ERC1155 preference tokens.\r\n     * @param tgeInfo TGE parameters.\r\n     * @param tokenId Token ID.\r\n     * @param tokenIdMetadataURI Token ID metadata URI.\r\n     * @param tokenInfo Token parameters.\r\n     * @param metadataURI TGE metadata URI.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeTGEERC1155(\r\n        address pool,\r\n        address token,\r\n        uint256 tokenId,\r\n        string memory tokenIdMetadataURI,\r\n        ITGE.TGEInfo memory tgeInfo,\r\n        IToken.TokenInfo memory tokenInfo,\r\n        string memory metadataURI,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external returns (uint256 proposalId) {\r\n        // Get cap and supply data\r\n        uint256 totalSupplyWithReserves = 0;\r\n\r\n        //Check if token is new or exists for pool\r\n        require(\r\n            address(token) == address(0) ||\r\n                IPool(pool).tokenExists(IToken(token)),\r\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\r\n        );\r\n        \r\n            require(\r\n                    address(token) == address(0) ||\r\n                    ITokenERC1155(token).cap(tokenId)==0 ||\r\n                    ITGE(ITokenERC1155(token).lastTGE(tokenId)).state() !=\r\n                    ITGE.State.Active,\r\n                ExceptionsLibrary.ACTIVE_TGE_EXISTS\r\n            );\r\n        \r\n        if (token != address(0)) {\r\n            if (tokenId!=0 && ITokenERC1155(token).isPrimaryTGESuccessful(tokenId)) {\r\n                tokenInfo.cap = ITokenERC1155(token).cap(tokenId);\r\n                totalSupplyWithReserves = ITokenERC1155(token)\r\n                    .totalSupplyWithReserves(tokenId);\r\n            }\r\n        }\r\n\r\n        // Validate TGE info\r\n        IService(service).validateTGEInfo(\r\n            tgeInfo,\r\n            tokenInfo.cap,\r\n            totalSupplyWithReserves,\r\n            tokenInfo.tokenType\r\n        );\r\n\r\n        // Prepare proposal action\r\n        address[] memory targets = new address[](1);\r\n        targets[0] = address(IService(service).tgeFactory());\r\n\r\n        uint256[] memory values = new uint256[](1);\r\n        values[0] = 0;\r\n\r\n        bytes[] memory callDatas = new bytes[](1);\r\n        callDatas[0] = abi.encodeWithSelector(\r\n            ITGEFactory.createSecondaryTGEERC1155.selector,\r\n            token,\r\n            tokenId,\r\n            tokenIdMetadataURI,\r\n            tgeInfo,\r\n            tokenInfo,\r\n            metadataURI\r\n        );\r\n\r\n        // Propose\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            6,\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.TGE,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice Proposal to replace Governance settings and change the pool's list of secretaries and executors. One of the two methods to change voting parameters. The only way for a DAO to modify the lists of secretaries and executors.\r\n     * @dev The main parameter should be a structure of type NewGovernanceSettings, which includes the Governance Threshold, Decision Threshold, Proposal Threshold, execution delay lists for proposals, as well as two sets of addresses: one for the new list of secretaries and another for the new list of executors.\r\n     * @param pool The address of the pool on behalf of which this proposal will be launched and for which the Governance settings will be changed.\r\n     * @param settings New governance settings.\r\n     * @param secretary Add a new address to the pool's secretary list.\r\n     * @param executor Add a new address to the pool's executor list.\r\n     * @param description Proposal description.\r\n     * @param metaHash Hash value of the proposal metadata.\r\n     * @return proposalId The ID of the created proposal.\r\n     */\r\n    function proposeGovernanceSettingsWithRoles(\r\n        address pool,\r\n        IGovernanceSettings.NewGovernanceSettings memory settings,\r\n        address[] memory secretary,\r\n        address[] memory executor,\r\n        string memory description,\r\n        string memory metaHash\r\n    ) external returns (uint256 proposalId) {\r\n        //Check if last GovernanceSettings proposal is not Active\r\n\r\n        require(\r\n            !IPool(pool).isLastProposalIdByTypeActive(2),\r\n            ExceptionsLibrary.ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\r\n        );\r\n\r\n        // Validate settings\r\n        IPool(pool).validateGovernanceSettings(settings);\r\n\r\n        // Prepare proposal action\r\n        address[] memory targets = new address[](1);\r\n        targets[0] = pool;\r\n\r\n        uint256[] memory values = new uint256[](1);\r\n        values[0] = 0;\r\n\r\n        bytes[] memory callDatas = new bytes[](1);\r\n        callDatas[0] = abi.encodeWithSelector(\r\n            IPool.setSettings.selector,\r\n            settings,\r\n            secretary,\r\n            executor\r\n        );\r\n\r\n        // Propose\r\n        uint256 proposalId_ = IPool(pool).propose(\r\n            msg.sender,\r\n            2,\r\n            IGovernor.ProposalCoreData({\r\n                targets: targets,\r\n                values: values,\r\n                callDatas: callDatas,\r\n                quorumThreshold: 0,\r\n                decisionThreshold: 0,\r\n                executionDelay: 0\r\n            }),\r\n            IGovernor.ProposalMetaData({\r\n                proposalType: IRecordsRegistry.EventType.GovernanceSettings,\r\n                description: description,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n\r\n        return proposalId_;\r\n    }\r\n}\r\n"
    },
    "contracts/governor/GovernanceSettings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"../interfaces/registry/IRegistry.sol\";\r\nimport \"../interfaces/registry/IRecordsRegistry.sol\";\r\nimport \"../interfaces/governor/IGovernanceSettings.sol\";\r\nimport \"../libraries/ExceptionsLibrary.sol\";\r\n/**\r\n* @title Governance Settings Contract\r\n* @notice This module is responsible for storing, validating, and applying Governance settings, and it inherits from the GovernorProposals contract.\r\n*@dev This contract houses one of the most important structures of the protocol called GovernanceSettingsSet. It is used to represent various numerical parameters that universally and comprehensively describe the voting process. The module includes methods for formal data validation, which is proposed to be stored using this structure.\r\n*/\r\nabstract contract GovernanceSettings is IGovernanceSettings {\r\n    // CONSTANTS\r\n\r\n    /** \r\n    * @notice Denominator for shares (such as thresholds)\r\n    * @dev The constant Service.sol:DENOM is used to work with percentage values of QuorumThreshold and DecisionThreshold thresholds, as well as for calculating the ProtocolTokenFee. In this version, it is equal to 1,000,000, for clarity stored as 100 * 10 ^ 4.\r\n    10^4 corresponds to one percent, and 100 * 10^4 corresponds to one hundred percent.\r\n    The value of 12.3456% will be written as 123,456, and 78.9% as 789,000.\r\n    This notation allows specifying ratios with an accuracy of up to four decimal places in percentage notation (six decimal places in decimal notation).\r\n    When working with the CompanyDAO frontend, the application scripts automatically convert the familiar percentage notation into the required format. When using the contracts independently, this feature of value notation should be taken into account.\r\n    */\r\n    uint256 private constant DENOM = 100 * 10**4;\r\n\r\n    // STORAGE\r\n\r\n    /**\r\n    * @notice The minimum amount of votes required to create a proposal\r\n    * @dev The proposal threshold is the number of votes (i.e., tokens delegated to an address) that are minimally required to create a proposal. When calling the Pool:propose method, the contract compares the number of votes of the address with this value, and if there are insufficient tokens in the delegation, the transaction ends with a revert.\r\n    This value is stored in the Pool contract as an integer, taking into account the \"Decimals\" parameter of the Governance token. In the current version, for Governance tokens, this parameter is equal to 18. That is, the 18 rightmost digits of the value represent the fractional part of the number of tokens required to create a proposal.\r\n    Each pool can set any ProposalThreshold value in the range from 0 to the maximum value allowed by the uint256 type. The setting is made in conjunction with changing other Governance Settings either by the Owner of the pool when launching the primary TGE or during the execution of \"Governance Settings\" proposal transactions.\r\n    */\r\n    uint256 public proposalThreshold;\r\n\r\n    /** \r\n    * @notice The minimum amount of votes which need to participate in the proposal in order for the proposal to be considered valid, given as a percentage of all existing votes\r\n    * @dev The quorum threshold is a percentage ratio stored in the Pool contract as an integer using the DENOM entry. It indicates the minimum share of all proposals[proposalId].vote.availableVotes that must be used in voting (regardless of whether the votes were \"for\" or \"against\", their sum matters) for the vote to be considered valid.\r\n    Reaching the Quorum Threshold is one of several conditions required for a proposal to be accepted and executable.\r\n    Each pool can set any QuorumThreshold value in the range from 0 to 100%. The setting is made in conjunction with changing other Governance Settings either by the Owner of the pool when launching the primary TGE or during the execution of \"Governance Settings\" proposal transactions.\r\n    */\r\n    uint256 public quorumThreshold;\r\n\r\n    /** \r\n    * @notice The minimum amount of votes which are needed to approve the proposal, given as a percentage of all participating votes\r\n    * @dev The decision threshold is a percentage ratio stored in the Pool contract as an integer using the DENOM entry. It indicates the minimum share of the votes cast by users that must be cast \"for\" a proposal during voting for a positive decision to be made.\r\n    The sum of all votes cast by users during voting can be calculated using the formula:\r\n        Pool:proposals[proposalId].vote.forVotes + Pool:proposals[proposalId].vote.againstVotes\r\n    Reaching the Decision Threshold is one of several conditions required for a proposal to be accepted and executable.\r\n    Each pool can set any DecisionThreshold value in the range from 0 to 100%. The setting is made in conjunction with changing other Governance Settings either by the Owner of the pool when launching the primary TGE or during the execution of \"Governance Settings\" proposal transactions.\r\n    */\r\n    uint256 public decisionThreshold;\r\n\r\n    /// @notice The amount of time for which the proposal will remain active, given as the number of blocks which have elapsed since the creation of the proposal\r\n    uint256 public votingDuration;\r\n\r\n    /// @notice The threshold value for a transaction which triggers the transaction execution delay\r\n    uint256 public transferValueForDelay;\r\n\r\n    /// @notice Returns transaction execution delay values for different proposal types\r\n    mapping(IRegistry.EventType => uint256) public executionDelays;\r\n\r\n    /// @notice Delay before voting starts. In blocks\r\n    uint256 public votingStartDelay;\r\n\r\n    /// @notice Storage gap (for future upgrades)\r\n    uint256[49] private __gap;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n    * @notice This event emitted only when the following values (governance settings) are set for a particular pool\r\n     * @dev The emission of this event can coincide with the purchase of a pool, the launch of an initial TGE, or the execution of a transaction prescribed by a proposal with the GovernanceSettings type.GovernanceSettings\r\n     * @param proposalThreshold_ the proposal threshold (specified in token units with decimals taken into account)\r\n     * @param quorumThreshold_ the quorum threshold (specified as a percentage)\r\n     * @param decisionThreshold_ the decision threshold (specified as a percentage)\r\n     * @param votingDuration_ the duration of the voting period (specified in blocks)\r\n     * @param transferValueForDelay_ the minimum amount in USD for which a transfer from the pool wallet will be subject to a delay\r\n     * @param executionDelays_ execution delays specified in blocks for different types of proposals\r\n     * @param votingStartDelay_ the delay before voting starts for newly created proposals, specified in blocks\r\n     */\r\n    event GovernanceSettingsSet(\r\n        uint256 proposalThreshold_,\r\n        uint256 quorumThreshold_,\r\n        uint256 decisionThreshold_,\r\n        uint256 votingDuration_,\r\n        uint256 transferValueForDelay_,\r\n        uint256[4] executionDelays_,\r\n        uint256 votingStartDelay_\r\n    );\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @notice Updates governance settings\r\n     * @param settings New governance settings\r\n     */\r\n    function setGovernanceSettings(NewGovernanceSettings memory settings)\r\n        external\r\n    {\r\n        // The governance settings function can only be called by the pool contract\r\n        require(msg.sender == address(this), ExceptionsLibrary.INVALID_USER);\r\n\r\n        // Internal function to update governance settings\r\n        _setGovernanceSettings(settings);\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @notice Updates governance settings\r\n     * @param settings New governance settings\r\n     */\r\n    function _setGovernanceSettings(NewGovernanceSettings memory settings)\r\n        internal\r\n    {\r\n        // Validates the values for governance settings\r\n        _validateGovernanceSettings(settings);\r\n\r\n        // Apply settings\r\n        proposalThreshold = settings.proposalThreshold;\r\n        quorumThreshold = settings.quorumThreshold;\r\n        decisionThreshold = settings.decisionThreshold;\r\n        votingDuration = settings.votingDuration;\r\n        transferValueForDelay = settings.transferValueForDelay;\r\n\r\n        executionDelays[IRecordsRegistry.EventType.None] = settings\r\n            .executionDelays[0];\r\n        executionDelays[IRecordsRegistry.EventType.Transfer] = settings\r\n            .executionDelays[1];\r\n        executionDelays[IRecordsRegistry.EventType.TGE] = settings\r\n            .executionDelays[2];\r\n        executionDelays[\r\n            IRecordsRegistry.EventType.GovernanceSettings\r\n        ] = settings.executionDelays[3];\r\n\r\n        votingStartDelay = settings.votingStartDelay;\r\n    }\r\n\r\n    // INTERNAL VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @notice Validates governance settings\r\n     * @param settings New governance settings\r\n     */\r\n    function _validateGovernanceSettings(NewGovernanceSettings memory settings)\r\n        internal\r\n        pure\r\n    {\r\n        // Check all values for sanity\r\n        require(\r\n            settings.quorumThreshold < DENOM,\r\n            ExceptionsLibrary.INVALID_VALUE\r\n        );\r\n        require(\r\n            settings.decisionThreshold <= DENOM,\r\n            ExceptionsLibrary.INVALID_VALUE\r\n        );\r\n        require(settings.votingDuration > 0, ExceptionsLibrary.INVALID_VALUE);\r\n    }\r\n}\r\n"
    },
    "contracts/governor/Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"../libraries/ExceptionsLibrary.sol\";\r\nimport \"../interfaces/IService.sol\";\r\nimport \"../interfaces/IPool.sol\";\r\nimport \"../interfaces/governor/IGovernor.sol\";\r\nimport \"../interfaces/registry/IRegistry.sol\";\r\n\r\n/**\r\n* @title Governor Contract\r\n* @notice This contract extends the functionality of the pool contract. If the pool has been granted DAO status, Governance tokens can be used as votes during the voting process for proposals created for the pool. With this architecture, the pool can invoke methods on behalf of itself provided by this module to execute transactions prescribed by proposals.\r\n* @dev This module provides additional methods for creating proposals, participating and observing the voting process, as well as safely and securely counting votes and executing decisions that have undergone voting.\r\n*/\r\nabstract contract Governor {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using AddressUpgradeable for address payable;\r\n\r\n    // CONSTANTS\r\n\r\n    /** \r\n    * @notice Denominator for shares (such as thresholds)\r\n    * @dev The constant Service.sol:DENOM is used to work with percentage values of QuorumThreshold and DecisionThreshold thresholds, as well as for calculating the ProtocolTokenFee. In this version, it is equal to 1,000,000, for clarity stored as 100 * 10 ^ 4.\r\n    10^4 corresponds to one percent, and 100 * 10^4 corresponds to one hundred percent.\r\n    The value of 12.3456% will be written as 123,456, and 78.9% as 789,000.\r\n    This notation allows specifying ratios with an accuracy of up to four decimal places in percentage notation (six decimal places in decimal notation).\r\n    When working with the CompanyDAO frontend, the application scripts automatically convert the familiar percentage notation into the required format. When using the contracts independently, this feature of value notation should be taken into account.\r\n    */\r\n    uint256 private constant DENOM = 100 * 10**4;\r\n\r\n    // STORAGE\r\n\r\n    /**\r\n    * @notice Proposal state codes.\r\n    * @dev Additional data type used only in this extension.\r\n    \"0\" / \"None\" - the proposal does not exist\r\n    \"1\" / \"Active\" - the proposal has been launched and is being voted on\r\n    \"2\" / \"Failed\" - the voting is complete, and the result is negative\r\n    \"3\" / \"Delayed\" - the voting is complete, the result is positive, and the system is waiting for a security timeout to complete, during which the service administrator can cancel the execution\r\n    \"4\" / \"AwaitingExecution\" - the voting is complete, the result is positive, and the executeProposal method must be called by an account with the appropriate role\r\n    \"5\" / \"Executed\" - the voting is complete, the result is positive, and the transaction provided by the proposal has been executed\r\n    \"6\" / \"Cancelled\" - the voting is complete with a positive result, or it has been prematurely cancelled, and the proposal has been cancelled by the administrator\r\n    */\r\n    enum ProposalState {\r\n        None,\r\n        Active,\r\n        Failed,\r\n        Delayed,\r\n        AwaitingExecution,\r\n        Executed,\r\n        Cancelled\r\n    }\r\n\r\n    /**\r\n    * @notice This structure is used for a complete description of the proposal state.\r\n     * @dev Each proposal has a field represented by this structure, which stores information on the progress of the voting. Note that \r\n    - endBlock may differ from the calculated value (currentBlock + votingDuration), since at the time of creating the proposal, it will be increased by votingStartDelay, and if the required number and ratio of votes is reached to recognize this vote as completed early with some result, this field is overwritten\r\n    - startBlock may differ from the calculated value (currentBlock), since at the time of creating the proposal, it will be increased by votingStartDelay  \r\n     * @param startBlock The true block start of the voting\r\n     * @param endBlock The true block end of the voting\r\n     * @param availableVotes The total number of available votes calculated at the time of creating the proposal\r\n     * @param forVotes The number of votes \"for\" cast\r\n     * @param againstVotes The number of votes \"against\" cast\r\n     * @param executionState The digital code of the proposal state\r\n     */\r\n    struct ProposalVotingData {\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 availableVotes;\r\n        uint256 forVotes;\r\n        uint256 againstVotes;\r\n        ProposalState executionState;\r\n    }\r\n\r\n    /**\r\n    * @notice The structure that includes all the nested structures describing the subject, state, and metadata of the voting.\r\n     * @dev This is the format in which information about each individual proposal is stored in the contract. Since the Pool contract inherits from Governor, all proposals for an individual pool are stored separately in the public mapping(uint256 => Proposal) proposals, where the mapping key is the internal proposal identifier (which is subsequently stored in the array of records of the Registry contract).\r\n     * @param core Data on the voting settings that were applied to this proposal\r\n     * @param vote Cumulative information on the progress of voting on this proposal\r\n     * @param meta Metadata on the subject of the vote\r\n     */\r\n    struct Proposal {\r\n        IGovernor.ProposalCoreData core;\r\n        ProposalVotingData vote;\r\n        IGovernor.ProposalMetaData meta;\r\n    }\r\n\r\n    //// @notice Mapping that contains all the proposals launched for this pool.\r\n    /// @dev In this mapping, the local identifier (specific to the pool's scope) is used as the key. The proposal is also registered in the Registry contract, where it is assigned a global number.\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice These numerical codes determine which side an account took during the voting process.\r\n    /// @dev \"0\" - not voted, \"1\" - voted \"against\", \"2\" - voted \"for\".\r\n    enum Ballot {\r\n        None,\r\n        Against,\r\n        For\r\n    }\r\n\r\n    /// @notice Mapping with the voting history.\r\n    /// @dev The account address is used as the first key, and the proposal number is used as the second key. The stored value for these keys is described by the Ballot type.\r\n    mapping(address => mapping(uint256 => Ballot)) public ballots;\r\n\r\n    /// @dev Last proposal ID\r\n    uint256 public lastProposalId;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted on proposal creation\r\n     * @param proposalId Proposal ID\r\n     * @param core Proposal core data\r\n     * @param meta Proposal meta data\r\n     */\r\n    event ProposalCreated(\r\n        uint256 proposalId,\r\n        IGovernor.ProposalCoreData core,\r\n        IGovernor.ProposalMetaData meta\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted on proposal vote cast\r\n     * @param voter Voter address\r\n     * @param proposalId Proposal ID\r\n     * @param votes Amount of votes\r\n     * @param ballot Ballot (against or for)\r\n     */\r\n    event VoteCast(\r\n        address voter,\r\n        uint256 proposalId,\r\n        uint256 votes,\r\n        Ballot ballot\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted on proposal execution\r\n     * @param proposalId Proposal ID\r\n     */\r\n    event ProposalExecuted(uint256 proposalId);\r\n\r\n    /**\r\n     * @dev Event emitted on proposal cancellation\r\n     * @param proposalId Proposal ID\r\n     */\r\n    event ProposalCancelled(uint256 proposalId);\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n    * @notice This method returns the state of the specified proposal.\r\n     * @dev Among the Governance Settings, there is a parameter called votingDuration, which contains the number of blocks for the duration of the vote, and a parameter called votingStartDelay, which contains the number of blocks for the delay of the vote's start relative to the block of the proposal's creation.\r\n    The start and end blocks of the vote are placed in the Pool:proposals[proposalId] entry as vote.startBlock and vote.endBlock.\r\n        vote.startBlock = block.number + votingStartDelay\r\n        vote.endBlock = block.number + votingStartDelay + votingDuration\r\n    The proposal status can be obtained from the Pool:proposalState(proposalId) method. It is formed by comparing the current block with the end block, as well as from proposals[proposalId].vote.executionState, which can store irreversible state flags \"Canceled\" or \"Executed\". This value is a numerical code for one of the proposal states, with all possible state types listed in Governor.sol:ProposalState.\r\n    Before the endBlock occurs, the proposal has an Active status, but the ability to vote (using the castVote method in the Pool contract) only appears from the startBlock. This status means that the QuorumThreshold and/or DecisionThreshold have not yet been reached, and there is still a sufficient number of unused votes, the application of which can lead to either of the two results.\r\n    When the endBlock occurs, the proposal is no longer Active. New votes are not accepted, and the state changes to:\r\n    - Failed if the QuorumThreshold and/or DecisionThreshold were not met by the voters\r\n    - Delayed if both thresholds were met.\r\n    The Failed state is irreversible and means that the decision \"for\" was not made, i.e., the transactions prescribed by the proposal cannot be executed.\r\n    The Delayed state means that the necessary number of votes has been cast \"for\" the proposal, but the transactions prescribed by the proposal can be executed only after proposals[proposalId].core.executionDelay blocks have passed.\r\n    The AwaitingExecution state means that the necessary number of votes has been cast \"for\" the proposal, the delay has ended, and the transactions prescribed by the proposal can be executed right now.\r\n    The Canceled state means that the address assigned the ADMIN role in the Service contract used the cancelProposal method of the Service contract and canceled the execution of the proposal. This method could work only if the proposal had an Active, Delayed, or AwaitingExecution state at the time of cancellation. This state is irreversible; the proposal permanently loses the ability to accept votes, and its transactions will not be executed.\r\n    The Executed state means that the address assigned the SERVICE_MANAGER role in the Service contract, or the address assigned the Executor role in the Pool contract, or any address if no address was assigned the Executor role in the pool, used the executeProposal method in the Pool contract. This state means that all transactions prescribed by the proposal have been successfully executed.\r\n    * @param proposalId Идентификатор Proposal.\r\n    * @return The state code using the ProposalState type.\r\n     */\r\n    function proposalState(uint256 proposalId)\r\n        public\r\n        view\r\n        returns (ProposalState)\r\n    {\r\n        Proposal memory proposal = proposals[proposalId];\r\n\r\n        if (proposal.vote.startBlock == 0) {\r\n            return ProposalState.None;\r\n        }\r\n\r\n        // If proposal executed, cancelled or simply not started, return immediately\r\n        if (\r\n            proposal.vote.executionState == ProposalState.Executed ||\r\n            proposal.vote.executionState == ProposalState.Cancelled\r\n        ) {\r\n            return proposal.vote.executionState;\r\n        }\r\n        if (\r\n            proposal.vote.startBlock > 0 &&\r\n            block.number < proposal.vote.startBlock\r\n        ) {\r\n            return ProposalState.Active;\r\n        }\r\n        uint256 availableVotesForStartBlock = _getBlockTotalVotes(\r\n            proposal.vote.startBlock - 1\r\n        );\r\n        uint256 castVotes = proposal.vote.forVotes + proposal.vote.againstVotes;\r\n\r\n        if (block.number >= proposal.vote.endBlock) {\r\n            // Proposal fails if quorum threshold is not reached\r\n            if (\r\n                !shareReached(\r\n                    castVotes,\r\n                    availableVotesForStartBlock,\r\n                    proposal.core.quorumThreshold\r\n                )\r\n            ) {\r\n                return ProposalState.Failed;\r\n            }\r\n            // Proposal fails if decision threshold is not reched\r\n            if (\r\n                !shareReached(\r\n                    proposal.vote.forVotes,\r\n                    castVotes,\r\n                    proposal.core.decisionThreshold\r\n                )\r\n            ) {\r\n                return ProposalState.Failed;\r\n            }\r\n            // Otherwise succeeds, check for delay\r\n            if (\r\n                block.number >=\r\n                proposal.vote.endBlock + proposal.core.executionDelay\r\n            ) {\r\n                return ProposalState.AwaitingExecution;\r\n            } else {\r\n                return ProposalState.Delayed;\r\n            }\r\n        } else {\r\n            return ProposalState.Active;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev This method is used to work with the voting history and returns the vote code according to the Ballot type made by the specified account in the specified proposal. Additionally, using the pastVotes snapshots, it provides information about the number of votes this account had during the specified voting.\r\n    * @param account Account address.\r\n    * @param proposalId Proposal identifier.\r\n    * @return ballot Vote type.\r\n    * @return votes Number of votes cast.\r\n    */\r\n    function getBallot(address account, uint256 proposalId)\r\n        public\r\n        view\r\n        returns (Ballot ballot, uint256 votes)\r\n    {\r\n        if (proposals[proposalId].vote.startBlock - 1 < block.number)\r\n            return (\r\n                ballots[account][proposalId],\r\n                _getPastVotes(\r\n                    account,\r\n                    proposals[proposalId].vote.startBlock - 1\r\n                )\r\n            );\r\n        else\r\n            return (\r\n                ballots[account][proposalId],\r\n                _getPastVotes(account, block.number - 1)\r\n            );\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @dev Creating a proposal and assigning it a unique identifier to store in the list of proposals in the Governor contract.\r\n     * @param core Proposal core data\r\n     * @param meta Proposal meta data\r\n     * @param votingDuration Voting duration in blocks\r\n     */\r\n    function _propose(\r\n        IGovernor.ProposalCoreData memory core,\r\n        IGovernor.ProposalMetaData memory meta,\r\n        uint256 votingDuration,\r\n        uint256 votingStartDelay\r\n    ) internal returns (uint256 proposalId) {\r\n        // Increment ID counter\r\n        proposalId = ++lastProposalId;\r\n\r\n        // Create new proposal\r\n        proposals[proposalId] = Proposal({\r\n            core: core,\r\n            vote: ProposalVotingData({\r\n                startBlock: block.number + votingStartDelay,\r\n                endBlock: block.number + votingStartDelay + votingDuration,\r\n                availableVotes: 0,\r\n                forVotes: 0,\r\n                againstVotes: 0,\r\n                executionState: ProposalState.None\r\n            }),\r\n            meta: meta\r\n        });\r\n\r\n        // Call creation hook\r\n        _afterProposalCreated(proposalId);\r\n\r\n        // Emit event\r\n        emit ProposalCreated(proposalId, core, meta);\r\n    }\r\n\r\n    /**\r\n    * @notice Implementation of the voting method for the pool contract.\r\n    * @dev This method includes a check that the proposal is still in the \"Active\" state and eligible for the user to cast their vote. Additionally, each invocation of this method results in an additional check for the conditions to prematurely end the voting.\r\n    * @param proposalId Proposal ID.\r\n    * @param support \"True\" for a vote \"in favor/for,\" \"False\" otherwise.\r\n    */\r\n    function _castVote(uint256 proposalId, bool support) internal {\r\n        // Check that voting exists, is started and not finished\r\n        require(\r\n            proposals[proposalId].vote.startBlock != 0,\r\n            ExceptionsLibrary.NOT_LAUNCHED\r\n        );\r\n        require(\r\n            proposals[proposalId].vote.startBlock <= block.number,\r\n            ExceptionsLibrary.NOT_LAUNCHED\r\n        );\r\n        require(\r\n            proposals[proposalId].vote.endBlock > block.number,\r\n            ExceptionsLibrary.VOTING_FINISHED\r\n        );\r\n        require(\r\n            ballots[msg.sender][proposalId] == Ballot.None,\r\n            ExceptionsLibrary.ALREADY_VOTED\r\n        );\r\n\r\n        // Get number of votes\r\n        uint256 votes = _getPastVotes(\r\n            msg.sender,\r\n            proposals[proposalId].vote.startBlock - 1\r\n        );\r\n\r\n        require(votes > 0, ExceptionsLibrary.ZERO_VOTES);\r\n\r\n        // Account votes\r\n        if (support) {\r\n            proposals[proposalId].vote.forVotes += votes;\r\n            ballots[msg.sender][proposalId] = Ballot.For;\r\n        } else {\r\n            proposals[proposalId].vote.againstVotes += votes;\r\n            ballots[msg.sender][proposalId] = Ballot.Against;\r\n        }\r\n\r\n        // Check for voting early end\r\n        _checkProposalVotingEarlyEnd(proposalId);\r\n\r\n        // Emit event\r\n        emit VoteCast(\r\n            msg.sender,\r\n            proposalId,\r\n            votes,\r\n            support ? Ballot.For : Ballot.Against\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performance of the proposal with checking its status. Only the Awaiting Execution of the proposals can be executed.\r\n     * @param proposalId Proposal ID\r\n     * @param service Service address\r\n     */\r\n    function _executeProposal(uint256 proposalId, IService service) internal {\r\n        // Check state\r\n        require(\r\n            proposalState(proposalId) == ProposalState.AwaitingExecution,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n\r\n        // Mark as executed\r\n        proposals[proposalId].vote.executionState = ProposalState.Executed;\r\n\r\n        // Execute actions\r\n        Proposal memory proposal = proposals[proposalId];\r\n        for (uint256 i = 0; i < proposal.core.targets.length; i++) {\r\n            if (proposal.core.callDatas[i].length == 0) {\r\n                payable(proposal.core.targets[i]).sendValue(\r\n                    proposal.core.values[i]\r\n                );\r\n            } else {\r\n                proposal.core.targets[i].functionCallWithValue(\r\n                    proposal.core.callDatas[i],\r\n                    proposal.core.values[i]\r\n                );\r\n            }\r\n        }\r\n\r\n        // Add event to service\r\n        service.addEvent(\r\n            proposal.meta.proposalType,\r\n            proposalId,\r\n            proposal.meta.metaHash\r\n        );\r\n\r\n        // Emit contract event\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev The substitution of proposals, both active and those that have a positive voting result, but have not yet been executed.\r\n     * @param proposalId Proposal ID\r\n     */\r\n    function _cancelProposal(uint256 proposalId) internal {\r\n        // Check proposal state\r\n        ProposalState state = proposalState(proposalId);\r\n        require(\r\n            state == ProposalState.Active ||\r\n                state == ProposalState.Delayed ||\r\n                state == ProposalState.AwaitingExecution,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n\r\n        // Mark proposal as cancelled\r\n        proposals[proposalId].vote.executionState = ProposalState.Cancelled;\r\n\r\n        // Emit event\r\n        emit ProposalCancelled(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice The method checks whether it is possible to end the voting early with the result fixed. If a quorum was reached and so many votes were cast in favor that even if all other available votes were cast against, or if so many votes were cast against that it could not affect the result of the vote, this function will change set the end block of the proposal to the current block\r\n     * @dev During the voting process, a situation may arise when such a number of votes have been cast \"for\" or \"against\" a proposal that no matter how the remaining votes are distributed, the outcome of the proposal will not change.\r\n    This can occur in the following situations:\r\n    - The sum of \"for\" votes and unused votes does not exceed the DecisionThreshold of the total number of votes allowed in the voting process (occurs when there are so many \"against\" votes that even using the remaining votes in favor of the proposal will not allow overcoming the DecisionThreshold).\r\n    - The number of \"for\" votes is no less than the DecisionThreshold of the total number of votes allowed in the voting process (occurs when there are so many \"for\" votes that even if all the remaining unused votes are cast \"against\", the proposal will still be considered accepted).\r\n    Both of these conditions trigger ONLY when the QuorumThreshold is reached simultaneously.\r\n    In such cases, further voting and waiting become pointless and meaningless. No subsequent vote can influence the outcome of the voting to change.\r\n    Therefore, an additional check for triggering the conditions described above has been added to the Pool:castVote method. If the vote can be safely terminated early, the proposals[proposalId].vote.endBlock is changed to the current one during the method's execution.\r\n    This means that the state of the proposal ceases to be Active and should change to Failed or Delayed.\r\n     * @param proposalId Proposal ID\r\n     */\r\n    function _checkProposalVotingEarlyEnd(uint256 proposalId) internal {\r\n        // Get values\r\n        Proposal memory proposal = proposals[proposalId];\r\n        uint256 availableVotesForStartBlock = _getBlockTotalVotes(\r\n            proposal.vote.startBlock - 1\r\n        );\r\n        uint256 castVotes = proposal.vote.forVotes + proposal.vote.againstVotes;\r\n        uint256 extraVotes = availableVotesForStartBlock - castVotes;\r\n\r\n        // Check if quorum is reached\r\n        if (\r\n            !shareReached(\r\n                castVotes,\r\n                availableVotesForStartBlock,\r\n                proposal.core.quorumThreshold\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // Check for early guaranteed result\r\n        if (\r\n            !shareOvercome(\r\n                proposal.vote.forVotes + extraVotes,\r\n                availableVotesForStartBlock,\r\n                proposal.core.decisionThreshold\r\n            ) ||\r\n            shareReached(\r\n                proposal.vote.forVotes,\r\n                availableVotesForStartBlock,\r\n                proposal.core.decisionThreshold\r\n            )\r\n        ) {\r\n            // Mark voting as finished\r\n            proposals[proposalId].vote.endBlock = block.number;\r\n        }\r\n    }\r\n\r\n    // INTERNAL PURE FUNCTIONS\r\n\r\n    /**\r\n     * @dev Checks if `amount` divided by `total` exceeds `share`\r\n     * @param amount Amount numerator\r\n     * @param total Amount denominator\r\n     * @param share Share numerator\r\n     */\r\n    function shareReached(\r\n        uint256 amount,\r\n        uint256 total,\r\n        uint256 share\r\n    ) internal pure returns (bool) {\r\n        return amount * DENOM >= share * total;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `amount` divided by `total` overcomes `share`\r\n     * @param amount Amount numerator\r\n     * @param total Amount denominator\r\n     * @param share Share numerator\r\n     */\r\n    function shareOvercome(\r\n        uint256 amount,\r\n        uint256 total,\r\n        uint256 share\r\n    ) internal pure returns (bool) {\r\n        return amount * DENOM > share * total;\r\n    }\r\n\r\n    // ABSTRACT FUNCTIONS\r\n\r\n    /**\r\n     * @dev Hook called after a proposal is created\r\n     * @param proposalId Proposal ID\r\n     */\r\n    function _afterProposalCreated(uint256 proposalId) internal virtual;\r\n\r\n    /**\r\n     * @dev Function that returns the total amount of votes in the pool in block\r\n     * @param blocknumber block number\r\n     * @return Total amount of votes\r\n     */\r\n    function _getBlockTotalVotes(uint256 blocknumber)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Function that returns the amount of votes for a client adrress at any given block\r\n     * @param account Account's address\r\n     * @param blockNumber Block number\r\n     * @return Account's votes at given block\r\n     */\r\n    function _getPastVotes(address account, uint256 blockNumber)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Function that set last ProposalId for a client address\r\n     * @param proposer Proposer's address\r\n     * @param proposalId Proposal id\r\n     */\r\n    function _setLastProposalIdForAddress(address proposer, uint256 proposalId)\r\n        internal\r\n        virtual;\r\n}\r\n"
    },
    "contracts/governor/GovernorProposals.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\r\nimport \"./Governor.sol\";\r\nimport \"./GovernanceSettings.sol\";\r\nimport \"../interfaces/IPool.sol\";\r\nimport \"../interfaces/governor/IGovernorProposals.sol\";\r\nimport \"../interfaces/IService.sol\";\r\nimport \"../interfaces/registry/IRecordsRegistry.sol\";\r\nimport \"../interfaces/ITGE.sol\";\r\nimport \"../interfaces/IToken.sol\";\r\nimport \"../interfaces/ICustomProposal.sol\";\r\nimport \"../libraries/ExceptionsLibrary.sol\";\r\n/**\r\n* @title Governor Proposals Contract\r\n* @notice Contract for tracking and typing the created proposals.\r\n* @dev The final implementation of the voting logic is placed in this module, which inherits from the Governor contract and is inherited by pool contracts.\r\n*/\r\nabstract contract GovernorProposals is\r\n    Initializable,\r\n    Governor,\r\n    GovernanceSettings,\r\n    IGovernorProposals\r\n{\r\n    // STORAGE\r\n\r\n    /// @dev The address of the Service contract.\r\n    IService public service;\r\n\r\n    /// @dev last Proposal Id By Type for state checking\r\n    mapping(uint256 => uint256) public lastProposalIdByType;\r\n\r\n    /// @notice Numerical codes to determine the type of proposals being created.\r\n    /// @dev The code describes the nature and degree of impact on the pool of a set of transactions that should be executed as a result of a successful vote.\r\n    enum ProposalType {\r\n        Transfer,\r\n        TGE,\r\n        GovernanceSettings\r\n        // 3 - PoolSecretary\r\n        // 4 - CustomTx\r\n        // 5 - PoolExecutor\r\n        // 6 - proposeTGEERC1155\r\n    }\r\n\r\n    /// @notice Storage gap (for future upgrades)\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "contracts/interfaces/governor/IGovernanceSettings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IGovernanceSettings {\r\n    /**\r\n     * @notice This structure specifies and stores the Governance settings for each individual pool.\r\n     * @dev More information on the thresholds (proposal, quorum, decision) and creating proposals can be found in the \"Other Entities\" section.\r\n     * @param proposalThreshold_ The proposal threshold (specified in token units with decimals taken into account)\r\n     * @param quorumThreshold_ The quorum threshold (specified as a percentage)\r\n     * @param decisionThreshold_ The decision threshold (specified as a percentage)\r\n     * @param votingDuration_ The duration of the voting period (specified in blocks)\r\n     * @param transferValueForDelay_ The minimum amount in USD for which a transfer from the pool wallet will be subject to a del\r\n     * @param executionDelays_ List of execution delays specified in blocks for different types of proposals\r\n     * @param votingStartDelay The delay before voting starts for newly created proposals, specified in blocks\r\n     */\r\n    struct NewGovernanceSettings {\r\n        uint256 proposalThreshold;\r\n        uint256 quorumThreshold;\r\n        uint256 decisionThreshold;\r\n        uint256 votingDuration;\r\n        uint256 transferValueForDelay;\r\n        uint256[4] executionDelays;\r\n        uint256 votingStartDelay;\r\n    }\r\n\r\n    function setGovernanceSettings(\r\n        NewGovernanceSettings memory settings\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/governor/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../interfaces/registry/IRecordsRegistry.sol\";\r\n\r\ninterface IGovernor {\r\n    /**\r\n     * @notice Struct with proposal core data\r\n     * @dev This interface specifies the Governance settings that existed in the pool at the time of proposal creation, as well as the service data (to which addresses and with what messages and amounts of ETH should be sent) of the scenario that should be executed in case of a positive voting outcome.\r\n     * @param targets A list of addresses to be called in case of a positive voting outcome\r\n     * @param values The amounts of wei to be sent to the addresses from targets\r\n     * @param callDatas The 'calldata' messages to be attached to transactions\r\n     * @param quorumThreshold The quorum, expressed as a percentage with DENOM taken into account\r\n     * @param decisionThreshold The decision-making threshold, expressed as a percentage with DENOM taken into account\r\n     * @param executionDelay The number of blocks that must pass since the creation of the proposal for it to be considered launched\r\n     */\r\n    struct ProposalCoreData {\r\n        address[] targets;\r\n        uint256[] values;\r\n        bytes[] callDatas;\r\n        uint256 quorumThreshold;\r\n        uint256 decisionThreshold;\r\n        uint256 executionDelay;\r\n    }\r\n\r\n    /**\r\n     * @notice This interface specifies information about the subject of the voting, intended for human perception.\r\n     * @dev Struct with proposal metadata\r\n     * @param proposalType The digital code of the proposal type\r\n     * @param description The public description of the proposal\r\n     * @param metaHash The identifier of the private proposal description stored on the backend\r\n     */\r\n    struct ProposalMetaData {\r\n        IRecordsRegistry.EventType proposalType;\r\n        string description;\r\n        string metaHash;\r\n    }\r\n\r\n    function proposalState(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (uint256 state);\r\n}\r\n"
    },
    "contracts/interfaces/governor/IGovernorProposals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../IService.sol\";\n\ninterface IGovernorProposals {\n    function service() external view returns (IService);\n}\n"
    },
    "contracts/interfaces/ICustomProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./ITGE.sol\";\r\n\r\nimport \"./governor/IGovernanceSettings.sol\";\r\n\r\ninterface ICustomProposal {}\r\n"
    },
    "contracts/interfaces/IInvoice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n/**\r\n * @title Invoice Interface\r\n * @notice These structures are used to describe an instance of an invoice.\r\n * @dev The storage of invoices is managed in Invoice.sol in the `invoices` variable.\r\n*/\r\ninterface IInvoice {\r\n    /** \r\n    * @notice This interface contains a data structure that describes the payment rules for an invoice. \r\n    * @dev This data is used to validate the payment transaction, determine the state of the invoice, and so on. This data is formed from the input of the invoice creator.\r\n    * @param amount Amount to be paid\r\n    * @param unitOfAccount The address of the token contract that can be used to make the payment (a zero address assumes payment in native ETH)\r\n    * @param expirationBlock The block at which the invoice expires\r\n    * @param description Description of the invoice\r\n    * @param whitelist A whitelist of payers. An empty array denotes a public invoice.\r\n    */\r\n    struct InvoiceCore {\r\n        uint256 amount;\r\n        address unitOfAccount;\r\n        uint256 expirationBlock;\r\n        string description;\r\n        address[] whitelist;\r\n    }\r\n    /**\r\n    * @notice This interface is used to store complete records of invoices, including their current state, metadata, and payment rules.\r\n    * @dev This data is automatically formed when the invoice is created and changes when state-changing transactions are executed.\r\n    * @param core Payment rules (user input)\r\n    * @param invoiceId Invoice identifier\r\n    * @param createdBy The creator of the invoice\r\n    * @param isPaid Flag indicating whether the invoice has been successfully paid\r\n    * @param isCanceled Flag indicating whether the invoice has been canceled\r\n    */\r\n    struct InvoiceInfo {\r\n        InvoiceCore core;\r\n        uint256 invoiceId;\r\n        address createdBy;\r\n        bool isPaid;\r\n        bool isCanceled;\r\n    }\r\n    /**\r\n    * @notice Encoding the states of an individual invoice\r\n    * @dev None - for a non-existent invoice, Paid, Expired, Canceled - are completed invoice states where payment is not possible.\r\n    */\r\n    enum InvoiceState {\r\n        None,\r\n        Active,\r\n        Paid,\r\n        Expired,\r\n        Canceled\r\n    }\r\n\r\n    function createInvoice(address pool, InvoiceCore memory core) external;\r\n\r\n    function payInvoice(address pool, uint256 invoiceId) external payable;\r\n\r\n    function cancelInvoice(address pool, uint256 invoiceId) external;\r\n\r\n    function setInvoiceCanceled(address pool, uint256 invoiceId) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IToken.sol\";\r\nimport \"./registry/IRegistry.sol\";\r\nimport \"./registry/ICompaniesRegistry.sol\";\r\n\r\nimport \"./governor/IGovernor.sol\";\r\nimport \"./governor/IGovernanceSettings.sol\";\r\nimport \"./governor/IGovernorProposals.sol\";\r\n\r\ninterface IPool is IGovernorProposals {\r\n    function initialize(\r\n        ICompaniesRegistry.CompanyInfo memory companyInfo_\r\n    ) external;\r\n\r\n    function setNewOwnerWithSettings(\r\n        address owner_,\r\n        string memory trademark_,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_\r\n    ) external;\r\n\r\n    function propose(\r\n        address proposer,\r\n        uint256 proposalType,\r\n        IGovernor.ProposalCoreData memory core,\r\n        IGovernor.ProposalMetaData memory meta\r\n    ) external returns (uint256 proposalId);\r\n\r\n    function setToken(address token_, IToken.TokenType tokenType_) external;\r\n\r\n    function setProposalIdToTGE(address tge) external;\r\n\r\n    function cancelProposal(uint256 proposalId) external;\r\n\r\n    function setSettings(\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\r\n        address[] memory secretary,\r\n        address[] memory executor\r\n    ) external;\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isDAO() external view returns (bool);\r\n\r\n    function trademark() external view returns (string memory);\r\n\r\n    function getGovernanceToken() external view returns (IToken);\r\n\r\n    function tokenExists(IToken token_) external view returns (bool);\r\n\r\n    function tokenTypeByAddress(\r\n        address token_\r\n    ) external view returns (IToken.TokenType);\r\n\r\n    function isValidProposer(address account) external view returns (bool);\r\n\r\n    function isPoolSecretary(address account) external view returns (bool);\r\n\r\n    function isLastProposalIdByTypeActive(\r\n        uint256 type_\r\n    ) external view returns (bool);\r\n\r\n    function validateGovernanceSettings(\r\n        IGovernanceSettings.NewGovernanceSettings memory settings\r\n    ) external pure;\r\n\r\n    function getPoolSecretary() external view returns (address[] memory);\r\n\r\n    function getPoolExecutor() external view returns (address[] memory);\r\n\r\n    function setCompanyInfo(\r\n        uint256 _fee,\r\n        uint256 _jurisdiction,\r\n        uint256 _entityType,\r\n        string memory _ein,\r\n        string memory _dateOfIncorporation,\r\n        string memory _OAuri\r\n    ) external;\r\n\r\n    function castVote(uint256 proposalId, bool support) external;\r\n\r\n    function executeProposal(uint256 proposalId) external;\r\n\r\n    function getCompanyFee() external returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IService.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\";\r\nimport \"./ITGE.sol\";\r\nimport \"./ICustomProposal.sol\";\r\nimport \"./registry/IRecordsRegistry.sol\";\r\nimport \"./registry/ICompaniesRegistry.sol\";\r\nimport \"./registry/IRegistry.sol\";\r\nimport \"./IToken.sol\";\r\nimport \"./IInvoice.sol\";\r\nimport \"./IVesting.sol\";\r\nimport \"./ITokenFactory.sol\";\r\nimport \"./ITGEFactory.sol\";\r\nimport \"./IPool.sol\";\r\nimport \"./governor/IGovernanceSettings.sol\";\r\n\r\ninterface IService is IAccessControlEnumerableUpgradeable {\r\n    function ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\r\n\r\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\r\n\r\n    function EXECUTOR_ROLE() external view returns (bytes32);\r\n\r\n    function createPool(\r\n        ICompaniesRegistry.CompanyInfo memory companyInfo\r\n    ) external returns(address);\r\n\r\n    function addProposal(uint256 proposalId) external;\r\n\r\n    function addEvent(\r\n        IRecordsRegistry.EventType eventType,\r\n        uint256 proposalId,\r\n        string calldata metaHash\r\n    ) external;\r\n\r\n    function setProtocolCollectedFee(\r\n        address _token,\r\n        uint256 _protocolTokenFee\r\n    ) external;\r\n\r\n    function registry() external view returns (IRegistry);\r\n\r\n    function vesting() external view returns (IVesting);\r\n\r\n    function tokenFactory() external view returns (ITokenFactory);\r\n\r\n    function tgeFactory() external view returns (ITGEFactory);\r\n\r\n    function invoice() external view returns (IInvoice);\r\n\r\n    function protocolTreasury() external view returns (address);\r\n\r\n    function protocolTokenFee() external view returns (uint256);\r\n\r\n    function getMinSoftCap() external view returns (uint256);\r\n\r\n    function getProtocolTokenFee(\r\n        uint256 amount\r\n    ) external view returns (uint256);\r\n\r\n    function getProtocolCollectedFee(\r\n        address token_\r\n    ) external view returns (uint256);\r\n\r\n    function poolBeacon() external view returns (address);\r\n\r\n    function tgeBeacon() external view returns (address);\r\n\r\n    function tokenBeacon() external view returns (address);\r\n\r\n    function tokenERC1155Beacon() external view returns (address);\r\n\r\n    function customProposal() external view returns (ICustomProposal);\r\n\r\n    function validateTGEInfo(\r\n        ITGE.TGEInfo calldata info,\r\n        uint256 cap,\r\n        uint256 totalSupply,\r\n        IToken.TokenType tokenType\r\n    ) external view;\r\n\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function addInvoiceEvent(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external returns (uint256);\r\n\r\n    function purchasePool(\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        string memory trademark,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\r\n    ) external payable;\r\n\r\n    function transferPurchasedPoolByService(\r\n        address newowner,\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        string memory trademark,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\r\n    ) external;\r\n}"
    },
    "contracts/interfaces/ITGE.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./IToken.sol\";\r\nimport \"./ITokenERC1155.sol\";\r\nimport \"./IVesting.sol\";\r\n\r\ninterface ITGE {\r\n    /**\r\n    * @notice This structure defines comprehensive TGE settings, including Vesting, Lockup, and distribution rules for these tokens.\r\n    * @dev Initially, such a structure appears as a parameter when creating a proposal in CustomProposal, after which the data from the structure is placed in the storage of the deployed TGE contract.\r\n    * @dev In addition, these data are used as an argument in its original form in the TGEFactory contract, including when creating the initial TGE by the pool owner without a proposal.\r\n    * @param price The price of one token in the smallest unitOfAccount (1 wei when defining the price in ETH, 0.000001 USDT when defining the price in USDT, etc.)\r\n    * @param hardcap The maximum number of tokens that can be sold (note the ProtocolTokenFee for Governance Tokens)\r\n    * @param softcap The minimum number of tokens that buyers must acquire for the TGE to be considered successful\r\n    * @param minPurchase The minimum number of tokens that can be purchased by a single account (minimum one-time purchase)\r\n    * @param maxPurchase The maximum number of tokens that can be purchased by a single account in total during the launched TGE \r\n    * @param duration The duration of the event in blocks, after which the TGE status will be forcibly changed from Active to another\r\n    * @param vestingParams Vesting settings for tokens acquired during this TGE\r\n    * @param userWhiteList A list of addresses allowed to participate in this TGE. Leave the list empty to make the TGE public.\r\n    * @param unitOfAccount The address of the ERC20 or compatible token contract, in the smallest units of which the price of one token is determined\r\n    * @param lockupDuration The duration of token lockup (in blocks), one of two independent lockup conditions.\r\n    * @param lockupTVL The minimum total pool balance in USD, one of two independent lockup conditions.\r\n    */\r\n\r\n    struct TGEInfo {\r\n        uint256 price;\r\n        uint256 hardcap;\r\n        uint256 softcap;\r\n        uint256 minPurchase;\r\n        uint256 maxPurchase;\r\n        uint256 duration;\r\n        IVesting.VestingParams vestingParams;\r\n        address[] userWhitelist;\r\n        address unitOfAccount;\r\n        uint256 lockupDuration;\r\n        uint256 lockupTVL;\r\n    }\r\n\r\n    function initialize(\r\n        address _service,\r\n        address _token,\r\n        uint256 _tokenId,\r\n        string memory _uri,\r\n        TGEInfo calldata _info,\r\n        uint256 _protocolFee\r\n    ) external;\r\n\r\n    enum State {\r\n        Active,\r\n        Failed,\r\n        Successful\r\n    }\r\n\r\n    function token() external view returns (address);\r\n\r\n    function tokenId() external view returns (uint256);\r\n\r\n    function state() external view returns (State);\r\n\r\n    function getInfo() external view returns (TGEInfo memory);\r\n\r\n    function transferUnlocked() external view returns (bool);\r\n\r\n    function purchaseOf(address user) external view returns (uint256);\r\n\r\n    function redeemableBalanceOf(address user) external view returns (uint256);\r\n\r\n    function lockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function getEnd() external view returns (uint256);\r\n\r\n    function totalPurchased() external view returns (uint256);\r\n\r\n    function isERC1155TGE() external view returns (bool);\r\n\r\n    function purchase(uint256 amount) external payable;\r\n\r\n    function transferFunds() external;\r\n}\r\n"
    },
    "contracts/interfaces/ITGEFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./ITGE.sol\";\r\nimport \"./IToken.sol\";\r\nimport \"./governor/IGovernanceSettings.sol\";\r\n\r\ninterface ITGEFactory {\r\n    function createSecondaryTGE(\r\n        address token,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) external;\r\n\r\n    function createSecondaryTGEERC1155(\r\n        address token,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) external;\r\n\r\n    function createPrimaryTGE(\r\n        address poolAddress,\r\n        IToken.TokenInfo memory tokenInfo,\r\n        ITGE.TGEInfo memory tgeInfo,\r\n        string memory metadataURI,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\r\n        address[] memory secretary,\r\n        address[] memory executor\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\";\r\nimport \"./IService.sol\";\r\n\r\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\r\n    /**\r\n    * @notice This structure is used to define the parameters of ERC20 tokens issued by the protocol for pools.\r\n    * @dev This structure is suitable for both Governance and Preference tokens if they are based on ERC20.\r\n    * @param tokenType Numeric code for the token type\r\n    * @param name Full name of the token\r\n    * @param symbol Ticker symbol (short name) of the token\r\n    * @param description Description of the token\r\n    * @param cap Maximum allowable token issuance\r\n    * @param decimals Number of decimal places for the token (precision)\r\n    */\r\n    struct TokenInfo {\r\n        TokenType tokenType;\r\n        string name;\r\n        string symbol;\r\n        string description;\r\n        uint256 cap;\r\n        uint8 decimals;\r\n    }\r\n    /**\r\n    * @notice Token type encoding\r\n    */\r\n    enum TokenType {\r\n        None,\r\n        Governance,\r\n        Preference\r\n    }\r\n\r\n    function initialize(\r\n        IService service_,\r\n        address pool_,\r\n        TokenInfo memory info,\r\n        address primaryTGE_\r\n    ) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(address from, uint256 amount) external;\r\n\r\n    function cap() external view returns (uint256);\r\n\r\n    function unlockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function service() external view returns (IService);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenType() external view returns (TokenType);\r\n\r\n    function lastTGE() external view returns (address);\r\n\r\n    function getTGEList() external view returns (address[] memory);\r\n\r\n    function isPrimaryTGESuccessful() external view returns (bool);\r\n\r\n    function addTGE(address tge) external;\r\n\r\n    function setTGEVestedTokens(uint256 amount) external;\r\n\r\n    function setProtocolFeeReserved(uint256 amount) external;\r\n\r\n    function getTotalTGEVestedTokens() external view returns (uint256);\r\n\r\n    function getTotalProtocolFeeReserved() external view returns (uint256);\r\n\r\n    function totalSupplyWithReserves() external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function delegate(\r\n        address delegatee\r\n    ) external; \r\n}\r\n"
    },
    "contracts/interfaces/ITokenERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\r\nimport \"./IService.sol\";\r\nimport \"./IToken.sol\";\r\n\r\ninterface ITokenERC1155 is IERC1155Upgradeable {\r\n    function initialize(\r\n        IService service_,\r\n        address pool_,\r\n        IToken.TokenInfo memory info,\r\n        address primaryTGE_\r\n    ) external;\r\n\r\n    function mint(address to, uint256 tokenId, uint256 amount) external;\r\n\r\n    function burn(address from, uint256 tokenId, uint256 amount) external;\r\n\r\n    function cap(uint256 tokenId) external view returns (uint256);\r\n\r\n    function unlockedBalanceOf(\r\n        address account,\r\n        uint256 tokenId\r\n    ) external view returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function service() external view returns (IService);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function lastTokenId() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenType() external view returns (IToken.TokenType);\r\n\r\n    function lastTGE(uint256 tokenId) external view returns (address);\r\n\r\n    function getTGEList(\r\n        uint256 tokenId\r\n    ) external view returns (address[] memory);\r\n\r\n    function isPrimaryTGESuccessful(\r\n        uint256 tokenId\r\n    ) external view returns (bool);\r\n\r\n    function addTGE(address tge, uint256 tokenId) external;\r\n\r\n    function setTGEVestedTokens(uint256 amount, uint256 tokenId) external;\r\n\r\n    function setProtocolFeeReserved(uint256 amount, uint256 tokenId) external;\r\n\r\n    function getTotalTGEVestedTokens(\r\n        uint256 tokenId\r\n    ) external view returns (uint256);\r\n\r\n    function getTotalProtocolFeeReserved(\r\n        uint256 tokenId\r\n    ) external view returns (uint256);\r\n\r\n    function totalSupplyWithReserves(\r\n        uint256 tokenId\r\n    ) external view returns (uint256);\r\n\r\n    function setURI(uint256 tokenId, string memory tokenURI) external;\r\n\r\n    function setTokenIdCap(uint256 _tokenId, uint256 _cap) external;\r\n\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function setLastTokenId(uint256 tokenId) external;\r\n}\r\n"
    },
    "contracts/interfaces/ITokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IToken.sol\";\nimport \"./ITokenERC1155.sol\";\n\ninterface ITokenFactory {\n    function createToken(\n        address pool,\n        IToken.TokenInfo memory info,\n        address primaryTGE\n    ) external returns (address token);\n\n    function createTokenERC1155(\n        address pool,\n        IToken.TokenInfo memory info,\n        address primaryTGE\n    ) external returns (address token);\n}\n"
    },
    "contracts/interfaces/IVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IVesting {\r\n    /**\r\n     * @notice This interface describes a vesting program for tokens distributed within a specific TGE.\r\n     * @dev Such data is stored in the TGE contracts in the TGEInfo public info.\r\n     * @param vestedShare The percentage of tokens that participate in the vesting program (not distributed until conditions are met)\r\n     * @param cliff Cliff period (in blocks)\r\n     * @param cliffShare The portion of tokens that are distributed\r\n     * @param spans The number of periods for distributing the remaining tokens in vesting in equal shares\r\n     * @param spanDuration The duration of one such period (in blocks)\r\n     * @param spanShare The percentage of the total number of tokens in vesting that corresponds to one such period\r\n     * @param claimTVL The minimum required TVL of the pool after which it will be possible to claim tokens from vesting. Optional parameter (0 if this condition is not needed)\r\n     * @param resolvers A list of addresses that can cancel the vesting program for any address from the TGE participants list\r\n     */\r\n    struct VestingParams {\r\n        uint256 vestedShare;\r\n        uint256 cliff;\r\n        uint256 cliffShare;\r\n        uint256 spans;\r\n        uint256 spanDuration;\r\n        uint256 spanShare;\r\n        uint256 claimTVL;\r\n        address[] resolvers;\r\n    }\r\n\r\n    function vest(address to, uint256 amount) external;\r\n\r\n    function cancel(address tge, address account) external;\r\n\r\n    function validateParams(\r\n        VestingParams memory params\r\n    ) external pure returns (bool);\r\n\r\n    function vested(\r\n        address tge,\r\n        address account\r\n    ) external view returns (uint256);\r\n\r\n    function totalVested(address tge) external view returns (uint256);\r\n\r\n    function vestedBalanceOf(\r\n        address tge,\r\n        address account\r\n    ) external view returns (uint256);\r\n\r\n    function claim(address tge) external;\r\n}\r\n"
    },
    "contracts/interfaces/registry/ICompaniesRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"../ITGE.sol\";\r\nimport \"../IToken.sol\";\r\n\r\ninterface ICompaniesRegistry {\r\n    /**\r\n    * @notice This is how immutable data about companies is stored\r\n    * @dev For companies listed for sale, this data is stored in the Registry in mapping(uint256 => CompanyInfo) public companies. Additionally, this data is duplicated in the Pool contract in IRegistry.CompanyInfo public companyInfo.\r\n    * @param jurisdiction Numeric code for the jurisdiction (region where the company is registered)\r\n    * @param entityType Numeric code for the type of organization\r\n    * @param ein Unique registration number (uniqueness is checked within a single jurisdiction)\r\n    * @param dateOfIncorporation Date of company registration (in the format provided by the jurisdiction)\r\n    * @param fee Fost of the company in wei ETH\r\n    */ \r\n    struct CompanyInfo {\r\n        uint256 jurisdiction;\r\n        uint256 entityType;\r\n        string ein;\r\n        string dateOfIncorporation;\r\n        uint256 fee;\r\n    }\r\n\r\n    function lockCompany(\r\n        uint256 jurisdiction,\r\n        uint256 entityType\r\n    ) external returns (CompanyInfo memory);\r\n\r\n    function createCompany(\r\n        CompanyInfo calldata info\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/registry/IRecordsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IRecordsRegistry {\r\n    /**\r\n     * @notice In the section of the Registry contract that contains records of the type of deployed user contract, the following numeric encoding of contract types is used.\r\n     * @dev TGE is both a type of user contract and an event for which the contract was deployed.\r\n     **/\r\n    enum ContractType {\r\n        None,\r\n        Pool,\r\n        GovernanceToken,\r\n        PreferenceToken,\r\n        TGE\r\n    }\r\n    /**\r\n     * @notice Encoding of the registered event type\r\n     */\r\n    enum EventType {\r\n        None,\r\n        Transfer,\r\n        TGE,\r\n        GovernanceSettings\r\n    }\r\n\r\n    /**\r\n     * @notice This structure is used for contracts storing in the CompanyDAO ecosystem.\r\n     * @dev The Registry contract stores data about deployed user contracts in `ContractInfo[] public contractRecords`, where records receive a sequential and pool-independent numbering.\r\n     * @param addr Deployed contract address\r\n     * @param contractType Digital code of contract type\r\n     * @param description Contract description\r\n     */\r\n    struct ContractInfo {\r\n        address addr;\r\n        ContractType contractType;\r\n        string description;\r\n    }\r\n\r\n    /**\r\n     * @notice Using this data, you can refer to the contract of a specific pool to get more detailed information about the proposal.\r\n     * @dev The Registry contract stores data about proposals launched by users in `ProposalInfo[] public proposalRecords`, where records receive a sequential and pool-independent numbering.\r\n     * @param pool Pool contract in which the proposal was launched\r\n     * @param proposalId Internal proposal identifier for the pool\r\n     * @param description Proposal description\r\n     */\r\n    struct ProposalInfo {\r\n        address pool;\r\n        uint256 proposalId;\r\n        string description;\r\n    }\r\n\r\n    /**\r\n     * @dev The Registry contract stores data about all events that have taken place in `Event[] public events`, where records receive a sequential and pool-independent numbering.\r\n     * @param eventType Code of event type\r\n     * @param pool Address of the pool to which this event relates\r\n     * @param eventContract Address of the event contract, if the event type implies the deployment of a separate contract\r\n     * @param proposalId Internal proposal identifier for the pool, the execution of which led to the launch of this event\r\n     * @param metaHash Hash identifier of the private description stored on the backend\r\n     */\r\n    struct Event {\r\n        EventType eventType;\r\n        address pool;\r\n        address eventContract;\r\n        uint256 proposalId;\r\n        string metaHash;\r\n    }\r\n\r\n    function addContractRecord(\r\n        address addr,\r\n        ContractType contractType,\r\n        string memory description\r\n    ) external returns (uint256 index);\r\n\r\n    function addProposalRecord(\r\n        address pool,\r\n        uint256 proposalId\r\n    ) external returns (uint256 index);\r\n\r\n    function addEventRecord(\r\n        address pool,\r\n        EventType eventType,\r\n        address eventContract,\r\n        uint256 proposalId,\r\n        string calldata metaHash\r\n    ) external returns (uint256 index);\r\n\r\n    function typeOf(address addr) external view returns (ContractType);\r\n}\r\n"
    },
    "contracts/interfaces/registry/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./ICompaniesRegistry.sol\";\r\nimport \"./ITokensRegistry.sol\";\r\nimport \"./IRecordsRegistry.sol\";\r\nimport \"../IService.sol\";\r\n\r\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {\r\n    function service() external view returns (IService);\r\n\r\n    function COMPANIES_MANAGER_ROLE() external view returns (bytes32);\r\n\r\n    function hasRole(\r\n        bytes32 role,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function log(\r\n        address sender,\r\n        address receiver,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function getPoolAddressByIndex(uint256 index) external view returns (address);\r\n\r\n    function getAvailableCompanyAddress(\r\n        uint256 jurisdiction,\r\n        uint256 entityType\r\n    ) external view returns (address);\r\n}"
    },
    "contracts/interfaces/registry/ITokensRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ITokensRegistry {\n    function isTokenWhitelisted(address token) external view returns (bool);\n}\n"
    },
    "contracts/Invoice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/IInvoice.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n    /**\r\n    * @title Invoice Contract\r\n    * @notice This contract is designed for managing invoices issued by pools for payment.\r\n    * @dev It supports both trusted (payment confirmation off-chain by an authorized address) and trustless (on-chain payment) modes of operation.\r\n     *Regardless of the presence of Governance tokens in delegation or balance, and regardless of the owner/creator pool status, any address can act as an invoice payer. The following conditions must be met:\r\n    *\r\n    * - The structure Invoice.sol:invoices for the selected invoice number stores either an empty InvoiceInfo.core.whitelist[] (public invoice), or it contains the payer's address\r\n    * - The structure Invoice.sol:invoices for the selected invoice number has the values false in the fields InvoiceInfo.isPaid and InvoiceInfo.isCanceled (the invoice has not been canceled or paid by anyone yet)\r\n    * - The current network block is less than the InvoiceInfo.core.expirationBlock stored in the structure Invoice.sol:invoices for the selected invoice number\r\n    *\r\n    * When paying the invoice, the amount specified by the invoice creator is debited in the units they have chosen (ERC20 tokens or ETH).\r\n    *\r\n    *@dev _Note. All the above is valid for on-chain invoice payments. For off-chain invoice payments, a 3rd party backend solution is used to verify the payment of the specified invoice and has its mechanisms for allowing or disallowing the user to pay, including KYC. There is no such blockchain payer in this approach; the invoice is marked as paid by the address assigned the role of SERVICE_MANAGER in the Service contract._ \r\n     */\r\ncontract Invoice is Initializable, ReentrancyGuardUpgradeable, IInvoice {\r\n    using AddressUpgradeable for address payable;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    // STORAGE\r\n\r\n    /// @notice Адрес контракта Registry\r\n    IRegistry public registry;\r\n\r\n    /// @notice Последние созданные пулами инвойсы \r\n    /// @dev Маппинг, содержащий последний (максимальный) номер инвойса для каждого пула\r\n    mapping(address => uint256) public lastInvoiceIdForPool;\r\n\r\n    /// @notice Invoice data (including their state)\r\n    /// @dev Mapping that stores nested mappings of invoice structures for each pool (pool address is used as the key)\r\n    mapping(address => mapping(uint256 => InvoiceInfo)) public invoices;\r\n\r\n    /// @notice Global enumeration of invoices\r\n    /// @dev For each pool and for each invoice issued by the pool, the mapping contains global event IDs under which the invoices were registered in the Registry contract.\r\n    mapping(address => mapping(uint256 => uint256)) public eventIndex;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted on invoice creating\r\n     * @param pool Pool address\r\n     * @param invoiceId InvoiceId for Pool\r\n     */\r\n    event InvoiceCreated(address pool, uint256 invoiceId);\r\n\r\n    /**\r\n     * @dev Event emitted when invoice is canceled\r\n     * @param pool Pool address\r\n     * @param invoiceId InvoiceId for Pool\r\n     */\r\n    event InvoiceCanceled(address pool, uint256 invoiceId);\r\n\r\n    /**\r\n     * @dev Event emitted when invoice is paid\r\n     * @param pool Pool address\r\n     * @param invoiceId InvoiceId for Pool\r\n     */\r\n    event InvoicePaid(address pool, uint256 invoiceId);\r\n\r\n    // MODIFIERS\r\n    /**\r\n    * @notice Modifier that allows creating and canceling invoices for a given pool.\r\n    * @dev The logic of the modifier is described in the isValidInvoiceManager method. The modifier forwards the arguments to this method and uses its boolean output.\r\n    */\r\n    modifier onlyValidInvoiceManager(address pool) {\r\n        require(\r\n            isValidInvoiceManager(pool, msg.sender),\r\n            ExceptionsLibrary.NOT_INVOICE_MANAGER\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to allow only the service manager to call a function.\r\n    */\r\n    modifier onlyManager() {\r\n        require(\r\n            registry.service().hasRole(\r\n                registry.service().SERVICE_MANAGER_ROLE(),\r\n                msg.sender\r\n            ),\r\n            ExceptionsLibrary.INVALID_USER\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to check if the pool is not paused.\r\n    */\r\n    modifier whenPoolNotPaused(address pool) {\r\n        require(!IPausable(pool).paused(), ExceptionsLibrary.POOL_PAUSED);\r\n        \r\n        _;\r\n    }\r\n\r\n    /**\r\n    *@notice Modifier that allows manipulation with an existing invoice only if it has the \"Active\" status.\r\n    */\r\n    modifier onlyActive(address pool, uint256 invoiceId) {\r\n        require(\r\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n    * @notice Contract initializer\r\n    * @dev This method replaces the constructor for upgradeable contracts. It also sets the registry contract address in the contract's storage.\r\n    * @param registry_ Protocol registry address\r\n    */\r\n    function initialize(IRegistry registry_) external initializer {\r\n        registry = registry_;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n    * @notice On-chain payment of an invoice (trustless scenario)\r\n    * @dev In addition to the specified modifiers, there is also a check for the payer's wallet to be included in the whitelist of invoice payers.\r\n    * @dev To allow the invoice to be paid by any wallet, the whitelist field should be left empty when creating the invoice.\r\n    * @dev After successful payment, the invoice receives an irreversible \"Paid\" status.\r\n    * @param pool Address of the pool contract that issued the invoice\r\n    * @param invoiceId Identifier of the invoice being paid\r\n    */\r\n    function payInvoice(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external payable nonReentrant whenPoolNotPaused(pool) {\r\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\r\n\r\n        require(\r\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n\r\n        //check if payer is whitelisted\r\n        if (invoice.core.whitelist.length > 0) {\r\n            bool isWhitelisted = false;\r\n            for (uint256 i = 0; i < invoice.core.whitelist.length; i++) {\r\n                if (invoice.core.whitelist[i] == msg.sender)\r\n                    isWhitelisted = true;\r\n            }\r\n            require(isWhitelisted, ExceptionsLibrary.NOT_WHITELISTED);\r\n        }\r\n\r\n        //if unitOfAccount is ETH\r\n        if (invoice.core.unitOfAccount == address(0)) {\r\n            require(\r\n                msg.value == invoice.core.amount,\r\n                ExceptionsLibrary.WRONG_AMOUNT\r\n            );\r\n\r\n            (bool success, ) = payable(pool).call{value: invoice.core.amount}(\r\n                \"\"\r\n            );\r\n            require(success, ExceptionsLibrary.WRONG_AMOUNT);\r\n        } else {\r\n            IERC20Upgradeable(invoice.core.unitOfAccount).safeTransferFrom(\r\n                msg.sender,\r\n                pool,\r\n                invoice.core.amount\r\n            );\r\n        }\r\n\r\n        _setInvoicePaid(pool, invoiceId);\r\n    }\r\n\r\n    /**\r\n    * @notice Create an invoice by a specified pool\r\n    * @dev The onlyValidInvoiceManager modifier determines which accounts can create an invoice for the specified pool.\r\n    * @dev After creation, the invoice receives an \"Active\" status.\r\n    * @param pool Address of the pool contract that issues the invoice\r\n    * @param core Invoice payment data (described in the interface)\r\n    */\r\n    function createInvoice(\r\n        address pool,\r\n        InvoiceCore memory core\r\n    ) external onlyValidInvoiceManager(pool) {\r\n        //check if pool registry record exists\r\n        require(\r\n            registry.typeOf(pool) == IRecordsRegistry.ContractType.Pool,\r\n            ExceptionsLibrary.NOT_POOL\r\n        );\r\n\r\n        //validation\r\n        validateInvoiceCore(core);\r\n\r\n        InvoiceInfo memory info;\r\n        info.createdBy = msg.sender;\r\n        info.core = core;\r\n        \r\n\r\n        //set invoiceId\r\n        uint256 invoiceId = lastInvoiceIdForPool[pool];\r\n        info.invoiceId = invoiceId;\r\n\r\n        //add invoice\r\n        invoices[pool][invoiceId] = info;\r\n        lastInvoiceIdForPool[pool]++;\r\n\r\n        uint256 index = registry.service().addInvoiceEvent(pool, invoiceId);\r\n        eventIndex[pool][invoiceId] = index;\r\n\r\n        emit InvoiceCreated(pool, invoiceId);\r\n\r\n        registry.log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IInvoice.createInvoice.selector, pool, core)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Cancel an invoice\r\n    * @dev To cancel an invoice, the request must pass the onlyValidInvoiceManager modifier, which regulates who can manipulate the pool's invoices on behalf of the pool.\r\n    * @dev After cancellation, the invoice receives an irreversible \"Canceled\" status.\r\n    * @param pool Address of the pool contract that issued the invoice\r\n    * @param invoiceId Invoice identifier\r\n    */\r\n    function cancelInvoice(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external onlyValidInvoiceManager(pool) {\r\n        _setInvoiceCanceled(pool, invoiceId);\r\n\r\n        registry.log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IInvoice.cancelInvoice.selector,\r\n                pool,\r\n                invoiceId\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Off-chain payment of an invoice (trusted scenario)\r\n    * @dev Addresses that have the \"SERVICE_MANAGER\" role in the Service contract can change the status of any active invoice of any pool to \"Paid\", indicating a successful payment of the invoice through an off-chain payment method.\r\n    * @dev After successful payment, the invoice receives an irreversible \"Paid\" status.\r\n    * @param pool Address of the pool contract that issued the invoice\r\n    * @param invoiceId Invoice identifier\r\n    */\r\n    function setInvoicePaid(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external onlyManager {\r\n        _setInvoicePaid(pool, invoiceId);\r\n    }\r\n\r\n    /**\r\n    * @notice Canceling an invoice by the manager\r\n    * @dev Addresses that have the \"SERVICE_MANAGER\" role in the Service contract can cancel any active invoice of any pool.\r\n    * @dev After cancellation, the invoice receives an irreversible \"Canceled\" status.\r\n    * @param pool Address of the pool contract that issued the invoice\r\n    * @param invoiceId Invoice identifier\r\n    */\r\n    function setInvoiceCanceled(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external onlyManager {\r\n        _setInvoiceCanceled(pool, invoiceId);\r\n\r\n        registry.log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IInvoice.setInvoiceCanceled.selector,\r\n                pool,\r\n                invoiceId\r\n            )\r\n        );\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n    * @notice This method checks the validity of invoice data during its creation\r\n    * @dev An invoice is considered valid if it meets the following criteria:\r\n    - Non-zero payment amount (in any token, including the native network coin)\r\n    - The expiration block has not yet been reached\r\n    - The specified token for payment is a valid ERC20 contract\r\n    * @param core Invoice data represented by the structure described in the InvoiceCore interface\r\n    * @return True if the parameters are valid (reverts otherwise)\r\n    */\r\n    function validateInvoiceCore(\r\n        InvoiceCore memory core\r\n    ) public view returns (bool) {\r\n        require(core.amount > 0, ExceptionsLibrary.WRONG_AMOUNT);\r\n\r\n        require(\r\n            core.expirationBlock > block.number,\r\n            ExceptionsLibrary.WRONG_BLOCK_NUMBER\r\n        );\r\n\r\n        require(\r\n            core.unitOfAccount == address(0) ||\r\n                IERC20Upgradeable(core.unitOfAccount).totalSupply() > 0,\r\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\r\n        );\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev This method returns the state of an invoice\r\n    * @param pool The address of the pool contract that issued the invoice\r\n    * @param invoiceId The identifier of the invoice\r\n    */\r\n    function invoiceState(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) public view returns (InvoiceState) {\r\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\r\n\r\n        if (invoice.isPaid) return InvoiceState.Paid;\r\n\r\n        if (invoice.isCanceled) return InvoiceState.Canceled;\r\n\r\n        if (invoice.core.expirationBlock < block.number)\r\n            return InvoiceState.Expired;\r\n\r\n        return InvoiceState.Active;\r\n    }\r\n\r\n    /**\r\n\r\n    * @notice This method checks the account's authority to manipulate pool invoices\r\n    * @dev In order to create and cancel pool invoices, the account address must:\r\n    - be listed in the pool's secretaries OR\r\n    - have the \"SERVICE_MANAGER\" role in the Service contract OR\r\n    - be the owner of the pool if the pool has not yet obtained DAO status\r\n    *@param pool The address of the pool contract\r\n    *@param account The account address\r\n    */\r\n    function isValidInvoiceManager(\r\n        address pool,\r\n        address account\r\n    ) public view returns (bool) {\r\n        if (!IPool(pool).isDAO() && account == IPool(pool).owner()) return true;\r\n        \r\n        if (\r\n            registry.service().hasRole(\r\n                registry.service().SERVICE_MANAGER_ROLE(),\r\n                account\r\n            ) ||\r\n            IPool(pool).isValidProposer(account)\r\n            \r\n        ) return true;\r\n        \r\n        return false;\r\n    }\r\n\r\n    //PRIVATE\r\n\r\n    /// @dev Implementation of the function that changes the status of an active invoice to \"Paid\"\r\n    function _setInvoicePaid(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) private onlyActive(pool, invoiceId) {\r\n        invoices[pool][invoiceId].isPaid = true;\r\n        emit InvoicePaid(pool, invoiceId);\r\n    }\r\n\r\n    /// @dev Implementation of the function that cancels an active invoice and sets its status to \"Canceled\"\r\n    function _setInvoiceCanceled(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) private onlyActive(pool, invoiceId) {\r\n        invoices[pool][invoiceId].isCanceled = true;\r\n        emit InvoiceCanceled(pool, invoiceId);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/ExceptionsLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary ExceptionsLibrary {\r\n    string public constant ADDRESS_ZERO = \"ADDRESS_ZERO\";\r\n    string public constant INCORRECT_ETH_PASSED = \"INCORRECT_ETH_PASSED\";\r\n    string public constant NO_COMPANY = \"NO_COMPANY\";\r\n    string public constant INVALID_TOKEN = \"INVALID_TOKEN\";\r\n    string public constant NOT_POOL = \"NOT_POOL\";\r\n    string public constant NOT_TGE = \"NOT_TGE\";\r\n    string public constant NOT_Registry = \"NOT_Registry\";\r\n    string public constant NOT_POOL_OWNER = \"NOT_POOL_OWNER\";\r\n    string public constant NOT_SERVICE_OWNER = \"NOT_SERVICE_OWNER\";\r\n    string public constant IS_DAO = \"IS_DAO\";\r\n    string public constant NOT_DAO = \"NOT_DAO\";\r\n    string public constant NOT_WHITELISTED = \"NOT_WHITELISTED\";\r\n    string public constant NOT_SERVICE = \"NOT_SERVICE\";\r\n    string public constant WRONG_STATE = \"WRONG_STATE\";\r\n    string public constant TRANSFER_FAILED = \"TRANSFER_FAILED\";\r\n    string public constant CLAIM_NOT_AVAILABLE = \"CLAIM_NOT_AVAILABLE\";\r\n    string public constant NO_LOCKED_BALANCE = \"NO_LOCKED_BALANCE\";\r\n    string public constant LOCKUP_TVL_REACHED = \"LOCKUP_TVL_REACHED\";\r\n    string public constant HARDCAP_OVERFLOW = \"HARDCAP_OVERFLOW\";\r\n    string public constant MAX_PURCHASE_OVERFLOW = \"MAX_PURCHASE_OVERFLOW\";\r\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\r\n        \"HARDCAP_OVERFLOW_REMAINING_SUPPLY\";\r\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\r\n        \"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\";\r\n    string public constant MIN_PURCHASE_UNDERFLOW = \"MIN_PURCHASE_UNDERFLOW\";\r\n    string public constant LOW_UNLOCKED_BALANCE = \"LOW_UNLOCKED_BALANCE\";\r\n    string public constant ZERO_PURCHASE_AMOUNT = \"ZERO_PURCHASE_AMOUNTs\";\r\n    string public constant NOTHING_TO_REDEEM = \"NOTHING_TO_REDEEM\";\r\n    string public constant RECORD_IN_USE = \"RECORD_IN_USE\";\r\n    string public constant INVALID_EIN = \"INVALID_EIN\";\r\n    string public constant VALUE_ZERO = \"VALUE_ZERO\";\r\n    string public constant ALREADY_SET = \"ALREADY_SET\";\r\n    string public constant VOTING_FINISHED = \"VOTING_FINISHED\";\r\n    string public constant ALREADY_EXECUTED = \"ALREADY_EXECUTED\";\r\n    string public constant ACTIVE_TGE_EXISTS = \"ACTIVE_TGE_EXISTS\";\r\n    string public constant INVALID_VALUE = \"INVALID_VALUE\";\r\n    string public constant INVALID_CAP = \"INVALID_CAP\";\r\n    string public constant INVALID_HARDCAP = \"INVALID_HARDCAP\";\r\n    string public constant ONLY_POOL = \"ONLY_POOL\";\r\n    string public constant ETH_TRANSFER_FAIL = \"ETH_TRANSFER_FAIL\";\r\n    string public constant TOKEN_TRANSFER_FAIL = \"TOKEN_TRANSFER_FAIL\";\r\n    string public constant SERVICE_PAUSED = \"SERVICE_PAUSED\";\r\n    string public constant INVALID_PROPOSAL_TYPE = \"INVALID_PROPOSAL_TYPE\";\r\n    string public constant EXECUTION_FAILED = \"EXECUTION_FAILED\";\r\n    string public constant INVALID_USER = \"INVALID_USER\";\r\n    string public constant NOT_LAUNCHED = \"NOT_LAUNCHED\";\r\n    string public constant LAUNCHED = \"LAUNCHED\";\r\n    string public constant VESTING_TVL_REACHED = \"VESTING_TVL_REACHED\";\r\n    string public constant WRONG_TOKEN_ADDRESS = \"WRONG_TOKEN_ADDRESS\";\r\n    string public constant GOVERNANCE_TOKEN_EXISTS = \"GOVERNANCE_TOKEN_EXISTS\";\r\n    string public constant THRESHOLD_NOT_REACHED = \"THRESHOLD_NOT_REACHED\";\r\n    string public constant UNSUPPORTED_TOKEN_TYPE = \"UNSUPPORTED_TOKEN_TYPE\";\r\n    string public constant ALREADY_VOTED = \"ALREADY_VOTED\";\r\n    string public constant ZERO_VOTES = \"ZERO_VOTES\";\r\n    string public constant ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS =\r\n        \"ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\";\r\n    string public constant EMPTY_ADDRESS = \"EMPTY_ADDRESS\";\r\n    string public constant NOT_VALID_PROPOSER = \"NOT_VALID_PROPOSER\";\r\n    string public constant SHARES_SUM_EXCEEDS_ONE = \"SHARES_SUM_EXCEEDS_ONE\";\r\n    string public constant NOT_RESOLVER = \"NOT_RESOLVER\";\r\n    string public constant NOT_REGISTRY = \"NOT_REGISTRY\";\r\n    string public constant INVALID_TARGET = \"INVALID_TARGET\";\r\n    string public constant NOT_TGE_FACTORY = \"NOT_TGE_FACTORY\";\r\n    string public constant WRONG_AMOUNT = \"WRONG_AMOUNT\";\r\n    string public constant WRONG_BLOCK_NUMBER = \"WRONG_BLOCK_NUMBER\";\r\n    string public constant NOT_VALID_EXECUTOR = \"NOT_VALID_EXECUTOR\";\r\n    string public constant POOL_PAUSED = \"POOL_PAUSED\";\r\n    string public constant NOT_INVOICE_MANAGER = \"NOT_INVOICE_MANAGER\";\r\n    string public constant WRONG_RESOLVER = \"WRONG_RESOLVER\";\r\n    string public constant INVALID_PURCHASE_AMOUNT = \"INVALID_PURCHASE_AMOUNT\";\r\n}\r\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\r\nimport \"./governor/GovernorProposals.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/ICustomProposal.sol\";\r\nimport \"./interfaces/registry/IRecordsRegistry.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\n/**\r\n    * @title Pool Contract\r\n    * @notice These contracts are instances of on-chain implementations of user companies. The shareholders of the companies work with them, their addresses are used in the Registry contract as tags that allow obtaining additional legal information (before the purchase of the company by the client). They store legal data (after the purchase of the company by the client). Among other things, the contract is also the owner of the Token and TGE contracts.\r\n    * @dev There can be an unlimited number of such contracts, including for one company owner. The contract can be in three states:\r\n    * 1) the company was created by the administrator, a record of it is stored in the Registry, but the contract has not yet been deployed and does not have an owner (buyer) \r\n    * 2) the contract is deployed, the company has an owner, but there is not yet a successful (softcap primary TGE), in this state its owner has the exclusive right to recreate the TGE in case of their failure (only one TGE can be launched at the same time) \r\n    * 3) the primary TGE ended successfully, softcap is assembled - the company has received the status of DAO.    The owner no longer has any exclusive rights, all the actions of the company are carried out through the creation and execution of propousals after voting. In this status, the contract is also a treasury - it stores the company's values in the form of ETH and/or ERC20 tokens.\r\n    * @dev The \"Pool owner\" status is temporary and is assigned to the address that has successfully purchased a company and in which there has not been a single successful TGE Governance Token. The current owner's address of the company can be obtained by referring to the owner method of the Pool contract. If the isDAO method of the same contract returns \"true\", then this status does not grant any privileges or exclusive rights and has more of a historical and reference nature.\r\n    As long as the pool is not considered a DAO, the address which is having this status can interact with such methods:\r\n    - TGEFactory.sol:createPrimaryTGE(address poolAddress, IToken.TokenInfo memory tokenInfo, ITGE.TGEInfo memory tgeInfo, string memory metadataURI, IGovernanceSettings.NewGovernanceSettings memory governanceSettings_, address[] memory addSecretary, address[] memory addExecutor) - this method allows you to create a Governance Token compatible with ERC20, with a full set of standard settings, launch a primary TGE for it by deploying the corresponding contract, and also fully configure Governance using the NewGovernanceSettings structure and arrays of addSecretary and addExecutor addresses. The rules set for Governance will become relevant immediately after the successful completion of this primary TGE.\r\n    - Pool.sol:transferByOwner(address to, uint256 amount, address unitOfAccount) - this method allows you to withdraw ETH or any ERC20 token from the pool contract to any address specified by the owner\r\n    Moreover, while in this status, the pool owner, who has not yet become a DAO, can create invoices without restrictions using the Invoice:createInvoice(address pool, InvoiceCore memory core) method.\r\n    In case of a primary TGE failure, the company owner continues to use their unique status, which means they can recreate the token, TGE, and set new Governance settings within a single transaction.\r\n    */\r\ncontract Pool is\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    PausableUpgradeable,\r\n    GovernorProposals,\r\n    IPool\r\n{\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using AddressUpgradeable for address payable;\r\n    /// @dev The company's trade mark, label, brand name. It also acts as the Name of all the Governance tokens created for this pool.\r\n    string public trademark;\r\n\r\n    /// @dev When a buyer acquires a company, its record disappears from the Registry contract, but before that, the company's legal data is copied to this variable.\r\n    ICompaniesRegistry.CompanyInfo public companyInfo;\r\n\r\n    /// @dev Mapping for Governance Token. There can be only one valid Governance token.\r\n    mapping(IToken.TokenType => address) public tokens;\r\n\r\n    /// @dev last proposal id for address. This method returns the proposal Id for the last proposal created by the specified address.\r\n    mapping(address => uint256) public lastProposalIdForAddress;\r\n\r\n    /// @dev Mapping that stores the blocks of proposal creation for this pool. The main information about the proposal is stored in variables provided by the Governor.sol contract, which is inherited by this contract.\r\n    mapping(uint256 => uint256) public proposalCreatedAt;\r\n\r\n    /// @dev A list of tokens belonging to this pool. There can be only one valid Governance token and several Preference tokens with different settings. The mapping key is the token type (token type encoding is specified in the IToken.sol interface). The value is an array of token identifiers.\r\n    mapping(IToken.TokenType => address[]) public tokensFullList;\r\n\r\n    /// @dev Mapping that stores information about the type of each token. The mapping key is the address of the token contract, and the value is the digital code of the token type.\r\n    mapping(address => IToken.TokenType) public tokenTypeByAddress;\r\n\r\n    /**\r\n     * @notice This collection of addresses is part of the simplified role model of the pool and stores the addresses of accounts that have been assigned the role of pool secretary.\r\n     * @dev Pool secretary is an internal pool role with responsibilities that include working with invoices and creating proposals. This role serves to give authority, similar to a shareholder, to an account that does not have Governance Tokens (e.g., a hired employee).\r\n     */\r\n    EnumerableSetUpgradeable.AddressSet poolSecretary;\r\n\r\n    /// @dev Identifier of the last executed proposal\r\n    uint256 public lastExecutedProposalId;\r\n\r\n    /// @dev Mapping that stores the addresses of TGE contracts that have been deployed as part of proposal execution, using the identifiers of those proposals as keys.\r\n    mapping(uint256 => address) public proposalIdToTGE;\r\n\r\n    /**\r\n     * @notice This collection of addresses is part of the simplified role model of the pool and stores the addresses of accounts that have been assigned the role of pool executor.\r\n     * @dev Pool Executor is an internal pool role with responsibilities that include executing proposals that have ended with a \"for\" decision in voting and have completed their time in the delayed state.\r\n     */\r\n    EnumerableSetUpgradeable.AddressSet poolExecutor;\r\n\r\n    /// @dev Operating Agreement Url\r\n    string public OAurl;\r\n\r\n\r\n    // EVENTS\r\n\r\n    // MODIFIER\r\n\r\n    /// @notice Modifier that allows the method to be called only by the Service contract.\r\n    /// @dev It is used to transfer control of the Registry and deployable user contracts for the final configuration of the company.\r\n    modifier onlyService() {\r\n        require(msg.sender == address(service), ExceptionsLibrary.NOT_SERVICE);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGEFactory contract.\r\n    /// @dev Used during TGE creation, where the TGEFactory contract deploys contracts and informs their addresses to the pool contract for storage.\r\n    modifier onlyTGEFactory() {\r\n        require(\r\n            msg.sender == address(service.tgeFactory()),\r\n            ExceptionsLibrary.NOT_TGE_FACTORY\r\n        );\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER AND CONFIGURATOR\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization of a new pool and placement of user settings and data (including legal ones) in it\r\n     * @param companyInfo_ Legal company data\r\n     */\r\n    function initialize(\r\n        ICompaniesRegistry.CompanyInfo memory companyInfo_\r\n    ) external initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        __Pausable_init();\r\n        service = IService(msg.sender);\r\n        companyInfo = companyInfo_;\r\n    }\r\n\r\n    /**\r\n    * @notice Actions after purchasing a pool (including ownership transfer and governance settings)\r\n    * @dev This is executed only during a successful execution of purchasePool in the Service contract. The address that is mentioned in the 'newowner' field of the transaction calldata becomes the pool owner.\r\n    * @dev An internal pool role, relevant from the moment of purchasing a company until the first successful TGE. The sole and unchangeable wallet possessing this role is the account that paid the fee for creating the company. Once the pool becomes a DAO, this role no longer has any exclusive powers.\r\n\r\n    The appointment of the Owner's address is done within the call to Pool.sol:setNewOwnerWithSettings(address newowner, string memory trademark_, NewGovernanceSettings memory governanceSettings_), which occurs when a new owner purchases the company.\r\n    * @param newowner Address of the new contract owner account\r\n    * @param trademark_ Company trademark\r\n    * @param governanceSettings_ Governance settings (voting rules, etc.)\r\n    */\r\n    function setNewOwnerWithSettings(\r\n        address newowner,\r\n        string memory trademark_,\r\n        NewGovernanceSettings memory governanceSettings_\r\n    ) external onlyService {\r\n        require(\r\n            bytes(trademark).length == 0,\r\n            ExceptionsLibrary.ALREADY_SET\r\n        );\r\n        _transferOwnership(address(newowner));\r\n        trademark = trademark_;\r\n        _setGovernanceSettings(governanceSettings_);\r\n    }\r\n\r\n    /**\r\n     * @notice Changing the governance settings of the pool as a result of voting or the owner's initial pool setup\r\n     * @dev This method can be called in one of two cases:\r\n     * - The pool has attained DAO status, and a proposal including a transaction calling this method has been executed\r\n     * - The pool has not yet attained DAO status, and the pool owner initiates the initial TGE with new governance settings as arguments\r\n     * @param governanceSettings_ Governance settings\r\n     * @param secretary List of secretary addresses\r\n     * @param executor List of executor addresses\r\n     */\r\n    function setSettings(\r\n        NewGovernanceSettings memory governanceSettings_,\r\n        address[] memory secretary,\r\n        address[] memory executor\r\n    ) external {\r\n        //only tgeFactory or pool\r\n        require(\r\n            msg.sender == address(service.tgeFactory()) ||\r\n                msg.sender == address(this),\r\n            ExceptionsLibrary.NOT_TGE_FACTORY\r\n        );\r\n        if (msg.sender == address(service.tgeFactory())) {\r\n            if (address(getGovernanceToken()) != address(0)) {\r\n                require(!isDAO(), ExceptionsLibrary.IS_DAO);\r\n                require(\r\n                    ITGE(getGovernanceToken().lastTGE()).state() !=\r\n                        ITGE.State.Active,\r\n                    ExceptionsLibrary.ACTIVE_TGE_EXISTS\r\n                );\r\n            }\r\n        }\r\n        _setGovernanceSettings(governanceSettings_);\r\n\r\n        address[] memory values = poolSecretary.values();\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            poolSecretary.remove(values[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < secretary.length; i++) {\r\n            poolSecretary.add(secretary[i]);\r\n        }\r\n\r\n        values = poolExecutor.values();\r\n        for (uint256 i = 0; i < values.length; i++) {\r\n            poolExecutor.remove(values[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < executor.length; i++) {\r\n            poolExecutor.add(secretary[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Setting legal data for the corresponding company pool\r\n     * @dev This method is executed as part of the internal transaction in the setCompanyInfoForPool method of the Registry contract\r\n     * @param _jurisdiction Digital code of the jurisdiction\r\n     * @param _entityType Digital code of the organization type\r\n     * @param _ein Government registration number of the company\r\n     * @param _dateOfIncorporation Date of incorporation of the company\r\n     * @param _OAuri Operating Agreement URL\r\n     */\r\n    function setCompanyInfo(\r\n        uint256 _fee,\r\n        uint256 _jurisdiction,\r\n        uint256 _entityType,\r\n        string memory _ein,\r\n        string memory _dateOfIncorporation,\r\n        string memory _OAuri\r\n    ) external {\r\n        require(\r\n            msg.sender == address(service.registry()),\r\n            ExceptionsLibrary.NOT_REGISTRY\r\n        );\r\n        companyInfo.jurisdiction = _jurisdiction;\r\n        companyInfo.entityType = _entityType;\r\n        companyInfo.ein = _ein;\r\n        companyInfo.fee = _fee;\r\n        companyInfo.dateOfIncorporation = _dateOfIncorporation;\r\n        OAurl = _OAuri;\r\n    }\r\n\r\n    // RECEIVE\r\n    /// @dev Method for receiving an Ethereum contract that issues an event.\r\n    receive() external payable {}\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @notice Method for voting \"for\" or \"against\" a given proposal\r\n     * @dev This method calls the _castVote function defined in the Governor.sol contract.\r\n     * @dev Since proposals in the CompanyDAO protocol can be prematurely finalized, after each successful invocation of this method, a check is performed for the occurrence of such conditions.\r\n     * @param proposalId Pool proposal ID\r\n     * @param support \"True\" for voting \"for\", \"False\" for voting \"against\"\r\n     */\r\n    function castVote(\r\n        uint256 proposalId,\r\n        bool support\r\n    ) external nonReentrant whenNotPaused {\r\n        _castVote(proposalId, support);\r\n\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IPool.castVote.selector, proposalId, support)\r\n        );\r\n    }\r\n\r\n    // RESTRICTED PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @dev Adding a new entry about the deployed token contract to the list of tokens related to the pool.\r\n     * @param token_ Token address\r\n     * @param tokenType_ Token type\r\n     */\r\n    function setToken(\r\n        address token_,\r\n        IToken.TokenType tokenType_\r\n    ) external onlyTGEFactory {\r\n        require(token_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n        if (tokenExists(IToken(token_))) return;\r\n        if (tokenType_ == IToken.TokenType.Governance) {\r\n            // Check that there is no governance tokens or tge failed\r\n            require(\r\n                address(getGovernanceToken()) == address(0) ||\r\n                    ITGE(getGovernanceToken().getTGEList()[0]).state() ==\r\n                    ITGE.State.Failed,\r\n                ExceptionsLibrary.GOVERNANCE_TOKEN_EXISTS\r\n            );\r\n            tokens[IToken.TokenType.Governance] = token_;\r\n            if (tokensFullList[tokenType_].length > 0) {\r\n                tokensFullList[tokenType_].pop();\r\n            }\r\n        }\r\n        tokensFullList[tokenType_].push(token_);\r\n        tokenTypeByAddress[address(token_)] = tokenType_;\r\n    }\r\n\r\n    /**\r\n     * @dev This method adds a record to the proposalIdToTGE mapping indicating that a TGE contract with the specified address was deployed as a result of executing the proposal with the lastExecutedProposalId identifier.\r\n     * @param tge TGE address\r\n     */\r\n    function setProposalIdToTGE(address tge) external onlyTGEFactory {\r\n        proposalIdToTGE[lastExecutedProposalId] = tge;\r\n    }\r\n\r\n    /**\r\n    * @notice This method is used to initiate the execution of a proposal.\r\n    * @dev For this method to work, the following conditions must be met:\r\n    - The transaction sender must be a valid executor (more details in the isValidExecutor function)\r\n    - The proposal must have the \"Awaiting Execution\" status.\r\n    * @param proposalId Proposal ID\r\n    */\r\n    function executeProposal(uint256 proposalId) external whenNotPaused {\r\n        require(\r\n            isValidExecutor(msg.sender),\r\n            ExceptionsLibrary.NOT_VALID_EXECUTOR\r\n        );\r\n\r\n        lastExecutedProposalId = proposalId;\r\n        _executeProposal(proposalId, service);\r\n\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IPool.executeProposal.selector, proposalId)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Method for emergency cancellation of a proposal.\r\n     * @dev Cancel a proposal, callable only by the Service contract.\r\n     * @param proposalId Proposal ID\r\n     */\r\n    function cancelProposal(uint256 proposalId) external onlyService {\r\n        _cancelProposal(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Creating a proposal and assigning it a unique identifier to store in the list of proposals in the Governor contract.\r\n     * @param core Proposal core data\r\n     * @param meta Proposal meta data\r\n     */\r\n    function propose(\r\n        address proposer,\r\n        uint256 proposeType,\r\n        IGovernor.ProposalCoreData memory core,\r\n        IGovernor.ProposalMetaData memory meta\r\n    ) external returns (uint256 proposalId) {\r\n        require(\r\n            msg.sender == address(service.customProposal()) &&\r\n                isValidProposer(proposer),\r\n            ExceptionsLibrary.NOT_VALID_PROPOSER\r\n        );\r\n\r\n        core.quorumThreshold = quorumThreshold;\r\n        core.decisionThreshold = decisionThreshold;\r\n        core.executionDelay = executionDelays[meta.proposalType];\r\n        uint256 proposalId_ = _propose(\r\n            core,\r\n            meta,\r\n            votingDuration,\r\n            votingStartDelay\r\n        );\r\n        lastProposalIdByType[proposeType] = proposalId_;\r\n\r\n        _setLastProposalIdForAddress(proposer, proposalId_);\r\n\r\n        service.registry().log(\r\n            proposer,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IPool.propose.selector,\r\n                proposer,\r\n                proposeType,\r\n                core,\r\n                meta\r\n            )\r\n        );\r\n\r\n        return proposalId_;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers funds from the pool's account to a specified address.\r\n     * @dev This method can only be called by the pool owner and only during the period before the pool becomes a DAO.\r\n     * @param to The recipient's address\r\n     * @param amount The transfer amount\r\n     * @param unitOfAccount The unit of account (token contract address or address(0) for ETH)\r\n     */\r\n    function transferByOwner(\r\n        address to,\r\n        uint256 amount,\r\n        address unitOfAccount\r\n    ) external onlyOwner {\r\n        //only if pool is yet DAO\r\n        require(!isDAO(), ExceptionsLibrary.IS_DAO);\r\n\r\n        if (unitOfAccount == address(0)) {\r\n            require(\r\n                address(this).balance >= amount,\r\n                ExceptionsLibrary.WRONG_AMOUNT\r\n            );\r\n\r\n            (bool success, ) = payable(to).call{value: amount}(\"\");\r\n            require(success, ExceptionsLibrary.WRONG_AMOUNT);\r\n        } else {\r\n            require(\r\n                IERC20Upgradeable(unitOfAccount).balanceOf(address(this)) >=\r\n                    amount,\r\n                ExceptionsLibrary.WRONG_AMOUNT\r\n            );\r\n\r\n            IERC20Upgradeable(unitOfAccount).safeTransferFrom(\r\n                msg.sender,\r\n                to,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev Checks if the pool has achieved DAO status.\r\n     * A pool achieves DAO status if it has a valid governance token and the primary TGE was successful.\r\n     * @return isDao True if the pool is a DAO, false otherwise.\r\n     */\r\n    function isDAO() public view returns (bool) {\r\n        if (address(getGovernanceToken()) == address(0)) {\r\n            return false;\r\n        } else {\r\n            return getGovernanceToken().isPrimaryTGESuccessful();\r\n        }\r\n    }\r\n\r\n    function getCompanyFee() public view returns (uint256) {\r\n        return companyInfo.fee;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the pool.\r\n     * @return The address of the pool owner.\r\n     */\r\n    function owner()\r\n        public\r\n        view\r\n        override(IPool, OwnableUpgradeable)\r\n        returns (address)\r\n    {\r\n        return super.owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the list of tokens associated with the pool based on the token type.\r\n     * @param tokenType The type of tokens to retrieve.\r\n     * @return The array of token addresses.\r\n     */\r\n    function getTokens(\r\n        IToken.TokenType tokenType\r\n    ) external view returns (address[] memory) {\r\n        return tokensFullList[tokenType];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the governance token associated with the pool.\r\n     * @return The governance token address.\r\n     */\r\n    function getGovernanceToken() public view returns (IToken) {\r\n        return IToken(tokens[IToken.TokenType.Governance]);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a token exists in the pool.\r\n     * @param token The token to check.\r\n     * @return True if the token exists, false otherwise.\r\n     */\r\n    function tokenExists(IToken token) public view returns (bool) {\r\n        return\r\n            tokenTypeByAddress[address(token)] == IToken.TokenType.None\r\n                ? false\r\n                : true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the list of pool secretaries.\r\n     * @return The array of pool secretary addresses.\r\n     */\r\n    function getPoolSecretary() external view returns (address[] memory) {\r\n        return isDAO() ? poolSecretary.values() : new address[](0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the list of pool executors.\r\n     * @return The array of pool executor addresses.\r\n     */\r\n    function getPoolExecutor() external view returns (address[] memory) {\r\n        return isDAO() ? poolExecutor.values() : new address[](0);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is a pool secretary.\r\n     * @param account The address to check.\r\n     * @return True if the address is a pool secretary, false otherwise.\r\n     */\r\n    function isPoolSecretary(address account) public view returns (bool) {\r\n        return isDAO() ? poolSecretary.contains(account) : false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is a pool executor.\r\n     * @param account The address to check.\r\n     * @return True if the address is a pool executor, false otherwise.\r\n     */\r\n    function isPoolExecutor(address account) public view returns (bool) {\r\n        return isDAO() ? poolExecutor.contains(account) : false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is a valid proposer for creating proposals.\r\n     * @param account The address to check.\r\n     * @return True if the address is a valid proposer, false otherwise.\r\n     */\r\n    function isValidProposer(address account) public view returns (bool) {\r\n        uint256 currentVotes = _getCurrentVotes(account);\r\n        bool isValid = currentVotes > 0 &&\r\n            (currentVotes > proposalThreshold ||\r\n                isPoolSecretary(account) ||\r\n                service.hasRole(service.SERVICE_MANAGER_ROLE(), msg.sender));\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is a valid executor for executing ballot proposals.\r\n     * @param account The address to check.\r\n     * @return True if the address is a valid executor, false otherwise.\r\n     */\r\n    function isValidExecutor(address account) public view returns (bool) {\r\n        if (\r\n            poolExecutor.length() == 0 ||\r\n            isPoolExecutor(account) ||\r\n            service.hasRole(service.SERVICE_MANAGER_ROLE(), account)\r\n        ) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the last proposal of a specific type is active.\r\n     * @param type_ The type of proposal.\r\n     * @return True if the last proposal of the given type is active, false otherwise.\r\n     */\r\n    function isLastProposalIdByTypeActive(\r\n        uint256 type_\r\n    ) public view returns (bool) {\r\n        if (proposalState(lastProposalIdByType[type_]) == ProposalState.Active)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Validates the governance settings for creating proposals.\r\n     * @param settings The governance settings to validate.\r\n     */\r\n    function validateGovernanceSettings(\r\n        NewGovernanceSettings memory settings\r\n    ) external pure {\r\n        _validateGovernanceSettings(settings);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the available votes for a proposal at the current block.\r\n     * @param proposalId The ID of the proposal.\r\n     * @return The available votes for the proposal.\r\n     */\r\n    function availableVotesForProposal(\r\n        uint256 proposalId\r\n    ) external view returns (uint256) {\r\n        if (proposals[proposalId].vote.startBlock - 1 < block.number)\r\n            return\r\n                _getBlockTotalVotes(proposals[proposalId].vote.startBlock - 1);\r\n        else return _getBlockTotalVotes(block.number - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Return pool paused status\r\n     * @return Is pool paused\r\n     */\r\n    function paused() public view override returns (bool) {\r\n        // Pausable\r\n        return super.paused();\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @dev Internal function to be called after a proposal is created.\r\n     * @param proposalId The ID of the created proposal.\r\n     */\r\n    function _afterProposalCreated(uint256 proposalId) internal override {\r\n        service.addProposal(proposalId);\r\n    }\r\n\r\n  /**\r\n     * @dev Internal function to get the current votes of an account.\r\n     * @param account The account's address.\r\n     * @return The current votes of the account.\r\n     */\r\n    function _getCurrentVotes(address account) internal view returns (uint256) {\r\n        return getGovernanceToken().getVotes(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to get the total votes in the pool at a specific block.\r\n     * @param blocknumber The block number.\r\n     * @return The total votes at the given block.\r\n     */\r\n    function _getBlockTotalVotes(\r\n        uint256 blocknumber\r\n    ) internal view override returns (uint256) {\r\n        return\r\n            IToken(tokens[IToken.TokenType.Governance]).getPastTotalSupply(\r\n                blocknumber\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to get the past votes of an account at a specific block.\r\n     * @param account The account's address.\r\n     * @param blockNumber The block number.\r\n     * @return The past votes of the account at the given block.\r\n     */\r\n    function _getPastVotes(\r\n        address account,\r\n        uint256 blockNumber\r\n    ) internal view override returns (uint256) {\r\n        return getGovernanceToken().getPastVotes(account, blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the last proposal ID for an address.\r\n     * @param proposer The proposer's address.\r\n     * @param proposalId The proposal ID.\r\n     */\r\n    function _setLastProposalIdForAddress(\r\n        address proposer,\r\n        uint256 proposalId\r\n    ) internal override {\r\n        lastProposalIdForAddress[proposer] = proposalId;\r\n    }\r\n}\r\n"
    },
    "contracts/Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./registry/CompaniesRegistry.sol\";\r\nimport \"./registry/RecordsRegistry.sol\";\r\nimport \"./registry/TokensRegistry.sol\";\r\n\r\n/**\r\n * @title Registry Contract\r\n * @notice This contract serves as a registry to store all events, contracts, and proposals of all pools using global sequential numbering.\r\n * @dev The repository of all user and business entities created by the protocol: companies to be implemented, contracts to be deployed, proposals created by shareholders. The main logic of the registry is implemented in contracts that inherit from Registry.\r\n */\r\ncontract Registry is CompaniesRegistry, RecordsRegistry, TokensRegistry {\r\n    /// @dev This mapping stores the correspondence between the pool address, the local proposal number, and its global number registered in the registry.\r\n    mapping(address => mapping(uint256 => uint256)) public globalProposalIds;\r\n    event Log(address sender, address receiver, uint256 value, bytes data);\r\n\r\n    mapping(uint256 => address) public companyAddress;\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @notice Contract initializer\r\n     * @dev This method replaces the constructor for upgradeable contracts.\r\n     */\r\n    function initialize() public initializer {\r\n        __RegistryBase_init();\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @dev Update global proposal ID\r\n     * @param pool Pool address\r\n     * @param proposalId Local Proposal ID\r\n     * @param globalProposalId Global Proposal ID\r\n     */\r\n    function setGlobalProposalId(\r\n        address pool,\r\n        uint256 proposalId,\r\n        uint256 globalProposalId\r\n    ) internal override {\r\n        globalProposalIds[pool][proposalId] = globalProposalId;\r\n    }\r\n\r\n    function _setIndexAddress(uint256 index, address poolAddress) internal override {\r\n\r\n        companyAddress[index] = poolAddress;\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n\r\n    function getPoolAddressByIndex(\r\n        uint256 index\r\n    ) public view returns (address) {\r\n        return companyAddress[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return global proposal ID\r\n     * @param pool Pool address\r\n     * @param proposalId Proposal ID\r\n     * @return Global proposal ID\r\n     */\r\n    function getGlobalProposalId(\r\n        address pool,\r\n        uint256 proposalId\r\n    ) public view returns (uint256) {\r\n        return globalProposalIds[pool][proposalId];\r\n    }\r\n\r\n    function log(\r\n        address sender,\r\n        address receiver,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external {\r\n        require(\r\n            msg.sender == address(this) ||\r\n                msg.sender == service ||\r\n                msg.sender == address(IService(service).tgeFactory()) ||\r\n                msg.sender == address(IService(service).invoice()) ||\r\n                msg.sender == address(IService(service).vesting()) ||\r\n                typeOf(msg.sender) == IRecordsRegistry.ContractType.Pool ||\r\n                typeOf(msg.sender) == IRecordsRegistry.ContractType.TGE ||\r\n                typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.GovernanceToken ||\r\n                typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.PreferenceToken,\r\n            ExceptionsLibrary.INVALID_USER\r\n        );\r\n        // Emit event\r\n        emit Log(sender, receiver, value, data);\r\n    }\r\n}"
    },
    "contracts/registry/CompaniesRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./RegistryBase.sol\";\r\nimport \"../libraries/ExceptionsLibrary.sol\";\r\nimport \"../interfaces/IService.sol\";\r\nimport \"../interfaces/IPool.sol\";\r\nimport \"../interfaces/registry/ICompaniesRegistry.sol\";\r\n\r\n/**\r\n *@title Companies Registry Contract\r\n *@notice This contract is a section of the Registry contract designed for storing and manipulating companies listed for sale.\r\n *@dev With the help of this contract, one can find out the number of companies available for purchase in a specific jurisdiction and their corresponding prices. Here, an isolated but still dependent role-based model based on Access Control from OZ is implemented, with the contract Service playing a crucial role.\r\n */\r\nabstract contract CompaniesRegistry is RegistryBase, ICompaniesRegistry {\r\n    // CONSTANTS\r\n\r\n    /**\r\n    * @notice Hash code for the COMPANIES_MANAGER role in the OpenZeppelin (OZ) Access Control model.\r\n    * @dev This role is intended for working with the showcase of companies available for purchase and can also add and modify the link to the organization's charter. It operates only within the Registry contract through a separate AccessControl model from OpenZeppelin with standard methods: grantRole, revokeRole, setRole.\r\n    Methods:\r\n    - CompaniesRegistry.sol:createCompany(CompanyInfo calldata info) - creating a company with specified immutable data and its price in ETH, deploying the contract with a temporary owner in the form of the Registry contract proxy address. After calling such a method, the company immediately becomes available for purchase.\r\n    - CompaniesRegistry.sol:deleteCompany(uint256 jurisdiction, uint256 entityType, uint256 id) - deleting a company record (removing it from sale without the possibility of recovery).\r\n    - Pool.sol:setOAUrl(string memory _uri) - changing the link to the pool's operating agreement.\r\n    Storage, assignment, and revocation of the role are carried out using the standard methods of the AccessControl model from OpenZeppelin: grantRole, revokeRole, setRole. The holder of the standard ADMIN_ROLE of this contract can manage this role (by default - the address that deployed the contract).\r\n    */\r\n    bytes32 public constant COMPANIES_MANAGER_ROLE =\r\n        keccak256(\"COMPANIES_MANAGER\");\r\n\r\n    // STORAGE\r\n\r\n    /// @dev The embedded mappings form a construction, when accessed using two keys at once [jurisdiction][EntityType], you can get lists of ordinal numbers of company records added by managers. These serial numbers can be used when contacting mapping companies to obtain public legal information about the company awaiting purchase by the client.\r\n    mapping(uint256 => mapping(uint256 => uint256[])) public queue;\r\n\r\n    /// @dev In this mapping, public legal information is stored about companies that are ready to be acquired by the client and start working as a DAO. The appeal takes place according to the serial number - the key. A list of keys for each type of company and each jurisdiction can be obtained in the queue mapping.\r\n    mapping(uint256 => CompanyInfo) public companies;\r\n\r\n    /// @dev The last sequential number of the last record created by managers in the queue with company data is stored here.\r\n    uint256 public lastCompanyIndex;\r\n\r\n    /// @dev Status of combination of (jurisdiction, entityType, EIN) existing\r\n    mapping(bytes32 => uint256) public companyIndex;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev An event emitted when a manager creates a new company. After this event, the company immediately becomes available for purchase.\r\n     * @param index Company list index.\r\n     * @param poolAddress The contract pool address computed based on the bytecode and initial arguments.\r\n     */\r\n    event CompanyCreated(uint256 index, address poolAddress);\r\n\r\n    /**\r\n     * @dev An event emitted when a company is delisted from sale. This is one of the mechanisms to modify legal information regarding the company.\r\n     * @param metadataIndex Company metadata index.\r\n     */\r\n    event CompanyDeleted(uint256 metadataIndex);\r\n\r\n    /**\r\n     * @dev The event is issued when the manager changes the price of an already created company ready for purchase by the client.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @param id Queue index\r\n     * @param fee Fee for createPool\r\n     */\r\n    event CompanyFeeUpdated(\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        uint256 id,\r\n        uint256 fee\r\n    );\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @dev Create company record - A method for creating a new company record, including its legal data and the sale price.\r\n     * @param info Company Info\r\n     */\r\n    function createCompany(\r\n        CompanyInfo calldata info\r\n    ) public onlyRole(COMPANIES_MANAGER_ROLE) {\r\n        // Check that company data is valid\r\n        require(\r\n            info.jurisdiction > 0 &&\r\n                bytes(info.ein).length != 0 &&\r\n                bytes(info.dateOfIncorporation).length != 0 &&\r\n                info.entityType > 0,\r\n            ExceptionsLibrary.VALUE_ZERO\r\n        );\r\n\r\n        // Check that such company does not exist yet and mark it as existing\r\n        bytes32 companyHash = keccak256(\r\n            abi.encodePacked(info.jurisdiction, info.entityType, info.ein)\r\n        );\r\n        require(companyIndex[companyHash] == 0, ExceptionsLibrary.INVALID_EIN);\r\n        uint256 index = ++lastCompanyIndex;\r\n        companyIndex[companyHash] = index;\r\n\r\n        // Add record to list\r\n        companies[index] = info;\r\n\r\n        //Create PoolContract\r\n        address poolAddress = IService(service).createPool(info);\r\n\r\n        // Emit event\r\n        emit CompanyCreated(index, poolAddress);\r\n\r\n        _setIndexAddress(index, poolAddress);\r\n\r\n        IRegistry(address(this)).log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                ICompaniesRegistry.createCompany.selector,\r\n                info\r\n            )\r\n        );\r\n    }\r\n\r\n    function updateCompanyInfo(\r\n        uint256 index,\r\n        CompanyInfo memory _info\r\n    ) public onlyRole(COMPANIES_MANAGER_ROLE) {\r\n        address companyAddress = IRegistry(address(this)).getPoolAddressByIndex(\r\n            index\r\n        );\r\n\r\n        _setCompanyInfoForPool(\r\n            address(companyAddress),\r\n            _info.fee,\r\n            _info.jurisdiction,\r\n            _info.entityType,\r\n            _info.ein,\r\n            _info.dateOfIncorporation,\r\n            \"\"\r\n        );\r\n\r\n        companies[index] = _info;\r\n    }\r\n\r\n    function activateCompany(\r\n        uint256 index\r\n    ) public onlyRole(COMPANIES_MANAGER_ROLE) {\r\n        queue[companies[index].jurisdiction][companies[index].entityType].push(\r\n            index\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Lock company record\r\n     * @dev Booking the company for the buyer. During the acquisition of a company, this method searches for a free company at the request of the client (jurisdiction and type of organization), if such exist in the company’s storage reserve, then the method selects the last of the added companies, extracts its record data and sends it as a response for further work of the Service contract, removes its record from the Registry.\r\n     * @param jurisdiction Цифровой код юрисдикции\r\n     * @param entityType Цифровой код типа организакции\r\n     * @return info Company info\r\n     */\r\n    function lockCompany(\r\n        uint256 jurisdiction,\r\n        uint256 entityType\r\n    ) external onlyService returns (CompanyInfo memory info) {\r\n        // Check that company is available\r\n        uint256 queueLength = queue[jurisdiction][entityType].length;\r\n        require(queueLength > 0, ExceptionsLibrary.NO_COMPANY);\r\n\r\n        // Get index and pop queue\r\n        uint256 index = queue[jurisdiction][entityType][queueLength - 1];\r\n        queue[jurisdiction][entityType].pop();\r\n\r\n        // Get company info and remove it from list\r\n        info = companies[index];\r\n        delete companies[index];\r\n    }\r\n\r\n    /**\r\n     * @dev This method removes a record from the queue of created companies.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @param id Queue index.\r\n     */\r\n    function deleteCompany(\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        uint256 id\r\n    ) external onlyRole(COMPANIES_MANAGER_ROLE) {\r\n        // Get index and pop queue\r\n        uint256 index = queue[jurisdiction][entityType][id];\r\n        uint256 lastId = queue[jurisdiction][entityType].length - 1;\r\n        queue[jurisdiction][entityType][id] = queue[jurisdiction][entityType][\r\n            lastId\r\n        ];\r\n        queue[jurisdiction][entityType].pop();\r\n\r\n        // Remove company from list\r\n        string memory ein = companies[index].ein;\r\n        delete companies[index];\r\n\r\n        // Mark company as not existing\r\n        bytes32 companyHash = keccak256(\r\n            abi.encodePacked(jurisdiction, entityType, ein)\r\n        );\r\n        companyIndex[companyHash] = 0;\r\n\r\n        // Emit event\r\n        emit CompanyDeleted(id);\r\n    }\r\n\r\n    /**\r\n     * @dev The method that the manager uses to change the value of the company already added earlier in the Registry.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @param id Queue index.\r\n     *@ param fee Fee to update.\r\n     */\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev This view method is designed to find out whether there is at least one company available for purchase for the jurisdiction and type of organization selected by the user.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @return \"True\" if at least one company is available\r\n     */\r\n    function companyAvailable(\r\n        uint256 jurisdiction,\r\n        uint256 entityType\r\n    ) external view returns (bool) {\r\n        return queue[jurisdiction][entityType].length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev This method allows obtaining all the data of a company, including its legal data, that is still available for sale.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @param ein The government registration number.\r\n     * @return CompanyInfo The company data.\r\n     */\r\n    function getCompany(\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        string calldata ein\r\n    ) external view returns (CompanyInfo memory) {\r\n        bytes32 companyHash = keccak256(\r\n            abi.encodePacked(jurisdiction, entityType, ein)\r\n        );\r\n        return companies[companyIndex[companyHash]];\r\n    }\r\n\r\n    /**\r\n     * @dev This method allows obtaining the contract address of a company that is available for sale and meets the conditions based on its jurisdiction and entity type.\r\n     * @param jurisdiction The digital code of the jurisdiction.\r\n     * @param entityType The digital code of the organization type.\r\n     * @return address The contract pool address.\r\n     */\r\n    function getAvailableCompanyAddress(\r\n        uint256 jurisdiction,\r\n        uint256 entityType\r\n    ) external view returns (address) {\r\n        // Check that company is available\r\n        uint256 queueLength = queue[jurisdiction][entityType].length;\r\n        require(queueLength > 0, ExceptionsLibrary.NO_COMPANY);\r\n\r\n        // Get index\r\n        uint256 index = queue[jurisdiction][entityType][queueLength - 1];\r\n\r\n        address companyAddress = IRegistry(address(this)).getPoolAddressByIndex(\r\n            index\r\n        );\r\n\r\n        return companyAddress;\r\n    }\r\n\r\n    function _setIndexAddress(\r\n        uint256 index,\r\n        address poolAddress\r\n    ) internal virtual;\r\n\r\n    /**\r\n     * @notice Method for replacing the reference to the Operating Agreement and legal data of a company in the contract's memory.\r\n     * @dev This is a special method for the manager to service contracts of already acquired companies. To correct data in a company that has not been acquired yet, the record should be deleted and a new one created.\r\n     * @param _pool The contract pool address.\r\n     * @param _jurisdiction The digital code of the jurisdiction.\r\n     * @param _entityType The digital code of the organization type.\r\n     * @param _ein The government registration number.\r\n     * @param _dateOfIncorporation The date of incorporation.\r\n     * @param _OAuri Operating Agreement URL.\r\n     */\r\n    function _setCompanyInfoForPool(\r\n        address _pool,\r\n        uint256 _fee,\r\n        uint256 _jurisdiction,\r\n        uint256 _entityType,\r\n        string memory _ein,\r\n        string memory _dateOfIncorporation,\r\n        string memory _OAuri\r\n    ) private onlyRole(COMPANIES_MANAGER_ROLE) {\r\n        require(\r\n            bytes(IPool(_pool).trademark()).length == 0,\r\n            ExceptionsLibrary.ALREADY_SET\r\n        );\r\n\r\n        IPool(_pool).setCompanyInfo(\r\n            _fee,\r\n            _jurisdiction,\r\n            _entityType,\r\n            _ein,\r\n            _dateOfIncorporation,\r\n            _OAuri\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/registry/RecordsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./RegistryBase.sol\";\r\nimport \"../interfaces/registry/IRecordsRegistry.sol\";\r\n/**\r\n*  @title Registry Contract\r\n*  @notice This contract complements the Registry and serves as a storage or all entities created by users of the protocol.\r\n* @dev Unlike the Companies Registry, this contract is managed solely by other protocol contracts without operator intervention, and logs all deployed contracts and their associated events.\r\n*/\r\nabstract contract RecordsRegistry is RegistryBase, IRecordsRegistry {\r\n    // STORAGE\r\n\r\n    /// @dev In this array, records are stored about all contracts created by users (that is, about those generated by the service), namely, its index, with which you can extract all available information from other getters.\r\n    ContractInfo[] public contractRecords;\r\n\r\n    struct ContractIndex {\r\n        bool exists;\r\n        uint160 index;\r\n    }\r\n\r\n    /// @dev Mapping of contract addresses to their record indexes\r\n    mapping(address => ContractIndex) public indexOfContract;\r\n\r\n    /// @dev List of proposal records\r\n    ProposalInfo[] public proposalRecords;\r\n\r\n    /// @dev A list of existing events. An event can be either a contract or a specific action performed by a pool based on the results of voting for a promotion (for example, the transfer of funds from a pool contract is considered an event, but does not have a contract, and TGE has both the status of an event and its own separate contract).\r\n    Event[] public events;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted on creation of contract record\r\n     * @param index Record index\r\n     * @param addr Contract address\r\n     * @param contractType Contract type\r\n     */\r\n    event ContractRecordAdded(\r\n        uint256 index,\r\n        address addr,\r\n        ContractType contractType\r\n    );\r\n\r\n    /**\r\n     * @dev Event emitted on creation of proposal record\r\n     * @param index Record index\r\n     * @param pool Pool address\r\n     * @param proposalId Proposal ID\r\n     */\r\n    event ProposalRecordAdded(uint256 index, address pool, uint256 proposalId);\r\n\r\n    /**\r\n     * @dev Event emitted on creation of event\r\n     * @param index Record index\r\n     * @param eventType Event type\r\n     * @param pool Pool address\r\n     * @param proposalId Proposal ID\r\n     */\r\n    event EventRecordAdded(\r\n        uint256 index,\r\n        EventType eventType,\r\n        address pool,\r\n        uint256 proposalId\r\n    );\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @dev This method is used by the main Service contract in order to save the data of the contracts it deploys. After the Registry contract receives the address and type of the created contract from the Service contract, it sends back as a response the sequence number/index assigned to the new record.\r\n     * @param addr Contract address\r\n     * @param contractType Contract type\r\n     * @return index Record index\r\n     */\r\n    function addContractRecord(\r\n        address addr,\r\n        ContractType contractType,\r\n        string memory description\r\n    ) external onlyServiceOrFactory returns (uint256 index) {\r\n        // Add record\r\n        contractRecords.push(\r\n            ContractInfo({\r\n                addr: addr,\r\n                contractType: contractType,\r\n                description: description\r\n            })\r\n        );\r\n        index = contractRecords.length - 1;\r\n\r\n        // Add mapping from contract address\r\n        indexOfContract[addr] = ContractIndex({\r\n            exists: true,\r\n            index: uint160(index)\r\n        });\r\n\r\n        // Emit event\r\n        emit ContractRecordAdded(index, addr, contractType);\r\n    }\r\n\r\n    /**\r\n     * @dev This method accepts data from the Service contract about the created nodes in the pools. If there is an internal index of the proposal in the contract of the pool whose shareholders created the proposal, then as a result of using this method, the proposal is given a global index for the entire ecosystem.\r\n     * @param pool Pool address\r\n     * @param proposalId Proposal ID\r\n     * @return index Record index\r\n     */\r\n    function addProposalRecord(\r\n        address pool,\r\n        uint256 proposalId\r\n    ) external onlyService returns (uint256 index) {\r\n        // Add record\r\n        proposalRecords.push(\r\n            ProposalInfo({pool: pool, proposalId: proposalId, description: \"\"})\r\n        );\r\n        index = proposalRecords.length - 1;\r\n        setGlobalProposalId(pool, proposalId, index);\r\n        // Emit event\r\n        emit ProposalRecordAdded(index, pool, proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev This method is used to register events - specific entities associated with the operational activities of pools and the transfer of various values as a result of the use of ecosystem contracts. Each event also has a metahash string field, which is the identifier of the private description of the event stored on the backend.\r\n     * @param pool Pool address\r\n     * @param eventType Event type\r\n     * @param eventContract Address of the event contract\r\n     * @param proposalId Proposal ID\r\n     * @param metaHash Hash value of event metadata\r\n     * @return index Record index\r\n     */\r\n    function addEventRecord(\r\n        address pool,\r\n        EventType eventType,\r\n        address eventContract,\r\n        uint256 proposalId,\r\n        string calldata metaHash\r\n    ) external onlyServiceOrFactory returns (uint256 index) {\r\n        // Add record\r\n        events.push(\r\n            Event({\r\n                eventType: eventType,\r\n                pool: pool,\r\n                eventContract: eventContract,\r\n                proposalId: proposalId,\r\n                metaHash: metaHash\r\n            })\r\n        );\r\n        index = events.length - 1;\r\n\r\n        // Emit event\r\n        emit EventRecordAdded(index, eventType, pool, proposalId);\r\n    }\r\n\r\n    // VIRTUAL FUNCTIONS\r\n\r\n    function setGlobalProposalId(\r\n        address pool,\r\n        uint256 proposalId,\r\n        uint256 globalProposalId\r\n    ) internal virtual;\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @notice Returns type of given contract\r\n     * @param addr Address of contract\r\n     * @return Contract type\r\n     */\r\n    function typeOf(address addr) public view returns (ContractType) {\r\n        ContractIndex memory index = indexOfContract[addr];\r\n        return\r\n            index.exists\r\n                ? contractRecords[index.index].contractType\r\n                : ContractType.None;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns number of contract records\r\n     * @return Contract records count\r\n     */\r\n    function contractRecordsCount() external view returns (uint256) {\r\n        return contractRecords.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns number of proposal records\r\n     * @return Proposal records count\r\n     */\r\n    function proposalRecordsCount() external view returns (uint256) {\r\n        return proposalRecords.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns number of event records\r\n     * @return Event records count\r\n     */\r\n    function eventRecordsCount() external view returns (uint256) {\r\n        return events.length;\r\n    }\r\n}\r\n"
    },
    "contracts/registry/RegistryBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\r\nimport \"../libraries/ExceptionsLibrary.sol\";\r\nimport \"../interfaces/IService.sol\";\r\n/**\r\n* @title Registry Base Contract\r\n* @notice The core contract for the Registry contracts.\r\n* @dev This abstract contract is inherited by the Registry contract and contains functions and modifiers that could be applied to all contracts in this section.\r\n*/\r\nabstract contract RegistryBase is AccessControlEnumerableUpgradeable {\r\n    // STORAGE\r\n\r\n    /// @dev The address of the Service contract.\r\n    address public service;\r\n\r\n    // MODIFIERS\r\n    /// @notice Modifier that allows calling the method only from the Service contract.\r\n    modifier onlyService() {\r\n        require(msg.sender == service, ExceptionsLibrary.NOT_SERVICE);\r\n        _;\r\n    }\r\n    /// @notice Modifier that allows calling the method only from the Service, TGEFactory, and TokenFactory contracts.\r\n    modifier onlyServiceOrFactory() {\r\n        bool isService = msg.sender == service;\r\n        bool isFactory = msg.sender ==\r\n            address(IService(service).tokenFactory()) ||\r\n            msg.sender == address(IService(service).tgeFactory());\r\n\r\n        require(isService || isFactory, ExceptionsLibrary.NOT_SERVICE);\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER\r\n    /// @dev This method is executed during deployment or upgrade of the contract to set the contract initiator as the contract administrator. Without binding from the Service contract, this method cannot provide unauthorized access in any way.\r\n    function __RegistryBase_init() internal onlyInitializing {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    /// @dev This method is executed during deployment and upgrade of the contract to link the main protocol contract with the Registry data storage by storing the address of the Service contract.\r\n    function setService(\r\n        address service_\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        service = service_;\r\n    }\r\n}\r\n"
    },
    "contracts/registry/TokensRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./RegistryBase.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/registry/ITokensRegistry.sol\";\n\nabstract contract TokensRegistry is RegistryBase, ITokensRegistry {\n    // CONSTANTS\n\n    /// @dev Whitelisted token role\n    bytes32 public constant WHITELISTED_TOKEN_ROLE =\n        keccak256(\"WHITELISTED_TOKEN\");\n\n    // PUBLIC FUNCTIONS\n\n    function whitelistTokens(\n        address[] calldata tokens\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            _grantRole(WHITELISTED_TOKEN_ROLE, tokens[i]);\n        }\n    }\n\n    // PUBLIC VIEW FUNCTIONS\n\n    /**\n     * @dev Check if token is whitelisted\n     * @param token Token\n     * @return Is token whitelisted\n     */\n    function isTokenWhitelisted(address token) external view returns (bool) {\n        return hasRole(WHITELISTED_TOKEN_ROLE, token);\n    }\n}\n"
    },
    "contracts/Service.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IVesting.sol\";\r\nimport \"./interfaces/IInvoice.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./interfaces/ICustomProposal.sol\";\r\nimport \"./interfaces/registry/IRecordsRegistry.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\n/**\r\n * @title Service Contract\r\n * @notice The main contract of the protocol, the starting point of interaction for new clients.\r\n * @dev This contract deploys the core OZ Access Control model, where the distribution of accounts determines the behavior of most modifiers.\r\n * @dev The address of this contract is specified in all other contracts, and this contract also stores the addresses of those contracts. The mutual references between contracts implement a system of \"own-foreign\" recognition.\r\n * @dev This contract is responsible for updating itself and all other protocol contracts, including user contracts.\r\n */\r\ncontract Service is\r\n    Initializable,\r\n    AccessControlEnumerableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    PausableUpgradeable,\r\n    IService\r\n{\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n    using AddressUpgradeable for address;\r\n\r\n    // CONSTANTS\r\n\r\n    /** \r\n    * @notice Denominator for shares (such as thresholds)\r\n    * @dev The constant Service.sol:DENOM is used to work with percentage values of QuorumThreshold and DecisionThreshold thresholds, as well as for calculating the ProtocolTokenFee. In this version, it is equal to 1,000,000, for clarity stored as 100 * 10 ^ 4.\r\n    10^4 corresponds to one percent, and 100 * 10^4 corresponds to one hundred percent.\r\n    The value of 12.3456% will be written as 123,456, and 78.9% as 789,000.\r\n    This notation allows specifying ratios with an accuracy of up to four decimal places in percentage notation (six decimal places in decimal notation).\r\n    When working with the CompanyDAO frontend, the application scripts automatically convert the familiar percentage notation into the required format. When using the contracts independently, this feature of value notation should be taken into account.\r\n    */\r\n    uint256 private constant DENOM = 100 * 10 ** 4;\r\n\r\n    /**\r\n    * @notice Hash code of the ADMIN role for the OZ Access Control model\r\n    * @dev The main role of the entire ecosystem, the protocol owner. The address assigned to this role can perform all actions related to updating contract implementations or interacting with or configuring the protocol's Treasury. The administrator can cancel suspicious proposals awaiting execution, pause the operation of protocol contracts and pools. In addition, the administrator can perform all actions provided for the SERVICE_MANAGER role.\r\n    The holder of this role can assign the roles of ADMIN, WHITELISTED_USER, and SERVICE_MANAGER to other accounts.\r\n    Storage, assignment, and revocation of the role are carried out using the standard methods of the AccessControl model from OpenZeppelin: grantRole, revokeRole, setRole.\r\n    */\r\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\r\n\r\n    /**\r\n    * @notice Hash code of the MANAGER role for the OZ Access Control model\r\n    * @dev The administrator can delegate some of their powers to the owners of addresses assigned the SERVICE_MANAGER role. The administrator can also perform all the methods listed below. This role is assigned and removed by the administrator and was created for assigning addresses managed by worker scripts (automatic backend modules whose task is to constantly track changes in the states of all ecosystem components and initiate transactions that make actual changes and involve necessary scenarios for certain contracts at the moment).\r\n    In addition, the holder of this role has the same powers as the holders of the Secretary and Executor roles in any pool, assigned by its shareholders.\r\n    The holder of this role can assign the WHITELISTED_USER role to other accounts.\r\n    Storage, assignment, and revocation of the role are carried out using the standard methods of the AccessControl model from OpenZeppelin: grantRole, revokeRole, setRole.\r\n    */\r\n    bytes32 public constant SERVICE_MANAGER_ROLE = keccak256(\"USER_MANAGER\");\r\n\r\n    /// @notice Legacy hash code of users added to the whitelist. Currently unused role.\r\n    bytes32 public constant WHITELISTED_USER_ROLE =\r\n        keccak256(\"WHITELISTED_USER\");\r\n\r\n    /// @notice Hash code of the EXECUTOR role for the OZ Access Control model\r\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR\");\r\n\r\n    // STORAGE\r\n\r\n    /// @dev Address of the Registry contract\r\n    IRegistry public registry;\r\n\r\n    /// @dev Address of the Pool beacon contract\r\n    address public poolBeacon;\r\n\r\n    /// @dev Address of the Token beacon contract\r\n    address public tokenBeacon;\r\n\r\n    /// @dev Address of the TGE beacon contract\r\n    address public tgeBeacon;\r\n\r\n    /// @notice Address to hold the commission from TGE in distributed tokens\r\n    /// @dev 0.1% (can be changed by the admin) of all Governance tokens from successful TGE are held here\r\n    address public protocolTreasury;\r\n\r\n    /// @notice The fee size that the protocol charges in tokens from each successful TGE (only for Governance Tokens)\r\n    /// @dev Protocol token fee percentage value with 4 decimals.\r\n    /// Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000\r\n    uint256 public protocolTokenFee;\r\n\r\n    /// @notice Total fees collected from TGE in Governance tokens for each pool\r\n    /// @dev Protocol token fee claimed for tokens\r\n    mapping(address => uint256) public protolCollectedFee;\r\n\r\n    /// @dev Address of the Proposal beacon contract\r\n    ICustomProposal public customProposal;\r\n\r\n    /// @dev Address of the Vesting contract\r\n    IVesting public vesting;\r\n\r\n    /// @dev Address of the Invoice contract\r\n    IInvoice public invoice;\r\n\r\n    /// @dev Address of the TokenFactory contract\r\n    ITokenFactory public tokenFactory;\r\n\r\n    /// @dev Address of the TGEFactory contract\r\n    ITGEFactory public tgeFactory;\r\n\r\n    /// @dev Address of the Token beacon contract (for ERC1155 tokens)\r\n    address public tokenERC1155Beacon;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted upon deployment of a pool contract (i.e., creation of a pool)\r\n     * @param pool Address of the Pool contract\r\n     * @param token Address of the pool's token contract (usually 0, as the pool and token contracts are deployed separately)\r\n     * @param tge Address of the TGE contract (usually 0, as the pool and TGE contracts are deployed separately)\r\n     */\r\n    event PoolCreated(address pool, address token, address tge);\r\n\r\n    /**\r\n     * @dev Event emitted upon the purchase of a pool\r\n     * @param pool Address of the purchased pool\r\n     * @param token Address of the pool's token contract (usually 0, as the pool does not have any tokens at the time of purchase)\r\n     * @param tge Address of the TGE contract (usually 0)\r\n     */\r\n    event PoolPurchased(address pool, address token, address tge);\r\n\r\n    /**\r\n     * @dev Event emitted when the balance of the Protocol Treasury changes due to transfers of pool tokens collected as protocol fees.\r\n     * @param protocolTreasury Address of the Protocol Treasury\r\n     */\r\n    event ProtocolTreasuryChanged(address protocolTreasury);\r\n\r\n    /**\r\n     * @dev Event emitted when the protocol changes the token fee collected from pool tokens.\r\n     * @param protocolTokenFee New protocol token fee\r\n     */\r\n    event ProtocolTokenFeeChanged(uint256 protocolTokenFee);\r\n\r\n    /**\r\n     * @dev Event emitted when the service fees are transferred to another address\r\n     * @param to Transfer recipient\r\n     * @param amount Amount of ETH transferred\r\n     */\r\n    event FeesTransferred(address to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Event emitted when a proposal is canceled by an account with the Service Manager role\r\n     * @param pool Pool address\r\n     * @param proposalId Pool local proposal id\r\n     */\r\n    event ProposalCancelled(address pool, uint256 proposalId);\r\n\r\n    /**\r\n     * @dev Event emitted on PoolBeacon change.\r\n     * @param beacon Beacon address\r\n     */\r\n    event PoolBeaconChanged(address beacon);\r\n\r\n    /**\r\n     * @dev Event emitted on TGEBeacon change.\r\n     * @param beacon Beacon address\r\n     */\r\n    event TGEBeaconChanged(address beacon);\r\n    /**\r\n     * @dev Event emitted on TokenBeacon change.\r\n     * @param beacon Beacon address\r\n     */\r\n    event TokenBeaconChanged(address beacon);\r\n    /**\r\n     * @dev Event emitted on CustomPropsalProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event CustomPropsalChanged(address proxy);\r\n    /**\r\n     * @dev Event emitted on InvoiceProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event InvoiceChanged(address proxy);\r\n    /**\r\n     * @dev Event emitted on RegistryProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event RegistryChanged(address proxy);\r\n    /**\r\n     * @dev Event emitted on TGEFactoryProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event TGEFactoryChanged(address proxy);\r\n\r\n    /**\r\n     * @dev Event emitted on TokenFactoryProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event TokenFactoryChanged(address proxy);\r\n\r\n    /**\r\n     * @dev Event emitted on VestingProxy change.\r\n     * @param proxy Proxy address\r\n     */\r\n    event VestingChanged(address proxy);\r\n    // MODIFIERS\r\n\r\n    /// @notice Modifier that allows the method to be called only by the Pool contract.\r\n    modifier onlyPool() {\r\n        require(\r\n            registry.typeOf(msg.sender) == IRecordsRegistry.ContractType.Pool,\r\n            ExceptionsLibrary.NOT_POOL\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGE contract.\r\n    modifier onlyTGE() {\r\n        require(\r\n            registry.typeOf(msg.sender) == IRecordsRegistry.ContractType.TGE,\r\n            ExceptionsLibrary.NOT_TGE\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the Registry contract.\r\n    modifier onlyRegistry() {\r\n        require(\r\n            msg.sender == address(registry),\r\n            ExceptionsLibrary.NOT_REGISTRY\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by an account with the ADMIN role in the Registry contract.\r\n    modifier onlyManager() {\r\n        require(\r\n            registry.hasRole(registry.COMPANIES_MANAGER_ROLE(), msg.sender),\r\n            ExceptionsLibrary.INVALID_USER\r\n        );\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Initializer function, can only be called once\r\n     * @param registry_ Registry address\r\n     * @param customProposal_ Custom proposals address\r\n     * @param vesting_ Vesting address\r\n     * @param poolBeacon_ Pool beacon\r\n     * @param tokenBeacon_ Governance token beacon\r\n     * @param tgeBeacon_ TGE beacon\r\n     * @param protocolTokenFee_ Protocol token fee\r\n     */\r\n    function initialize(\r\n        IRegistry registry_,\r\n        ICustomProposal customProposal_,\r\n        IVesting vesting_,\r\n        address poolBeacon_,\r\n        address tokenBeacon_,\r\n        address tgeBeacon_,\r\n        uint256 protocolTokenFee_\r\n    ) external reinitializer(2) {\r\n        require(\r\n            address(registry_) != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n        require(poolBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n        require(tokenBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n        require(tgeBeacon_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n        __Pausable_init();\r\n        __ReentrancyGuard_init();\r\n\r\n        registry = registry_;\r\n        vesting = vesting_;\r\n        poolBeacon = poolBeacon_;\r\n        tokenBeacon = tokenBeacon_;\r\n        tgeBeacon = tgeBeacon_;\r\n        customProposal = customProposal_;\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(SERVICE_MANAGER_ROLE, msg.sender);\r\n        _grantRole(EXECUTOR_ROLE, msg.sender);\r\n        _setRoleAdmin(WHITELISTED_USER_ROLE, SERVICE_MANAGER_ROLE);\r\n\r\n        setProtocolTreasury(address(this));\r\n        setProtocolTokenFee(protocolTokenFee_);\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n     * @notice Method for purchasing a pool by the user. Among the data submitted for input, there are jurisdiction and Entity Type\r\n     * @dev The user refers to the Service protocol's purchasePool method, in which arguments indicate the digital jurisdiction code and the digital organizational type code of the company (as well as Governance settings provided by the NewGovernanceSettings interface, and a string record that will serve as the company's trademark). If there is at least one unoccupied and available company for purchase in the Registry contract (queue record with keys in the form of user-transmitted jurisdiction and organizational type codes), the following actions occur:\r\n    -    reserving the company for the user (removing it from the list of available ones)\r\n    -    debiting the commission in ETH (in fact, the company's price) from the user's balance, which is equal to the fee field in the CompanyInfo structure stored in the companies of the Registry contract\r\n    -    making changes to the contract through an internal transaction using the setNewOwnerWithSettings method, which includes changing the company's trademark, its owner, and Governance settings.\r\n    From this point on, the user is considered the Owner of the company.\r\n    * @param jurisdiction Digital code of the jurisdiction.\r\n    * @param entityType Digital code of the entity type.\r\n    * @param trademark Company's trademark.\r\n    * @param governanceSettings Initial Governance settings.\r\n     */\r\n    function purchasePool(\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        string memory trademark,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\r\n    ) external payable nonReentrant whenNotPaused {\r\n        // Create pool\r\n        \r\n        IPool pool = IPool(\r\n            registry.getAvailableCompanyAddress(jurisdiction, entityType)\r\n        );\r\n        \r\n        // Check fee\r\n        require(\r\n            msg.value == pool.getCompanyFee(),\r\n            ExceptionsLibrary.INCORRECT_ETH_PASSED\r\n        );\r\n\r\n        // setNewOwnerWithSettings to pool contract\r\n        pool.setNewOwnerWithSettings(msg.sender, trademark, governanceSettings);\r\n        registry.lockCompany(jurisdiction, entityType);\r\n        // Emit event\r\n        emit PoolPurchased(address(pool), address(0), address(0));\r\n        registry.log(\r\n            msg.sender,\r\n            address(this),\r\n            msg.value,\r\n            abi.encodeWithSelector(\r\n                IService.purchasePool.selector,\r\n                jurisdiction,\r\n                entityType,\r\n                trademark,\r\n                governanceSettings\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Method for manually transferring the company to a new owner.\r\n     * @dev This method can be used when paying for the company's cost (protocol fee) through any other means (off-chain payment).\r\n     * @param jurisdiction Digital code of the jurisdiction.\r\n     * @param entityType Digital code of the entity type.\r\n     * @param trademark Company's trademark.\r\n     * @param governanceSettings Initial Governance settings.\r\n     */\r\n    function transferPurchasedPoolByService(\r\n        address newowner,\r\n        uint256 jurisdiction,\r\n        uint256 entityType,\r\n        string memory trademark,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\r\n    ) external onlyManager nonReentrant whenNotPaused {\r\n        // Create pool\r\n        IPool pool = IPool(\r\n            registry.getAvailableCompanyAddress(jurisdiction, entityType)\r\n        );\r\n\r\n        // setNewOwnerWithSettings to pool contract\r\n        \r\n        pool.setNewOwnerWithSettings(newowner, trademark, governanceSettings);\r\n        \r\n        // Emit event\r\n        emit PoolPurchased(address(pool), address(0), address(0));\r\n        registry.lockCompany(jurisdiction, entityType);\r\n        registry.log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IService.transferPurchasedPoolByService.selector,\r\n                newowner,\r\n                jurisdiction,\r\n                entityType,\r\n                trademark,\r\n                governanceSettings\r\n            )\r\n        );\r\n    }\r\n\r\n    // PUBLIC INDIRECT FUNCTIONS (CALLED THROUGH POOL OR REGISTRY)\r\n\r\n    /**\r\n     * @notice Adding a new record of a proposal to the Registry.\r\n     * @dev To ensure the security and consistency of the contract architecture, user contracts do not directly interact with the Registry.\r\n     * @dev Due to the complexity of the role model for creating proposals, registering a new record is performed from the central contract.\r\n     * @param proposalId Proposal ID.\r\n     */\r\n    function addProposal(uint256 proposalId) external onlyPool whenNotPaused {\r\n        registry.addProposalRecord(msg.sender, proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Adding a new record of an event to the Registry.\r\n     * @dev To ensure the security and consistency of the contract architecture, user contracts do not directly interact with the Registry.\r\n     * @param eventType Event type.\r\n     * @param proposalId Proposal ID.\r\n     * @param metaHash Hash value of event metadata.\r\n     */\r\n    function addEvent(\r\n        IRegistry.EventType eventType,\r\n        uint256 proposalId,\r\n        string calldata metaHash\r\n    ) external onlyPool whenNotPaused {\r\n        registry.addEventRecord(\r\n            msg.sender,\r\n            eventType,\r\n            address(0),\r\n            proposalId,\r\n            metaHash\r\n        );\r\n    }\r\n\r\n    function addInvoiceEvent(\r\n        address pool,\r\n        uint256 invoiceId\r\n    ) external whenNotPaused returns (uint256) {\r\n        require(\r\n            msg.sender == address(invoice),\r\n            ExceptionsLibrary.NOT_INVOICE_MANAGER\r\n        );\r\n\r\n        return\r\n            registry.addEventRecord(\r\n                pool,\r\n                IRecordsRegistry.EventType.Transfer,\r\n                msg.sender,\r\n                invoiceId,\r\n                \"\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Method for deploying a pool contract.\r\n     * @dev When working with the Registry contract, the address that has the COMPANIES_MANAGER role in that contract can deploy the pool contract by sending a transaction with the company's legal data as an argument.\r\n     * @param companyInfo Company info.\r\n     */\r\n    function createPool(\r\n        IRegistry.CompanyInfo memory companyInfo\r\n    ) external onlyRegistry nonReentrant whenNotPaused returns (address) {\r\n        // Create pool\r\n        IPool pool = _createPool(companyInfo);\r\n\r\n        // Initialize pool contract\r\n        pool.initialize(companyInfo);\r\n\r\n        // Emit event\r\n        emit PoolCreated(address(pool), address(0), address(0));\r\n        return address(pool);\r\n    }\r\n\r\n    // RESTRICTED FUNCTIONS\r\n\r\n    /**\r\n     * @dev Transfer the collected protocol fees obtained from the sale of pools to the specified address.\r\n     * @param to The transfer recipient.\r\n     */\r\n    function transferCollectedFees(\r\n        address to\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(to != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n        uint256 balance = payable(address(this)).balance;\r\n        (bool success, ) = payable(to).call{value: balance}(\"\");\r\n        require(success, ExceptionsLibrary.EXECUTION_FAILED);\r\n        emit FeesTransferred(to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets factories for previously deployed service\r\n     * @param tokenFactory_ TokenFactory address\r\n     * @param tgeFactory_ TGEFactory address\r\n     */\r\n    function setFactories(\r\n        ITokenFactory tokenFactory_,\r\n        ITGEFactory tgeFactory_\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        tokenFactory = tokenFactory_;\r\n        tgeFactory = tgeFactory_;\r\n    }\r\n\r\n    /**\r\n     * @notice Method to account for the collected protocol fees.\r\n     * @dev This method is called after each successful Governance Token Generation Event (TGE) and increases the record of the collected Governance Tokens for this pool.\r\n     * @param _token The address of the token contract.\r\n     * @param _protocolTokenFee The amount of tokens collected as protocol fees.\r\n     */\r\n    function setProtocolCollectedFee(\r\n        address _token,\r\n        uint256 _protocolTokenFee\r\n    ) public onlyTGE {\r\n        protolCollectedFee[_token] += _protocolTokenFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new address for the protocol treasury, where the Governance tokens collected as protocol fees will be transferred.\r\n     * @param _protocolTreasury The new address of the protocol treasury.\r\n     */\r\n    function setProtocolTreasury(\r\n        address _protocolTreasury\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            _protocolTreasury != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n\r\n        protocolTreasury = _protocolTreasury;\r\n        emit ProtocolTreasuryChanged(protocolTreasury);\r\n    }\r\n\r\n    /**\r\n     * @dev Set a new value for the protocol token fee percentage.\r\n     * @param _protocolTokenFee The new protocol token fee percentage value with 4 decimals.\r\n     * Examples: 1% = 10000, 100% = 1000000, 0.1% = 1000.\r\n     */\r\n    function setProtocolTokenFee(\r\n        uint256 _protocolTokenFee\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_protocolTokenFee <= DENOM, ExceptionsLibrary.INVALID_VALUE);\r\n\r\n        protocolTokenFee = _protocolTokenFee;\r\n        emit ProtocolTokenFeeChanged(_protocolTokenFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new Registry contract\r\n     * @param _registry registry address\r\n     */\r\n    function setRegistry(\r\n        IRegistry _registry\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            address(_registry) != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n\r\n        registry = _registry;\r\n        emit RegistryChanged(address(registry));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new customProposal contract\r\n     * @param _customProposal customProposal address\r\n     */\r\n    function setCustomProposal(\r\n        ICustomProposal _customProposal\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            address(_customProposal) != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n\r\n        customProposal = _customProposal;\r\n        emit CustomPropsalChanged(address(customProposal));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new vesting\r\n     * @param _vesting vesting address\r\n     */\r\n    function setVesting(\r\n        IVesting _vesting\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            address(_vesting) != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n\r\n        vesting = _vesting;\r\n        emit VestingChanged(address(vesting));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new invoice contract\r\n     * @param _invoice invoice address\r\n     */\r\n    function setInvoice(\r\n        IInvoice _invoice\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(\r\n            address(_invoice) != address(0),\r\n            ExceptionsLibrary.ADDRESS_ZERO\r\n        );\r\n\r\n        invoice = _invoice;\r\n        emit InvoiceChanged(address(invoice));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new pool beacon\r\n     * @param beacon Beacon address\r\n     */\r\n    function setPoolBeacon(\r\n        address beacon\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(beacon != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n\r\n        poolBeacon = beacon;\r\n        emit PoolBeaconChanged(address(poolBeacon));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new token beacon\r\n     * @param beacon Beacon address\r\n     */\r\n    function setTokenBeacon(\r\n        address beacon\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(beacon != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n\r\n        tokenBeacon = beacon;\r\n        emit TokenBeaconChanged(address(tokenBeacon));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new tokenERC1155 beacon\r\n     * @param beacon Beacon address\r\n     */\r\n    function setTokenERC1155Beacon(\r\n        address beacon\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(beacon != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n\r\n        tokenERC1155Beacon = beacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new TGE beacon\r\n     * @param beacon Beacon address\r\n     */\r\n    function setTGEBeacon(\r\n        address beacon\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(beacon != address(0), ExceptionsLibrary.ADDRESS_ZERO);\r\n\r\n        tgeBeacon = beacon;\r\n        emit TGEBeaconChanged(address(tgeBeacon));\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel a proposal by the administrator.\r\n     * @dev This method is used for emergency cancellation of any proposal by an address with the ADMIN role in this contract. It is used to prevent the execution of transactions prescribed by the proposal if there are doubts about their safety.\r\n     * @param pool The address of the pool contract.\r\n     * @param proposalId The ID of the proposal.\r\n     */\r\n    function cancelProposal(\r\n        address pool,\r\n        uint256 proposalId\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        IPool(pool).cancelProposal(proposalId);\r\n        emit ProposalCancelled(pool, proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Pause service\r\n     */\r\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause service\r\n     */\r\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused()\r\n        public\r\n        view\r\n        override(PausableUpgradeable, IService)\r\n        returns (bool)\r\n    {\r\n        return super.paused();\r\n    }\r\n\r\n    /**\r\n     * @notice This method returns the minimum soft cap accepted in the protocol.\r\n     * @dev Due to the fact that each issuance of Governance tokens involves collecting a portion of the tokens as a fee, this calculation is used to avoid conflicts related to rounding.\r\n     * @return The minimum soft cap.\r\n     */\r\n    function getMinSoftCap() public view returns (uint256) {\r\n        return (DENOM + protocolTokenFee - 1) / protocolTokenFee;\r\n    }\r\n\r\n    /**\r\n     * @notice This method returns the size of the protocol fee charged for issuing Governance tokens.\r\n     * @dev The calculation is based on DENOM and the current fee rate, allowing the fee to be calculated for any amount of tokens planned for distribution.\r\n     * @param amount The token amount.\r\n     * @return The size of the fee in tokens.\r\n     */\r\n    function getProtocolTokenFee(uint256 amount) public view returns (uint256) {\r\n        require(amount >= getMinSoftCap(), ExceptionsLibrary.INVALID_VALUE);\r\n        return (amount * protocolTokenFee + (DENOM - 1)) / DENOM;\r\n    }\r\n\r\n    /**\r\n     * @notice This method returns the amount of Governance tokens collected as a protocol fee for each pool.\r\n     * @param token_ The address of the token contract.\r\n     * @return The amount of collected protocol fee.\r\n     */\r\n    function getProtocolCollectedFee(\r\n        address token_\r\n    ) external view returns (uint256) {\r\n        return protolCollectedFee[token_];\r\n    }\r\n\r\n    /**\r\n     * @notice This method returns the maximum number of Governance tokens that can be issued in all subsequent TGEs for the pool.\r\n     * @dev Due to the protocol fee mechanism, which involves minting new token units as a protocol fee, calculating this maximum can be more complex than it seems at first glance. This method takes into account reserved and potential token units and calculates the hardcap accordingly.\r\n     * @param _pool The address of the pool contract for which the calculation is required.\r\n     * @return The maximum hardcap value.\r\n     */\r\n    function getMaxHardCap(address _pool) public view returns (uint256) {\r\n        if (\r\n            registry.typeOf(_pool) == IRecordsRegistry.ContractType.Pool &&\r\n            IPool(_pool).isDAO()\r\n        ) {\r\n            return\r\n                IPool(_pool).getGovernanceToken().cap() -\r\n                getProtocolTokenFee(IPool(_pool).getGovernanceToken().cap());\r\n        }\r\n\r\n        return type(uint256).max - getProtocolTokenFee(type(uint256).max);\r\n    }\r\n\r\n    /// @dev This method is used for formal validation of user-defined parameters for the conducted TGE.\r\n    function validateTGEInfo(\r\n        ITGE.TGEInfo calldata info,\r\n        uint256 cap,\r\n        uint256 totalSupplyWithReserves,\r\n        IToken.TokenType tokenType\r\n    ) external view {\r\n        // Check unit of account\r\n        if (info.unitOfAccount != address(0))\r\n            require(\r\n                IERC20Upgradeable(info.unitOfAccount).totalSupply() > 0,\r\n                ExceptionsLibrary.INVALID_TOKEN\r\n            );\r\n\r\n        // Check hardcap\r\n        require(\r\n            info.hardcap >= info.softcap,\r\n            ExceptionsLibrary.INVALID_HARDCAP\r\n        );\r\n\r\n        // Check vesting params\r\n        vesting.validateParams(info.vestingParams);\r\n\r\n        // Check remaining supply\r\n        uint256 remainingSupply = cap - totalSupplyWithReserves;\r\n        require(\r\n            info.hardcap <= remainingSupply,\r\n            ExceptionsLibrary.HARDCAP_OVERFLOW_REMAINING_SUPPLY\r\n        );\r\n        if (tokenType == IToken.TokenType.Governance) {\r\n            require(\r\n                info.hardcap + getProtocolTokenFee(info.hardcap) <=\r\n                    remainingSupply,\r\n                ExceptionsLibrary\r\n                    .HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @dev Intermediate calculation for the create2 algorithm\r\n     * @param info Company info\r\n     * @return salt Create2 salt\r\n     * @return deployBytecode Deployed bytecode\r\n     */\r\n    function _getCreate2Data(\r\n        IRegistry.CompanyInfo memory info\r\n    ) internal view returns (bytes32 salt, bytes memory deployBytecode) {\r\n        // Get salt\r\n        salt = keccak256(\r\n            abi.encode(info.jurisdiction, info.entityType, info.ein)\r\n        );\r\n\r\n        // Get bytecode\r\n        bytes memory proxyBytecode = type(BeaconProxy).creationCode;\r\n        deployBytecode = abi.encodePacked(\r\n            proxyBytecode,\r\n            abi.encode(poolBeacon, \"\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Creating and initializing a pool\r\n     * @return pool Pool contract address\r\n     */\r\n    function _createPool(\r\n        IRegistry.CompanyInfo memory info\r\n    ) internal returns (IPool pool) {\r\n        // Create pool contract using Create2\r\n        (bytes32 salt, bytes memory bytecode) = _getCreate2Data(info);\r\n        pool = IPool(Create2Upgradeable.deploy(0, salt, bytecode));\r\n\r\n        // Add pool contract to registry\r\n        registry.addContractRecord(\r\n            address(pool),\r\n            IRecordsRegistry.ContractType.Pool,\r\n            \"\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/TGE.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITokenERC1155.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/IVesting.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n/**\r\n    * @title Token Generation Event Contract\r\n    * @notice The Token Generation Event (TGE) is the cornerstone of everything related to tokens issued on the CompanyDAO protocol. TGE contracts contain the rules and deadlines for token distribution events and can influence the pool's operational activities even after they have ended.\r\n    The launch of the TGE event takes place simultaneously with the deployment of the contract, after which the option to purchase tokens becomes immediately available. Tokens purchased by a user can be partially or fully minted to the buyer's address and can also be placed in the vesting reserve either in full or for the remaining portion. Additionally, tokens acquired during the TGE and held in the buyer's balance may have their transfer functionality locked (the user owns, uses them as votes, delegates, but cannot transfer the tokens to another address).\r\n    * @dev TGE events differ by the type of tokens being distributed:\r\n    - Governance Token Generation Event\r\n    - Preference Token Generation Event\r\n    When deploying the TGE contract, among other arguments, the callData field contains the token field, which contains the address of the token contract that will interact with the TGE contract. The token type can be determined from the TokenType state variable of the token contract.\r\n    Differences between these types:\r\n    - Governance Token Generation Event involves charging a ProtocolTokenFee in the amount set in the Service:protocolTokenFee value (percentages in DENOM notation). This fee is collected through the transferFunds() transaction after the completion of the Governance token distribution event (the funds collected from buyers go to the pool balance, and the protocolTokenFee is minted and sent to the Service:protocolTreasury).\r\n    - Governance Token Generation Event has a mandatory minPurchase limit equal to the Service:protocolTokenFee (in the smallest indivisible token parts, taking into account Decimals and DENOM). This is done to avoid rounding conflicts or overcharges when calculating the fee for each issued token volume.\r\n    - In addition to being launched as a result of a proposal execution, a Governance Token Generation Event can be launched by the pool Owner as long as the pool has not acquired DAO status. Preference Token Generation Event can only be launched as a result of a proposal execution.\r\n    - A successful Governance Token Generation Event (see TGE states later) leads to the pool becoming a DAO if it didn't previously have that status.\r\n    @dev **TGE events differ by the number of previous launches:**\r\n    - primary TGE\r\n    - secondary TGE\r\n    As long as the sum of the totalSupply and the vesting reserve of the distributed token does not equal the cap, a TGE can be launched to issue some more of these tokens.\r\n    The first TGE for the distribution of any token is called primary, and all subsequent ones are called secondary.\r\n    Differences between these types:\r\n    - A transaction to launch a primary TGE involves the simultaneous deployment of the token contract, while a secondary TGE only works with an existing token contract.\r\n    - A secondary TGE does not have a softcap parameter, meaning that after at least one minPurchase of tokens, the TGE is considered successful.\r\n    - When validating the hardcap (i.e., the maximum possible number of tokens available for sale/distribution within the TGE) during the creation of a primary TGE, only a formal check is performed (hardcap must not be less than softcap and not greater than cap). For a secondary TGE, tokens that will be minted during vesting claims are also taken into account.\r\n    - In case of failure of a primary TGE for any token, that token is not considered to have any application within the protocol. It is no longer possible to conduct a TGE for such a token.\r\n    */\r\n\r\ncontract TGE is Initializable, ReentrancyGuardUpgradeable, ITGE {\r\n    using AddressUpgradeable for address payable;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    // CONSTANTS\r\n\r\n    /** \r\n    * @notice Denominator for shares (such as thresholds)\r\n    * @dev The constant Service.sol:DENOM is used to work with percentage values of QuorumThreshold and DecisionThreshold thresholds, as well as for calculating the ProtocolTokenFee. In this version, it is equal to 1,000,000, for clarity stored as 100 * 10 ^ 4.\r\n    10^4 corresponds to one percent, and 100 * 10^4 corresponds to one hundred percent.\r\n    The value of 12.3456% will be written as 123,456, and 78.9% as 789,000.\r\n    This notation allows specifying ratios with an accuracy of up to four decimal places in percentage notation (six decimal places in decimal notation).\r\n    When working with the CompanyDAO frontend, the application scripts automatically convert the familiar percentage notation into the required format. When using the contracts independently, this feature of value notation should be taken into account.\r\n    */\r\n    uint256 private constant DENOM = 100 * 10 ** 4;\r\n\r\n    /// @notice The address of the ERC20/ERC1155 token being distributed in this TGE\r\n    /// @dev Mandatory setting for TGE, only one token can be distributed in a single TGE event\r\n    address public token;\r\n\r\n    /// @notice The identifier of the ERC1155 token collection\r\n    /// @dev For ERC1155, there is an additional restriction that units of only one collection of such tokens can be distributed in a single TGE\r\n    uint256 public tokenId;\r\n\r\n    /// @dev Parameters for conducting the TGE, described by the ITGE.sol:TGEInfo interface\r\n    TGEInfo public info;\r\n\r\n    /**\r\n    * @notice A whitelist of addresses allowed to participate in this TGE\r\n    * @dev A TGE can be public or private. To make the event public, simply leave the whitelist empty.\r\n    The TGE contract can act as an airdrop - a free token distribution. To do this, set the price value to zero.\r\n    To create a DAO with a finite number of participants, each of whom should receive an equal share of tokens, you can set the whitelist when launching the TGE as a list of the participants' addresses, and set both minPurchase and maxPurchase equal to the expression (hardcap / number of participants). To make the pool obtain DAO status only if the distribution is successful under such conditions for all project participants, you can set the softcap value equal to the hardcap. With these settings, the company will become a DAO only if all the initial participants have an equal voting power.\r\n    */\r\n    mapping(address => bool) private _isUserWhitelisted;\r\n\r\n    /// @dev The block on which the TGE contract was deployed and the event begins\r\n    uint256 public createdAt;\r\n\r\n    /// @dev A mapping that stores the amount of token units purchased by each address that plays a key role in the TGE.\r\n    mapping(address => uint256) public purchaseOf;\r\n\r\n    /// @dev Total amount of tokens purchased during the TGE\r\n    uint256 public totalPurchased;\r\n\r\n    /// @notice Achievement of the pool's TVL as specified by the vesting settings\r\n    /// @dev A flag that irreversibly becomes True only if the pool for which the TGE is being conducted is able to reach or exceed its TVL value specified in the vesting parameters.\r\n    bool public vestingTVLReached;\r\n\r\n    /// @notice Achievement of the pool's TVL as specified by the lockup settings\r\n    /// @dev A flag that irreversibly becomes True only if the pool for which the TGE is being conducted is able to reach or exceed its TVL value specified in the lockup parameters.\r\n    bool public lockupTVLReached;\r\n\r\n    /** \r\n    * @notice A mapping that contains the amount of token units placed in vesting for a specific account\r\n    * @dev The TGE event may continue to affect other components of the protocol even after its completion and status change to \"Successful\" and, less frequently, \"Failed\". Vesting can be set up to distribute tokens over a significant period of time after the end of the TGE.\r\n    The vesting time calculation begins with the block ending the TGE. The calculation of uniform time intervals is carried out either from the end of the cliff period block or each subsequent interval is counted from the end of the previous block.\r\n    The Vesting.unlockedBalanceOf method shows how much of the tokens for a particular TGE may be available for a claim by an address if that address has not requested a withdrawal of any amount of tokens. The Vesting.claimableBalanceOf method shows how many tokens in total within a particular TGE an address has already requested and successfully received for withdrawal. Subtracting the second value from the first using the same arguments for method calls will give you the number of tokens currently available for withdrawal by that address.\r\n    Additionally, one of the conditions for unlocking tokens under the vesting program can be setting a cumulative pool balance of a specified amount. The compliance with this condition starts to be tracked by the backend, and as soon as the pool balance reaches or exceeds the specified amount even for a moment, the backend, on behalf of the wallet with the SERVICE_MANAGER role, sends a transaction to the vesting contract's setClaimTVLReached(address tge) method. Executing this transaction changes the value of the flag in the mapping mapping(address => bool) with a key equal to the TGE address. Raising this flag is irreversible, meaning that a one-time occurrence of the condition guarantees that the token request now depends only on the second part of the conditions related to the passage of time. The calculation of the cliff period and additional distribution intervals is not related to raising this flag, both conditions are independent of each other, not mandatory for simultaneous use in settings, but mandatory for simultaneous compliance if they were used in one set of settings.\r\n    The vesting of one TGE does not affect the vesting of another TGE.\r\n    */\r\n    mapping(address => uint256) public vestedBalanceOf;\r\n\r\n    /// @dev Total number of tokens to be distributed within the vesting period\r\n    uint256 public totalVested;\r\n\r\n    /// @notice Protocol fee at the time of TGE creation\r\n    /// @dev Since the protocol fee can be changed, the actual value at the time of contract deployment is fixed in the contract's memory to avoid dependencies on future states of the Service contract.\r\n    uint256 public protocolFee;\r\n\r\n    /// @notice Protocol fee payment\r\n    /// @dev A flag that irreversibly becomes True after a successful transfer of the protocol fee to the address specified in the Service contract.\r\n    /// @dev Used only for Governance Token Generation Event.\r\n    bool public isProtocolTokenFeeClaimed;\r\n\r\n    /// @dev Total number of token units that make up the protocol fee\r\n    uint256 public totalProtocolFee;\r\n\r\n    /** \r\n    * @notice Vesting contract address\r\n    * @dev The TGE contract works closely with the Vesting contract, with a separate instance being issued for each token generation event, while there is only one Vesting contract. Together, they contain the most comprehensive information about a user's purchases, tokens in reserve but not yet issued, and the conditions for locking and unlocking tokens. Moreover, the TGE contract has a token buyback function under specific conditions (see the \"Redeem\" section for more details).\r\n    One TGE contract is used for the distribution of only one protocol token (the token contract address is specified when launching the TGE). At any given time, there can be only one active TGE for a single token.\r\n    */\r\n    IVesting public vesting;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted upon successful purchase (or distribution if the token unit price is 0)\r\n     * @param buyer Address of the token recipient (buyer)\r\n     * @param amount Number of token units acquired\r\n     */\r\n    event Purchased(address buyer, uint256 amount);\r\n\r\n    /**\r\n     * @dev Event emitted after successful claiming of the protocol fee\r\n     * @param token Address of the token contract\r\n     * @param tokenFee Amount of tokens transferred as payment for the protocol fee\r\n     */\r\n    event ProtocolTokenFeeClaimed(address token, uint256 tokenFee);\r\n\r\n    /**\r\n     * @dev Event emitted upon redeeming tokens in case of a failed TGE.\r\n     * @param account Redeemer address\r\n     * @param refundValue Refund value\r\n     */\r\n    event Redeemed(address account, uint256 refundValue);\r\n\r\n    /**\r\n     * @dev Event emitted upon transferring the raised funds to the pool contract address.\r\n     * @param amount Amount of tokens/ETH transferred\r\n     */\r\n    event FundsTransferred(uint256 amount);\r\n\r\n    event Refund(address account, uint256 amount);\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor function, can only be called once. In this method, settings for the TGE event are assigned, such as the contract of the token implemented using TGE, as well as the TGEInfo structure, which includes the parameters of purchase, vesting, and lockup. If no lockup or vesting conditions were set for the TVL value when creating the TGE, then the TVL achievement flag is set to true from the very beginning.\r\n     * @param _service Service contract\r\n     * @param _token TGE's token\r\n     * @param _tokenId TGE's tokenId\r\n     * @param _tokenId ERC1155TGE's tokenId (token series)\r\n     * @param _uri Metadata URL for the ERC1155 token collection\r\n     * @param _info TGE parameters\r\n     * @param _protocolFee Protocol fee snapshot\r\n     */\r\n    function initialize(\r\n        address _service,\r\n        address _token,\r\n        uint256 _tokenId,\r\n        string memory _uri,\r\n        TGEInfo calldata _info,\r\n        uint256 _protocolFee\r\n    ) external initializer {\r\n        __ReentrancyGuard_init();\r\n\r\n        //if tge is creating for erc20 token\r\n        tokenId = _tokenId;\r\n        if (tokenId == 0) {\r\n            IService(_service).validateTGEInfo(\r\n                _info,\r\n                IToken(_token).cap(),\r\n                IToken(_token).totalSupplyWithReserves(),\r\n                IToken(_token).tokenType()\r\n            );\r\n        } else {\r\n            //if tge is creating for erc155 token\r\n            if (ITokenERC1155(_token).cap(tokenId) != 0) {\r\n                IService(_service).validateTGEInfo(\r\n                    _info,\r\n                    ITokenERC1155(_token).cap(tokenId),\r\n                    ITokenERC1155(_token).totalSupplyWithReserves(tokenId),\r\n                    IToken(_token).tokenType()\r\n                );\r\n            } else {\r\n                ITokenERC1155(_token).setLastTokenId(_tokenId);\r\n                ITokenERC1155(_token).setURI(_tokenId, _uri);\r\n            }\r\n        }\r\n        vesting = IService(_service).vesting();\r\n        token = _token;\r\n\r\n        info = _info;\r\n        protocolFee = _protocolFee;\r\n        lockupTVLReached = (_info.lockupTVL == 0);\r\n\r\n        for (uint256 i = 0; i < _info.userWhitelist.length; i++) {\r\n            _isUserWhitelisted[_info.userWhitelist[i]] = true;\r\n        }\r\n\r\n        createdAt = block.number;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n    * @notice This method is used for purchasing pool tokens.\r\n    * @dev Any blockchain address can act as a buyer (TGE contract user) of tokens if the following conditions are met:\r\n    - active event status (TGE.sol:state method returns the Active code value / \"1\")\r\n    - the event is public (TGE.sol:info.Whitelist is empty) or the user's address is on the whitelist of addresses admitted to the event\r\n    - the number of tokens purchased by the address is not less than TGE.sol:minPurchase (a common rule for all participants) and not more than TGE.sol:maxPurchaseOf(address) (calculated individually for each address)\r\n    The TGEInfo of each such event also contains settings for the order in which token buyers receive their purchases and from when and to what extent they can start managing them.\r\n    However, in any case, each address that made a purchase is mentioned in the TGE.sol:purchaseOf[] mapping. This record serves as proof of full payment for the purchase and confirmation of the buyer's status, even if as a result of the transaction, not a single token was credited to the buyer's address.\r\n    After each purchase transaction, TGE.sol:purchase calculates what part of the purchase should be issued and immediately transferred to the buyer's balance, and what part should be left as a reserve (records, not issued tokens) in vesting until the prescribed settings for unlocking these tokens occur.\r\n     */\r\n    function purchase(\r\n        uint256 amount\r\n    )\r\n        external\r\n        payable\r\n        onlyWhitelistedUser\r\n        onlyState(State.Active)\r\n        nonReentrant\r\n        whenPoolNotPaused\r\n    {\r\n        // Check purchase price transfer depending on unit of account\r\n        address unitOfAccount = info.unitOfAccount;\r\n        uint256 purchasePrice = (amount * info.price + (1 ether - 1)) / 1 ether;\r\n        if (unitOfAccount == address(0)) {\r\n            require(\r\n                msg.value >= purchasePrice,\r\n                ExceptionsLibrary.INCORRECT_ETH_PASSED\r\n            );\r\n        } else {\r\n            IERC20Upgradeable(unitOfAccount).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                purchasePrice\r\n            );\r\n        }\r\n        this.proceedPurchase(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a token purchase for a given account using fiat during the token generation event (TGE).\r\n     * @dev The function can only be called by an executor, when the contract state is active, the pool is not paused, and ensures no reentrancy.\r\n     * @param account The address of the account to execute the purchase for.\r\n     * @param amount The amount of tokens to be purchased.\r\n     */\r\n\r\n    function externalPurchase(\r\n        address account,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyManager\r\n        onlyState(State.Active)\r\n        nonReentrant\r\n        whenPoolNotPaused\r\n    {\r\n        try this.proceedPurchase(account, amount) {\r\n            return;\r\n        } catch {\r\n            _refund(account, amount);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function _refund(address account, uint256 amount) private {\r\n        uint256 refundValue = (amount * info.price + (1 ether - 1)) / 1 ether;\r\n        if (info.unitOfAccount == address(0)) {\r\n            payable(msg.sender).sendValue(refundValue);\r\n        } else {\r\n            IERC20Upgradeable(info.unitOfAccount).safeTransfer(\r\n                msg.sender,\r\n                refundValue\r\n            );\r\n        }\r\n        emit Refund(account, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Redeem acquired tokens with a refund of the spent assets.\r\n    * @dev In the contract of an unsuccessful TGE, the redeem() method becomes active, allowing any token buyer to return them to the contract for subsequent burning. As a result of this transaction, the records of the user's purchases within this TGE will be zeroed out (or reduced), and the spent ETH or ERC20 tokens will be returned to their balance.\r\n    If the buyer has a record of tokens locked under the vesting program for this TGE, they will not be burned, and the record of the vesting payment will simply be deleted. In this case, the transaction will also end with a transfer of the spent funds back to the buyer.\r\n    The buyer cannot return more tokens than they purchased in this TGE; this contract keeps a record of the user's total purchase amount and reduces it with each call of the redeem token method. This can happen if the purchased tokens were distributed to other wallets, and after the end of the TGE, the buyer requests redemption after each transfer back to the purchase address.\r\n     */\r\n    function redeem()\r\n        external\r\n        onlyState(State.Failed)\r\n        nonReentrant\r\n        whenPoolNotPaused\r\n    {\r\n        // User can't claim more than he bought in this event (in case somebody else has transferred him tokens)\r\n        require(\r\n            purchaseOf[msg.sender] > 0,\r\n            ExceptionsLibrary.ZERO_PURCHASE_AMOUNT\r\n        );\r\n\r\n        uint256 refundAmount = 0;\r\n\r\n        // Calculate redeem from vesting\r\n        uint256 vestedBalance = vesting.vested(address(this), msg.sender);\r\n        if (vestedBalance > 0) {\r\n            // Account vested tokens\r\n            purchaseOf[msg.sender] -= vestedBalance;\r\n            refundAmount += vestedBalance;\r\n\r\n            // Cancel vesting\r\n            vesting.cancel(address(this), msg.sender);\r\n\r\n            // Decrease reserved tokens\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).setTGEVestedTokens(\r\n                    ITokenERC1155(token).getTotalTGEVestedTokens(tokenId) -\r\n                        vestedBalance,\r\n                    tokenId\r\n                );\r\n            } else {\r\n                IToken(token).setTGEVestedTokens(\r\n                    IToken(token).getTotalTGEVestedTokens() - vestedBalance\r\n                );\r\n            }\r\n        }\r\n\r\n        // Calculate redeemed balance\r\n        uint256 balanceToRedeem;\r\n        if (isERC1155TGE()) {\r\n            balanceToRedeem = MathUpgradeable.min(\r\n                ITokenERC1155(token).balanceOf(msg.sender, tokenId),\r\n                purchaseOf[msg.sender]\r\n            );\r\n        } else {\r\n            balanceToRedeem = MathUpgradeable.min(\r\n                IToken(token).balanceOf(msg.sender),\r\n                purchaseOf[msg.sender]\r\n            );\r\n        }\r\n        if (balanceToRedeem > 0) {\r\n            purchaseOf[msg.sender] -= balanceToRedeem;\r\n            refundAmount += balanceToRedeem;\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).burn(msg.sender, tokenId, balanceToRedeem);\r\n            } else {\r\n                IToken(token).burn(msg.sender, balanceToRedeem);\r\n            }\r\n        }\r\n\r\n        // Check that there is anything to refund\r\n        require(refundAmount > 0, ExceptionsLibrary.NOTHING_TO_REDEEM);\r\n\r\n        // Transfer refund value\r\n        uint256 refundValue = (refundAmount * info.price + (1 ether - 1)) /\r\n            1 ether;\r\n        if (info.unitOfAccount == address(0)) {\r\n            payable(msg.sender).sendValue(refundValue);\r\n        } else {\r\n            IERC20Upgradeable(info.unitOfAccount).safeTransfer(\r\n                msg.sender,\r\n                refundValue\r\n            );\r\n        }\r\n\r\n        // Decrease reserved protocol fee\r\n        uint256 tokenFee = getProtocolTokenFee(refundAmount);\r\n        if (tokenFee > 0) {\r\n            totalProtocolFee -= tokenFee;\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).setProtocolFeeReserved(\r\n                    ITokenERC1155(token).getTotalProtocolFeeReserved(tokenId) -\r\n                        tokenFee,\r\n                    tokenId\r\n                );\r\n            } else {\r\n                IToken(token).setProtocolFeeReserved(\r\n                    IToken(token).getTotalProtocolFeeReserved() - tokenFee\r\n                );\r\n            }\r\n        }\r\n\r\n        // Emit event\r\n        emit Redeemed(msg.sender, refundValue);\r\n    }\r\n\r\n    /// @dev Set the flag that the condition for achieving the pool balance of the value specified in the lockup settings is met. The action is irreversible.\r\n    function setLockupTVLReached()\r\n        external\r\n        whenPoolNotPaused\r\n        onlyManager\r\n        onlyState(State.Successful)\r\n    {\r\n        // Check that TVL has not been reached yet\r\n        require(!lockupTVLReached, ExceptionsLibrary.LOCKUP_TVL_REACHED);\r\n\r\n        // Mark as reached\r\n        lockupTVLReached = true;\r\n    }\r\n\r\n    // RESTRICTED FUNCTIONS\r\n\r\n    /**\r\n     * @dev This method is used to perform the following actions for a successful TGE after its completion: transfer funds collected from buyers in the form of info.unitofaccount tokens or ETH to the address of the pool to which TGE belongs (if info.price is 0, then this action is not performed), as well as for Governance tokens make a minting of the percentage of the amount of all user purchases specified in the Service.sol protocolTokenFee contract and transfer it to the address specified in the Service.sol contract in the protocolTreasury() getter. Can be executed only once. Any address can call the method.\r\n     */\r\n    function transferFunds()\r\n        external\r\n        onlyState(State.Successful)\r\n        whenPoolNotPaused\r\n    {\r\n        // Return if nothing to transfer\r\n        if (totalPurchased == 0) {\r\n            return;\r\n        }\r\n\r\n        // Claim protocol fee\r\n        _claimProtocolTokenFee();\r\n\r\n        // Transfer remaining funds to pool\r\n        address unitOfAccount = info.unitOfAccount;\r\n\r\n        address pool = IToken(token).pool();\r\n\r\n        uint256 balance = 0;\r\n        if (info.price != 0) {\r\n            if (unitOfAccount == address(0)) {\r\n                balance = address(this).balance;\r\n                payable(pool).sendValue(balance);\r\n            } else {\r\n                balance = IERC20Upgradeable(unitOfAccount).balanceOf(\r\n                    address(this)\r\n                );\r\n                IERC20Upgradeable(unitOfAccount).safeTransfer(pool, balance);\r\n            }\r\n        }\r\n\r\n        // Emit event\r\n        emit FundsTransferred(balance);\r\n\r\n        IToken(token).service().registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(ITGE.transferFunds.selector)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice This method is used to transfer funds raised during the TGE to the address of the pool contract that conducted the TGE.\r\n     * @dev The method can be called by any address. For safe execution, this method does not take any call arguments and only triggers for successful TGEs.\r\n     */\r\n    function _claimProtocolTokenFee() private {\r\n        // Return if already claimed\r\n        if (isProtocolTokenFeeClaimed) {\r\n            return;\r\n        }\r\n\r\n        // Return for preference token\r\n        if (IToken(token).tokenType() == IToken.TokenType.Preference) {\r\n            return;\r\n        }\r\n\r\n        // Mark fee as claimed\r\n        isProtocolTokenFeeClaimed = true;\r\n\r\n        // Mint fee to treasury\r\n        uint256 tokenFee = totalProtocolFee;\r\n        if (totalProtocolFee > 0) {\r\n            totalProtocolFee = 0;\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).mint(\r\n                    ITokenERC1155(token).service().protocolTreasury(),\r\n                    tokenId,\r\n                    tokenFee\r\n                );\r\n                ITokenERC1155(token).setProtocolFeeReserved(\r\n                    ITokenERC1155(token).getTotalProtocolFeeReserved(tokenId) -\r\n                        tokenFee,\r\n                    tokenId\r\n                );\r\n            } else {\r\n                IToken(token).mint(\r\n                    IToken(token).service().protocolTreasury(),\r\n                    tokenFee\r\n                );\r\n                IToken(token).setProtocolFeeReserved(\r\n                    IToken(token).getTotalProtocolFeeReserved() - tokenFee\r\n                );\r\n            }\r\n        }\r\n\r\n        // Emit event\r\n        emit ProtocolTokenFeeClaimed(token, tokenFee);\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev Shows the maximum possible number of tokens to be purchased by a specific address, taking into account whether the user is on the white list and 0 what amount of purchases he made within this TGE.\r\n     * @return Amount of tokens\r\n     */\r\n    function maxPurchaseOf(address account) public view returns (uint256) {\r\n        if (!isUserWhitelisted(account)) {\r\n            return 0;\r\n        }\r\n        return\r\n            MathUpgradeable.min(\r\n                info.maxPurchase - purchaseOf[account],\r\n                info.hardcap - totalPurchased\r\n            );\r\n    }\r\n\r\n    /**\r\n    * @notice A state of a Token Generation Event\r\n    * @dev A TGE event can be in one of the following states:\r\n    - Active\r\n    - Failed\r\n    - Successful\r\n    In TGEInfo, the three most important parameters used to determine the event's state are specified:\r\n    - hardcap - the maximum number of tokens that can be distributed during the event (the value is stored considering the token's Decimals)\r\n    - softcap - the minimum expected number of tokens that should be distributed during the event (the value is stored considering the token's Decimals)\r\n    - duration - the duration of the event (the number of blocks since the TGE deployment transaction)\r\n    A successful outcome of the event and the assignment of the \"Successful\" status to the TGE occurs if:\r\n    - no fewer than duration blocks have passed since the TGE launch, and no fewer than softcap tokens have been acquired\r\n    OR\r\n    - 100% of the hardcap tokens have been acquired at any point during the event\r\n    If no fewer than duration blocks have passed since the TGE launch and fewer than softcap tokens have been acquired, the event is considered \"Failed\".\r\n    If fewer than 100% of the hardcap tokens have been acquired, but fewer than duration blocks have passed since the TGE launch, the event is considered \"Active\".\r\n     * @return State code\r\n     */\r\n    function state() public view returns (State) {\r\n        // If hardcap is reached TGE is successfull\r\n        if (totalPurchased == info.hardcap) {\r\n            return State.Successful;\r\n        }\r\n\r\n        // If deadline not reached TGE is active\r\n        if (block.number < createdAt + info.duration) {\r\n            return State.Active;\r\n        }\r\n\r\n        // If it's not primary TGE it's successfull (if anything is purchased)\r\n        if (isERC1155TGE()) {\r\n            if (\r\n                address(this) != ITokenERC1155(token).getTGEList(tokenId)[0] &&\r\n                totalPurchased > 0\r\n            ) {\r\n                return State.Successful;\r\n            }\r\n        } else {\r\n            if (\r\n                address(this) != IToken(token).getTGEList()[0] &&\r\n                totalPurchased > 0\r\n            ) {\r\n                return State.Successful;\r\n            }\r\n        }\r\n\r\n        // If softcap is reached TGE is successfull\r\n        if (totalPurchased >= info.softcap && totalPurchased > 0) {\r\n            return State.Successful;\r\n        }\r\n\r\n        // Otherwise it's failed primary TGE\r\n        return State.Failed;\r\n    }\r\n\r\n    /**\r\n     * @notice The given getter shows whether the transfer method is available for tokens that were distributed using a specific TGE contract. If the lockup period is over or if the lockup was not provided for this TGE, the getter always returns true.\r\n     * @dev In contrast to vesting, lockup contains a simplified system of conditions (no additional distribution spread over equal time intervals), affects tokens located in the contract address, and does not involve actions related to minting or burning tokens.\r\n    To configure lockup in TGEInfo, only two settings are specified: \"lockupDuration\" and \"lockupTVL\" (pool balance). The lockup duration is counted from the TGE creation block.\r\n    Lockup locks the transfer of tokens purchased during the TGE for a period equal to the lockupDuration blocks and does not allow unlocking until the pool balance reaches lockupTVL. The address can use these tokens for Governance activities; they are on the balance and counted as votes.\r\n    Unlocking by TVL occurs with a transaction similar to vesting. The SERVICE_MANAGER address can send a setLockupTVLReached() transaction to the TGE contract, which irreversibly changes the value of this condition flag to \"true\".\r\n    Vesting and lockup are completely parallel entities. Tokens can be unlocked under the lockup program but remain in vesting. The lockup of one TGE does not affect the lockup of another TGE.\r\n     * @return bool Is transfer available\r\n     */\r\n    function transferUnlocked() public view returns (bool) {\r\n        return\r\n            lockupTVLReached && block.number >= createdAt + info.lockupDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the number of TGE tokens blocked in this contract. If the lockup is completed or has not been assigned, the method returns 0 (all tokens on the address balance are available for transfer). If the lockup period is still active, then the difference between the tokens purchased by the user and those in the vesting is shown (both parameters are only for this TGE).\r\n     * @param account Account address\r\n     * @return Locked balance\r\n     */\r\n    function lockedBalanceOf(address account) external view returns (uint256) {\r\n        return\r\n            transferUnlocked()\r\n                ? 0\r\n                : (purchaseOf[account] -\r\n                    vesting.vestedBalanceOf(address(this), account));\r\n    }\r\n\r\n    /**\r\n     * @dev Shows the number of TGE tokens available for redeem for `account`\r\n     * @param account Account address\r\n     * @return Redeemable balance of the address\r\n     */\r\n    function redeemableBalanceOf(\r\n        address account\r\n    ) external view returns (uint256) {\r\n        if (purchaseOf[account] == 0) return 0;\r\n        if (state() != State.Failed) return 0;\r\n\r\n        if (isERC1155TGE()) {\r\n            return\r\n                MathUpgradeable.min(\r\n                    ITokenERC1155(token).balanceOf(account, tokenId) +\r\n                        vesting.vestedBalanceOf(address(this), account),\r\n                    purchaseOf[account]\r\n                );\r\n        } else {\r\n            return\r\n                MathUpgradeable.min(\r\n                    IToken(token).balanceOf(account) +\r\n                        vesting.vestedBalanceOf(address(this), account),\r\n                    purchaseOf[account]\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The given getter shows how much info.unitofaccount was collected within this TGE. To do this, the amount of tokens purchased by all buyers is multiplied by info.price.\r\n     * @return uint256 Total value\r\n     */\r\n    function getTotalPurchasedValue() public view returns (uint256) {\r\n        return (totalPurchased * info.price) / 10 ** 18;\r\n    }\r\n\r\n    /**\r\n     * @dev This getter shows the total value of all tokens that are in the vesting. Tokens that were transferred to user’s wallet addresses upon request for successful TGEs and that were burned as a result of user funds refund for unsuccessful TGEs are not taken into account.\r\n     * @return uint256 Total value\r\n     */\r\n    function getTotalVestedValue() public view returns (uint256) {\r\n        return (vesting.totalVested(address(this)) * info.price) / 10 ** 18;\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the full list of addresses allowed to participate in the TGE.\r\n     * @return address An array of whitelist addresses\r\n     */\r\n    function getUserWhitelist() external view returns (address[] memory) {\r\n        return info.userWhitelist;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if user is whitelisted.\r\n     * @param account User address\r\n     * @return 'True' if the whitelist is empty (public TGE) or if the address is found in the whitelist, 'False' otherwise.\r\n     */\r\n    function isUserWhitelisted(address account) public view returns (bool) {\r\n        return info.userWhitelist.length == 0 || _isUserWhitelisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev This method indicates whether this event was launched to implement ERC1155 tokens.\r\n     * @return bool Flag if ERC1155 TGE\r\n     */\r\n    function isERC1155TGE() public view returns (bool) {\r\n        return tokenId == 0 ? false : true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the block number at which the event ends.\r\n     * @return uint256 Block number\r\n     */\r\n    function getEnd() external view returns (uint256) {\r\n        return createdAt + info.duration;\r\n    }\r\n\r\n    /**\r\n    * @notice This method returns the immutable settings with which the TGE was launched.\r\n    * @dev The rules for conducting an event are defined in the TGEInfo structure, which is passed within the calldata when calling one of the TGEFactory contract functions responsible for launching the TGE. For more information about the structure, see the \"Interfaces\" section. The variables mentioned below should be understood as attributes of the TGEInfo structure.\r\n    A TGE can be public or private. To make the event public, simply leave the whitelist empty.\r\n    The TGE contract can act as an airdrop - a free token distribution. To do this, set the price value to zero.\r\n    To create a DAO with a finite number of participants, each of whom should receive an equal share of tokens, you can set the whitelist when launching the TGE as a list of the participants' addresses, and set both minPurchase and maxPurchase equal to the expression (hardcap / number of participants). To make the pool obtain DAO status only if the distribution is successful under such conditions for all project participants, you can set the softcap value equal to the hardcap. With these settings, the company will become a DAO only if all the initial participants have an equal voting power.\r\n    * @return The settings in the form of a TGEInfo structure\r\n    */\r\n    function getInfo() external view returns (TGEInfo memory) {\r\n        return info;\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the number of tokens that are currently due as protocol fees during the TGE.\r\n     * @return The number of tokens\r\n     */\r\n    function getProtocolTokenFee(uint256 amount) public view returns (uint256) {\r\n        if (IToken(token).tokenType() == IToken.TokenType.Preference) {\r\n            return 0;\r\n        }\r\n        return (amount * protocolFee + (DENOM - 1)) / DENOM;\r\n    }\r\n\r\n    /// @notice Determine if a purchase is valid for a specific account and amount.\r\n    /// @dev Returns true if the amount is within the permitted purchase range for the account.\r\n    /// @param account The address of the account to validate the purchase for.\r\n    /// @param amount The amount of the purchase to validate.\r\n    /// @return A boolean value indicating if the purchase is valid.\r\n    function validatePurchase(\r\n        address account,\r\n        uint256 amount\r\n    ) public view returns (bool) {\r\n        return amount >= info.minPurchase && amount <= maxPurchaseOf(account);\r\n    }\r\n\r\n    //PRIVATE FUNCTIONS\r\n\r\n    function proceedPurchase(address account, uint256 amount) public {\r\n        require(msg.sender == address(this), ExceptionsLibrary.INVALID_USER);\r\n\r\n        require(\r\n            validatePurchase(account, amount),\r\n            ExceptionsLibrary.INVALID_PURCHASE_AMOUNT\r\n        );\r\n\r\n        // Accrue TGE stats\r\n        totalPurchased += amount;\r\n        purchaseOf[account] += amount;\r\n\r\n        // Mint tokens directly to user\r\n        uint256 vestedAmount = (amount *\r\n            info.vestingParams.vestedShare +\r\n            (DENOM - 1)) / DENOM;\r\n\r\n        if (amount - vestedAmount > 0) {\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).mint(\r\n                    account,\r\n                    tokenId,\r\n                    amount - vestedAmount\r\n                );\r\n            } else {\r\n                IToken(token).mint(account, amount - vestedAmount);\r\n            }\r\n        }\r\n\r\n        // Vest tokens\r\n        if (vestedAmount > 0) {\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).setTGEVestedTokens(\r\n                    ITokenERC1155(token).getTotalTGEVestedTokens(tokenId) +\r\n                        vestedAmount,\r\n                    tokenId\r\n                );\r\n            } else {\r\n                IToken(token).setTGEVestedTokens(\r\n                    IToken(token).getTotalTGEVestedTokens() + vestedAmount\r\n                );\r\n            }\r\n\r\n            vesting.vest(account, vestedAmount);\r\n        }\r\n\r\n        // Increase reserved protocol fee\r\n        uint256 tokenFee = getProtocolTokenFee(amount);\r\n        if (tokenFee > 0) {\r\n            totalProtocolFee += tokenFee;\r\n            if (isERC1155TGE()) {\r\n                ITokenERC1155(token).setProtocolFeeReserved(\r\n                    ITokenERC1155(token).getTotalProtocolFeeReserved(tokenId) +\r\n                        tokenFee,\r\n                    tokenId\r\n                );\r\n            } else {\r\n                IToken(token).setProtocolFeeReserved(\r\n                    IToken(token).getTotalProtocolFeeReserved() + tokenFee\r\n                );\r\n            }\r\n        }\r\n\r\n        // Emit event\r\n        emit Purchased(account, amount);\r\n\r\n        IToken(token).service().registry().log(\r\n            account,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(ITGE.purchase.selector, amount)\r\n        );\r\n    }\r\n\r\n    // MODIFIER\r\n\r\n    /// @notice Modifier that allows the method to be called only if the TGE state is equal to the specified state.\r\n    modifier onlyState(State state_) {\r\n        require(state() == state_, ExceptionsLibrary.WRONG_STATE);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by an account that is whitelisted for the TGE or if the TGE is created as public.\r\n    modifier onlyWhitelistedUser() {\r\n        require(\r\n            isUserWhitelisted(msg.sender),\r\n            ExceptionsLibrary.NOT_WHITELISTED\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by an account that has the ADMIN role in the Service contract.\r\n    modifier onlyManager() {\r\n        IService service = IToken(token).service();\r\n        require(\r\n            service.hasRole(service.SERVICE_MANAGER_ROLE(), msg.sender),\r\n            ExceptionsLibrary.NOT_WHITELISTED\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only if the pool associated with the event is not in a paused state.\r\n    modifier whenPoolNotPaused() {\r\n        require(\r\n            !IPausable(IToken(token).pool()).paused(),\r\n            ExceptionsLibrary.SERVICE_PAUSED\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyCompanyManager() {\r\n        IRegistry registry = IToken(token).service().registry();\r\n        require(\r\n            registry.hasRole(registry.COMPANIES_MANAGER_ROLE(), msg.sender),\r\n            ExceptionsLibrary.NOT_WHITELISTED\r\n        );\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/TGEFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/ITGEFactory.sol\";\r\nimport \"./interfaces/governor/IGovernanceSettings.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\n/**\r\n * @title TGE Factory contract\r\n * @notice Event emitted on creation of primary TGE.\r\n * @dev Deployment of a TGE can occur both within the execution of transactions prescribed by a proposal, and during the execution of a transaction initiated by the pool owner, who has not yet become a DAO.\r\n */\r\ncontract TGEFactory is ReentrancyGuardUpgradeable, ITGEFactory {\r\n    // STORAGE\r\n\r\n    /// @notice Service contract address\r\n    IService public service;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n     * @dev Event emitted when the primary TGE contract is deployed.\r\n     * @param pool Address of the pool for which the TGE is launched.\r\n     * @param tge Address of the deployed TGE contract.\r\n     * @param token Address of the token contract.\r\n     */\r\n    event PrimaryTGECreated(address pool, address tge, address token);\r\n\r\n    /**\r\n     * @dev Event emitted when a secondary TGE contract operating with ERC20 tokens is deployed.\r\n     * @param pool Address of the pool for which the TGE is launched.\r\n     * @param tge Address of the deployed TGE contract.\r\n     * @param token Address of the ERC20 token contract.\r\n     */\r\n    event SecondaryTGECreated(address pool, address tge, address token);\r\n\r\n    /**\r\n     * @dev Event emitted when a secondary TGE contract operating with ERC1155 tokens is * deployed.\r\n     * @param pool Address of the pool for which the TGE is launched.*\r\n     * @param tge Address of the deployed TGE contract.*\r\n     * @param token Address of the ERC1155 token contract.*\r\n     * @param tokenId Identifier of the ERC1155 token collection.\r\n     */\r\n    event SecondaryTGEERC1155Created(\r\n        address pool,\r\n        address tge,\r\n        address token,\r\n        uint256 tokenId\r\n    );\r\n\r\n    // MODIFIERS\r\n    /// @notice Modifier that allows the method to be called only by the Pool contract.\r\n    modifier onlyPool() {\r\n        require(\r\n            service.registry().typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.Pool,\r\n            ExceptionsLibrary.NOT_POOL\r\n        );\r\n        _;\r\n    }\r\n    /// @notice Modifier that allows the method to be called only if the Service contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(!service.paused(), ExceptionsLibrary.SERVICE_PAUSED);\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @notice Contract initializer\r\n     * @dev This method replaces the constructor for upgradeable contracts. It also sets the address of the Service contract in the contract's storage.\r\n     * @param service_ The address of the Service contract.\r\n     */\r\n    function initialize(IService service_) external initializer {\r\n        __ReentrancyGuard_init();\r\n        service = service_;\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @dev This method is used to launch the primary TGE of the Governance token. When launching such a TGE, a new Token contract is deployed with TokenType = \"Governance\". If this TGE is successful, it will no longer be possible to repeat such a launch, and the created token will irreversibly become the Governance token of the pool.\r\n     * @dev Simultaneously with contract deployment, Governance Settings and lists of secretaries and executors are set.\r\n     * @param poolAddress Pool address.\r\n     * @param tokenInfo New token parameters (token type, decimals & description are ignored)\r\n     * @param tgeInfo Pool TGE parameters\r\n     * @param metadataURI Metadata URI\r\n     * @param governanceSettings_ Set of Governance settings\r\n     * @param secretary Secretary address\r\n     * @param executor Executor address\r\n     */\r\n    function createPrimaryTGE(\r\n        address poolAddress,\r\n        IToken.TokenInfo memory tokenInfo,\r\n        ITGE.TGEInfo memory tgeInfo,\r\n        string memory metadataURI,\r\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\r\n        address[] memory secretary,\r\n        address[] memory executor\r\n    ) external nonReentrant whenNotPaused {\r\n        // Check that sender is pool owner\r\n        IPool pool = IPool(poolAddress);\r\n        require(pool.owner() == msg.sender, ExceptionsLibrary.NOT_POOL_OWNER);\r\n\r\n        // Check token cap\r\n        require(tokenInfo.cap >= 1 ether, ExceptionsLibrary.INVALID_CAP);\r\n\r\n        // Check that pool is not active yet\r\n        require(\r\n            address(pool.getGovernanceToken()) == address(0) || !pool.isDAO(),\r\n            ExceptionsLibrary.GOVERNANCE_TOKEN_EXISTS\r\n        );\r\n        pool.setSettings(governanceSettings_, secretary, executor);\r\n\r\n        // Create TGE contract\r\n        ITGE tge = _createTGE(metadataURI, address(pool));\r\n\r\n        // Create token contract\r\n        tokenInfo.tokenType = IToken.TokenType.Governance;\r\n        tokenInfo.decimals = 18;\r\n        address token = service.tokenFactory().createToken(\r\n            address(pool),\r\n            tokenInfo,\r\n            address(tge)\r\n        );\r\n\r\n        // Set token as pool token\r\n        pool.setToken(address(token), IToken.TokenType.Governance);\r\n\r\n        // Initialize TGE\r\n        tge.initialize(\r\n            address(service),\r\n            address(token),\r\n            0,\r\n            \"\",\r\n            tgeInfo,\r\n            service.protocolTokenFee()\r\n        );\r\n        emit PrimaryTGECreated(address(pool), address(tge), address(token));\r\n\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                ITGEFactory.createPrimaryTGE.selector,\r\n                poolAddress,\r\n                tokenInfo,\r\n                tgeInfo,\r\n                metadataURI,\r\n                governanceSettings_,\r\n                secretary,\r\n                executor\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev This method allows users to launch primary and secondary TGEs for Governance and Preference tokens deployed based on the ERC20 contract. The creation of a token occurs if the TGE involves the distribution of a previously nonexistent Preference token. Launch is only possible by executing a successful proposal.\r\n     * @param token ERC20 token address for distribution in the TGE\r\n     * @param tgeInfo TGE parameters\r\n     * @param tokenInfo Token parameters\r\n     * @param metadataURI Metadata URI\r\n     */\r\n    function createSecondaryTGE(\r\n        address token,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) external onlyPool nonReentrant whenNotPaused {\r\n        ITGE tge;\r\n        // Check whether it's initial preference TGE or any secondary token\r\n        if (\r\n            tokenInfo.tokenType == IToken.TokenType.Preference &&\r\n            address(token) == address(0)\r\n        ) {\r\n            (token, tge) = _createInitialPreferenceTGE(\r\n                0,\r\n                \"\",\r\n                tgeInfo,\r\n                tokenInfo,\r\n                metadataURI\r\n            );\r\n        } else {\r\n            (token, tge) = _createSecondaryTGE(\r\n                token,\r\n                0,\r\n                \"\",\r\n                tgeInfo,\r\n                tokenInfo,\r\n                metadataURI\r\n            );\r\n        }\r\n\r\n        // Add proposal id to TGE\r\n        IPool(msg.sender).setProposalIdToTGE(address(tge));\r\n\r\n        // Emit event\r\n        emit SecondaryTGECreated(msg.sender, address(tge), address(token));\r\n    }\r\n\r\n    /**\r\n     * @dev This method launches a secondary TGE for a specified series of ERC1155 Preference tokens. If an unused series is being used, the maximum cap for this series is determined within this transaction. If no token address is specified, a new ERC1155 Preference token contract is deployed.\r\n     * @param token ERC1155 token address for distribution in the TGE\r\n     * @param tokenId ERC1155 token collection address for distribution of units in the TGE\r\n     * @param uri Metadata URI according to the ERC1155 specification\r\n     * @param tgeInfo TGE parameters\r\n     * @param tokenInfo Token parameters\r\n     * @param metadataURI Metadata URI\r\n     */\r\n    function createSecondaryTGEERC1155(\r\n        address token,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) external onlyPool nonReentrant whenNotPaused {\r\n        require(\r\n            tokenInfo.tokenType == IToken.TokenType.Preference,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n        ITGE tge;\r\n        // Check whether it's initial preference TGE or any secondary token\r\n        if (address(token) == address(0)) {\r\n            (token, tge) = _createInitialPreferenceTGE(\r\n                tokenId,\r\n                uri,\r\n                tgeInfo,\r\n                tokenInfo,\r\n                metadataURI\r\n            );\r\n        } else {\r\n            if (tokenId == 0) tokenId = ITokenERC1155(token).lastTokenId();\r\n            (token, tge) = _createSecondaryTGE(\r\n                token,\r\n                tokenId,\r\n                uri,\r\n                tgeInfo,\r\n                tokenInfo,\r\n                metadataURI\r\n            );\r\n        }\r\n        if (ITokenERC1155(token).cap(tokenId) == 0) {\r\n            ITokenERC1155(token).setTokenIdCap(tokenId, tokenInfo.cap);\r\n        }\r\n\r\n        // Add proposal id to TGE\r\n        IPool(msg.sender).setProposalIdToTGE(address(tge));\r\n\r\n        // Emit event\r\n        emit SecondaryTGEERC1155Created(\r\n            msg.sender,\r\n            address(tge),\r\n            address(token),\r\n            tokenId\r\n        );\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    function _createSecondaryTGE(\r\n        address token,\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) internal returns (address, ITGE) {\r\n        // Check that token is valid\r\n        require(\r\n            tokenInfo.tokenType != IToken.TokenType.None &&\r\n                IPool(msg.sender).tokenTypeByAddress(address(token)) ==\r\n                tokenInfo.tokenType,\r\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\r\n        );\r\n\r\n        // Check that there is no active TGE\r\n        if (tokenId != 0) {\r\n            require(\r\n                ITokenERC1155(token).cap(tokenId) == 0 ||\r\n                    ITGE(ITokenERC1155(token).lastTGE(tokenId)).state() !=\r\n                    ITGE.State.Active,\r\n                ExceptionsLibrary.ACTIVE_TGE_EXISTS\r\n            );\r\n        } else {\r\n            require(\r\n                ITGE(IToken(token).lastTGE()).state() != ITGE.State.Active,\r\n                ExceptionsLibrary.ACTIVE_TGE_EXISTS\r\n            );\r\n        }\r\n        // Create TGE\r\n        ITGE tge = _createTGE(metadataURI, msg.sender);\r\n\r\n        // Add TGE to token's list\r\n        if (tokenId != 0) {\r\n            ITokenERC1155(token).addTGE(address(tge), tokenId);\r\n        } else {\r\n            IToken(token).addTGE(address(tge));\r\n        }\r\n        // Get protocol fee\r\n        uint256 protocolTokenFee = tokenInfo.tokenType ==\r\n            IToken.TokenType.Governance\r\n            ? service.protocolTokenFee()\r\n            : 0;\r\n\r\n        // Initialize TGE\r\n        tge.initialize(\r\n            address(service),\r\n            address(token),\r\n            tokenId,\r\n            uri,\r\n            tgeInfo,\r\n            protocolTokenFee\r\n        );\r\n\r\n        return (token, tge);\r\n    }\r\n\r\n    /**\r\n     * @dev This internal method implements the logic of launching a TGE for Preference tokens that do not yet have their own contract.\r\n     * @param tokenId ERC1155 token collection address for distribution of units in the TGE\r\n     * @param uri Metadata URI according to the ERC1155 specification\r\n     * @param tgeInfo TGE parameters\r\n     * @param tokenInfo Token parameters\r\n     * @param metadataURI Metadata URI\r\n     */\r\n    function _createInitialPreferenceTGE(\r\n        uint256 tokenId,\r\n        string memory uri,\r\n        ITGE.TGEInfo calldata tgeInfo,\r\n        IToken.TokenInfo calldata tokenInfo,\r\n        string memory metadataURI\r\n    ) internal returns (address, ITGE) {\r\n        // Create TGE\r\n        ITGE tge = _createTGE(metadataURI, msg.sender);\r\n        address token;\r\n        if (tokenId != 0) {\r\n            // Create token contract\r\n            token = address(\r\n                service.tokenFactory().createTokenERC1155(\r\n                    msg.sender,\r\n                    tokenInfo,\r\n                    address(tge)\r\n                )\r\n            );\r\n        } else {\r\n            // Create token contract\r\n            token = address(\r\n                service.tokenFactory().createToken(\r\n                    msg.sender,\r\n                    tokenInfo,\r\n                    address(tge)\r\n                )\r\n            );\r\n        }\r\n\r\n        // Add token to Pool\r\n        IPool(msg.sender).setToken(token, IToken.TokenType.Preference);\r\n\r\n        // Initialize TGE\r\n        tge.initialize(address(service), token, tokenId, uri, tgeInfo, 0);\r\n\r\n        return (token, tge);\r\n    }\r\n\r\n    /**\r\n     * @dev This method deploys the TGE contract and returns its address after creation.\r\n     * @param metadataURI TGE metadata URI\r\n     * @param pool Pool address\r\n     * @return tge TGE contract\r\n     */\r\n    function _createTGE(\r\n        string memory metadataURI,\r\n        address pool\r\n    ) internal returns (ITGE tge) {\r\n        // Create TGE contract\r\n        tge = ITGE(address(new BeaconProxy(service.tgeBeacon(), \"\")));\r\n\r\n        // Add TGE contract to registry\r\n        service.registry().addContractRecord(\r\n            address(tge),\r\n            IRecordsRegistry.ContractType.TGE,\r\n            metadataURI\r\n        );\r\n\r\n        // Add TGE event to registry\r\n        service.registry().addEventRecord(\r\n            pool,\r\n            IRecordsRegistry.EventType.TGE,\r\n            address(tge),\r\n            0,\r\n            \"\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20CappedUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n/**\r\n * @title Company (Pool) Token\r\n * @notice Tokens are the primary quantitative characteristic of all entities within the protocol. In addition to their inherent function as a unit of calculation, tokens can also be used as votes and as a unit indicating the degree of participation of an address in an off-chain or on-chain pool project. Tokens of any type can only be issued within the framework of a TGE (Token Generation Event), and by using vesting settings, such a TGE can divide the issuance of purchased or airdropped tokens into stages, as well as temporarily block the ability to transfer them from one address to another.\r\n * @dev An expanded ERC20 contract, based on which tokens of various types are issued. At the moment, the protocol provides for 2 types of tokens: Governance, which must be created simultaneously with the pool, existing for the pool only in the singular and participating in voting, and Preference, which may be several for one pool and which do not participate in voting in any way.\r\n */\r\ncontract Token is ERC20CappedUpgradeable, ERC20VotesUpgradeable, IToken {\r\n    /// @dev Service contract address\r\n    IService public service;\r\n\r\n    /// @dev Pool contract address\r\n    address public pool;\r\n\r\n    /**\r\n    * @notice Token type code\r\n    * @dev Code \"1\" - Governance Token is the main token of the pool, compatible with the ERC20 standard. One such token is equal to one vote. One pool can only have one contract of this type of token. When the primary TGE is launched, dedicated to the distribution of this type of token, the token is only a candidate for the Governance role.\r\n    In case of a successful TGE, it remains the Governance token of the pool forever.\r\n    In case of a failed TGE, it carries no weight and voting power for Governance procedures; another token can be appointed in its place through a repeated primary TGE. The cap is set once during the launch of the primary TGE.\r\n    During each TGE, an additional issuance of Service:ProtocolTokenFee percent of the total volume of tokens distributed during the event takes place and is transferred to the balance of the Service:ProtocolTreasury address.\r\n    * @dev Code \"2\" - Preference Token is an additional pool token, compatible with the ERC20 standard. It does not have voting power. One pool can have multiple independent and non-interacting tokens of this type.\r\n    In case of a successful TGE, it is recognized by the pool as a Preference token forever.\r\n    In case of a failed TGE, the pool forgets about such a token, not recognizing it as a Preference token.\r\n    The cap is set once during the launch of the primary TGE.\r\n    */\r\n    TokenType public tokenType;\r\n\r\n    /// @dev Preference token description, allows up to 5000 characters, for others - \"\"\r\n    string public description;\r\n\r\n    /// @notice All TGEs associated with this token\r\n    /// @dev A list of TGE contract addresses that have been launched to distribute this token. If any of the elements in the list have a \"Successful\" state, it means that the token is valid and used by the pool. If there are no such TGEs, the token can be considered unsuccessful, meaning it is detached from the pool.\r\n    address[] public tgeList;\r\n\r\n    /// @notice Token decimals\r\n    /// @dev This parameter is mandatory for all ERC20 tokens and is set to 18 by default. It indicates the precision applied when calculating a particular token. It can also be said that 10 raised to the power of minus decimal is the minimum indivisible amount of the token.\r\n    uint8 private _decimals;\r\n\r\n    /// @dev Total Vested tokens for all TGEs\r\n    uint256 private totalVested;\r\n\r\n    /// @dev List of all TGEs with locked tokens\r\n    address[] private tgeWithLockedTokensList;\r\n\r\n    /// @dev Total amount of tokens reserved for the minting protocol fee\r\n    uint256 private totalProtocolFeeReserved;\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Token creation, can only be started once. At the same time, the TGE contract, which sells the created token, is necessarily simultaneously deployed and receives an entry in the Registry. For the Governance token, the Name field for the ERC20 standard is taken from the trademark of the Pool contract to which the deployed token belongs. For Preference tokens, you can set an arbitrary value of the Name field.\r\n     * @param service_ The address of the Service contract\r\n     * @param pool_ The address of the pool contract\r\n     * @param info The token parameters, including its type, in the form of a structure described in the TokenInfo method\r\n     * @param primaryTGE_ The address of the primary TGE for this token\r\n     */\r\n    function initialize(\r\n        IService service_,\r\n        address pool_,\r\n        TokenInfo memory info,\r\n        address primaryTGE_\r\n    ) external initializer {\r\n        __ERC20Capped_init(info.cap);\r\n\r\n        description = info.description;\r\n\r\n        if (info.tokenType == TokenType.Preference) {\r\n            __ERC20_init(info.name, info.symbol);\r\n            _decimals = info.decimals;\r\n        } else {\r\n            __ERC20_init(info.name, info.symbol);\r\n        }\r\n        tgeList.push(primaryTGE_);\r\n        tgeWithLockedTokensList.push(primaryTGE_);\r\n        tokenType = info.tokenType;\r\n        service = service_;\r\n        pool = pool_;\r\n    }\r\n\r\n    // RESTRICTED FUNCTIONS\r\n\r\n    /**\r\n     * @dev Minting of new tokens. Only the TGE or Vesting contract can mint tokens, there is no other way to get an additional issue. If the user who is being minted does not have tokens, they are sent to delegation on his behalf.\r\n     * @param to The address of the account for which new token units are being minted\r\n     * @param amount The number of tokens being minted\r\n     */\r\n    function mint(address to, uint256 amount) external onlyTGEOrVesting {\r\n        // Delegate to self if first mint and no delegatee set\r\n        if (tokenType == IToken.TokenType.Governance) {\r\n            if (balanceOf(to) == 0 && delegates(to) == address(0))\r\n                _delegate(to, to);\r\n        }\r\n\r\n        // Mint tokens\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Method for burning tokens. It can be called by both the token owner and the TGE contract to burn returned tokens during redeeming.\r\n     * @param from The address of the account\r\n     * @param amount The amount of tokens\r\n     */\r\n    function burn(address from, uint256 amount) external whenPoolNotPaused {\r\n        // Check that sender is valid\r\n        require(\r\n            service.registry().typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.TGE ||\r\n                msg.sender == from,\r\n            ExceptionsLibrary.INVALID_USER\r\n        );\r\n\r\n        // Burn tokens\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This method adds the TGE contract address to the TGEList of this token.\r\n     * @param tge The TGE address\r\n     */\r\n    function addTGE(address tge) external onlyTGEFactory {\r\n        tgeList.push(tge);\r\n        tgeWithLockedTokensList.push(tge);\r\n    }\r\n\r\n    /**\r\n     * @dev This method modifies the number of token units that are vested and reserved for claiming by users.\r\n     * @param amount The amount of tokens\r\n     */\r\n    function setTGEVestedTokens(uint256 amount) external onlyTGEOrVesting {\r\n        totalVested = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This method modifies the number of token units that are reserved as protocol fee.\r\n     * @param amount The amount of tokens\r\n     */\r\n    function setProtocolFeeReserved(uint256 amount) external onlyTGE {\r\n        totalProtocolFeeReserved = amount;\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev This method returns the precision level for the fractional parts of this token.\r\n     * @return Decimals\r\n     */\r\n    function decimals()\r\n        public\r\n        view\r\n        override(ERC20Upgradeable, IToken)\r\n        returns (uint8)\r\n    {\r\n        if (tokenType == TokenType.Governance) {\r\n            return 18;\r\n        } else {\r\n            return _decimals;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the maximum allowable token emission.\r\n     * @return The number of tokens taking into account the Decimals parameter\r\n     */\r\n    function cap()\r\n        public\r\n        view\r\n        override(IToken, ERC20CappedUpgradeable)\r\n        returns (uint256)\r\n    {\r\n        return super.cap();\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the short name of the token, its ticker for listing.\r\n     * @return A string with the name\r\n     */\r\n    function symbol()\r\n        public\r\n        view\r\n        override(IToken, ERC20Upgradeable)\r\n        returns (string memory)\r\n    {\r\n        return super.symbol();\r\n    }\r\n\r\n    /**\r\n     * @dev The given getter returns the total balance of the address that is not locked for transfer, taking into account all the TGEs with which this token was distributed.\r\n     * @dev It is the difference between the actual balance of the account and its locked portion.\r\n     * @param account The address of the account\r\n     * @return Unlocked balance of the account\r\n     */\r\n    function unlockedBalanceOf(address account) public view returns (uint256) {\r\n        // Get total account balance\r\n        uint256 balance = balanceOf(account);\r\n\r\n        // Iterate through TGE With Locked Tokens List to get locked balance\r\n        address[] memory _tgeWithLockedTokensList = tgeWithLockedTokensList;\r\n        uint256 totalLocked = 0;\r\n        for (uint256 i; i < _tgeWithLockedTokensList.length; i++) {\r\n            totalLocked += ITGE(_tgeWithLockedTokensList[i]).lockedBalanceOf(\r\n                account\r\n            );\r\n        }\r\n\r\n        // Return difference\r\n        return balance - totalLocked;\r\n    }\r\n\r\n    /**\r\n     * @dev This method indicates whether a successful TGE has been conducted for this token. To determine this, it is sufficient to check the first event from the list of all TGEs. If it ended in failure, then this token cannot be considered active for its pool.\r\n     * @return bool Is any TGE successful\r\n     */\r\n    function isPrimaryTGESuccessful() external view returns (bool) {\r\n        return (ITGE(tgeList[0]).state() == ITGE.State.Successful);\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the list of addresses of all TGE contracts ever deployed for this token.\r\n     * @return array An array of contract addresses\r\n     */\r\n    function getTGEList() external view returns (address[] memory) {\r\n        return tgeList;\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the list of addresses of all TGE contracts ever deployed for this token and having active token transfer restrictions.\r\n     * @return array An array of contract addresses\r\n     */\r\n\r\n    function getTgeWithLockedTokensList()\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return tgeWithLockedTokensList;\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the address of the last conducted TGE for this token. Sorting is based on the starting block of the TGE, not the ending block (i.e., even if an earlier TGE contract is still active and the most recent one by creation time has already ended, the method will still return the address of the most recent contract).\r\n     * @return address The contract address\r\n     */\r\n    function lastTGE() external view returns (address) {\r\n        return tgeList[tgeList.length - 1];\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the accumulated value stored in the contract's memory, which represents the number of token units that are in vesting at the time of the request.\r\n     * @return uint256 The sum of tokens in vesting\r\n     */\r\n    function getTotalTGEVestedTokens() public view returns (uint256) {\r\n        return totalVested;\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the accumulated value stored in the contract's memory, which represents the number of token units that are reserved and should be issued and sent as the contract's fee.\r\n     * @return uint256 The sum of tokens for the fee\r\n     */\r\n    function getTotalProtocolFeeReserved() public view returns (uint256) {\r\n        return totalProtocolFeeReserved;\r\n    }\r\n\r\n    /**\r\n     * @dev This method calculates the total supply for the token taking into account the reserved but not yet issued units (for vesting and protocol fee).\r\n     * @return uint256 The sum of reserved tokens\r\n     */\r\n    function totalSupplyWithReserves() public view returns (uint256) {\r\n        uint256 _totalSupplyWithReserves = totalSupply() +\r\n            getTotalTGEVestedTokens() +\r\n            getTotalProtocolFeeReserved();\r\n\r\n        return _totalSupplyWithReserves;\r\n    }\r\n\r\n    function isERC1155() public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @notice Overriding the transfer method of the ERC20 token contract.\r\n     * @dev When tokens are being transferred, a check is performed to ensure that the sender's balance has a sufficient amount of tokens that are not locked up. This is a stricter condition compared to the normal balance check.\r\n     * @dev Each such transaction also triggers the check of all TGE contracts for the end of lockup and removes such contracts from the tgeWithLockedTokensList.\r\n     * @param from The address of the sender\r\n     * @param to The address of the recipient\r\n     * @param amount Amount of tokens\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override whenPoolNotPaused {\r\n        // Update list of TGEs with locked tokens\r\n        updateTgeWithLockedTokensList();\r\n\r\n        // Check that locked tokens are not transferred\r\n        require(\r\n            amount <= unlockedBalanceOf(from),\r\n            ExceptionsLibrary.LOW_UNLOCKED_BALANCE\r\n        );\r\n\r\n        if (tokenType == IToken.TokenType.Governance) {\r\n            if (balanceOf(to) == 0 && delegates(to) == address(0))\r\n                _delegate(to, to);\r\n        }\r\n\r\n        // Execute transfer\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override(ERC20Upgradeable, ERC20VotesUpgradeable) {\r\n        super._afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function delegate(\r\n        address delegatee\r\n    ) public override(ERC20VotesUpgradeable, IToken) {\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IToken.delegate.selector, delegatee)\r\n        );\r\n\r\n        super.delegate(delegatee);\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public override(ERC20Upgradeable, IToken) returns (bool) {\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IToken.transfer.selector, to, amount)\r\n        );\r\n\r\n        return super.transfer(to, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override(ERC20Upgradeable, IToken) returns (bool) {\r\n        service.registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(\r\n                IToken.transferFrom.selector,\r\n                from,\r\n                to,\r\n                amount\r\n            )\r\n        );\r\n\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 amount\r\n    ) internal override(ERC20VotesUpgradeable, ERC20CappedUpgradeable) {\r\n        super._mint(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burning a specified amount of tokens that are held in the account's balance\r\n     * @dev Burning a specified amount of units of the token from the specified account.\r\n     * @param account The address from which tokens are deducted for destruction\r\n     * @param amount The amount of tokens to be destroyed\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 amount\r\n    ) internal override(ERC20Upgradeable, ERC20VotesUpgradeable) {\r\n        super._burn(account, amount);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    /**\r\n     * @notice Update the list of TGEs with locked tokens\r\n     * @dev It is crucial to keep this list up to date to have accurate information at any given time on how much of their token balance each user can dispose of, taking into account the locks imposed by the TGEs in which the user participated.\r\n     */\r\n    function updateTgeWithLockedTokensList() private {\r\n        address[] memory _tgeWithLockedTokensList = tgeWithLockedTokensList;\r\n        for (uint256 i; i < _tgeWithLockedTokensList.length; i++) {\r\n            // Check if transfer is unlocked\r\n            if (ITGE(_tgeWithLockedTokensList[i]).transferUnlocked()) {\r\n                // Remove tge from tgeWithLockedTokensList when transfer is unlocked\r\n                tgeWithLockedTokensList[i] = tgeWithLockedTokensList[\r\n                    tgeWithLockedTokensList.length - 1\r\n                ];\r\n                tgeWithLockedTokensList.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /// @notice Modifier that allows the method to be called only by the Pool contract.\r\n    modifier onlyPool() {\r\n        require(msg.sender == pool, ExceptionsLibrary.NOT_POOL);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGEFactory contract.\r\n    modifier onlyTGEFactory() {\r\n        require(\r\n            msg.sender == address(service.tgeFactory()),\r\n            ExceptionsLibrary.NOT_TGE_FACTORY\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGE contract.\r\n    modifier onlyTGE() {\r\n        require(\r\n            service.registry().typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.TGE,\r\n            ExceptionsLibrary.NOT_TGE\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGE or Vesting contract.\r\n    modifier onlyTGEOrVesting() {\r\n        bool isTGE = service.registry().typeOf(msg.sender) ==\r\n            IRecordsRegistry.ContractType.TGE;\r\n        bool isVesting = address(service.vesting()) == msg.sender;\r\n        require(isTGE || isVesting, ExceptionsLibrary.NOT_TGE);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only if the Pool contract is not paused.\r\n    modifier whenPoolNotPaused() {\r\n        require(!IPausable(pool).paused(), ExceptionsLibrary.SERVICE_PAUSED);\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/TokenERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/ITokenERC1155.sol\";\r\nimport \"./interfaces/IToken.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IPool.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\nimport \"./interfaces/IPausable.sol\";\r\n\r\n/// @title Company (Pool) Token\r\n/// @dev An expanded ERC20 contract, based on which tokens of various types are issued. At the moment, the protocol provides for 2 types of tokens: Governance, which must be created simultaneously with the pool, existing for the pool only in the singular and participating in voting, and Preference, which may be several for one pool and which do not participate in voting in any way.\r\ncontract TokenERC1155 is ERC1155SupplyUpgradeable, ITokenERC1155 {\r\n    /// @dev The address of the Service contract\r\n    IService public service;\r\n\r\n    /// @dev The token symbol or ticker for listing\r\n    string public symbol;\r\n\r\n    /// @dev Mapping storing the URI metadata for each collection of the token\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /// @dev Mapping storing the maximum caps for each collection of ERC1155 token\r\n    mapping(uint256 => uint256) public cap;\r\n\r\n    /// @dev The identifier (sequential number) of the token collection that was created last\r\n    uint256 public lastTokenId;\r\n\r\n    /// @dev The address of the pool contract that owns the token\r\n    address public pool;\r\n\r\n    /**\r\n     * @notice The digital code of the token type\r\n     * @dev In the current version, ERC1155 tokens can only have the code \"2\", which corresponds to the Preference token type.\r\n     */\r\n    IToken.TokenType public tokenType;\r\n\r\n    /// @dev Preference token name\r\n    string public name;\r\n\r\n    /// @dev Preference token description, allows up to 5000 characters, for others - \"\"\r\n    string public description;\r\n\r\n    /**\r\n     * @notice All TGEs associated with this token\r\n     * @dev A list of TGE contract addresses that have been launched to distribute collections of this token. The collection ID serves as the key for this mapping.\r\n     */\r\n    mapping(uint256 => address[]) public tgeList;\r\n\r\n    /// @dev Mapping storing the amounts of tokens in vesting for each collection of this token\r\n    mapping(uint256 => uint256) private totalVested;\r\n\r\n    /// @dev Mapping storing lists of TGEs with active token lockups for each collection of this token\r\n    mapping(uint256 => address[]) private tgeWithLockedTokensList;\r\n\r\n    /// @dev Mapping storing the amounts of tokens reserved as protocol fees for each collection of this token\r\n    mapping(uint256 => uint256) private totalProtocolFeeReserved;\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Token creation, can only be started once. At the same time, the TGE contract, which sells the created token, is necessarily simultaneously deployed and receives an entry in the Registry. For Preference tokens, you can set an arbitrary value of the Name field.\r\n     * @param _service The address of the Service contract.\r\n     * @param _pool The address of the pool contract.\r\n     * @param _info The parameters of the token, including its type, in the form of a structure described in the TokenInfo method.\r\n     * @param _primaryTGE The address of the primary TGE for this token.\r\n     */\r\n    function initialize(\r\n        IService _service,\r\n        address _pool,\r\n        IToken.TokenInfo memory _info,\r\n        address _primaryTGE\r\n    ) external initializer {\r\n        __ERC1155Supply_init();\r\n        name = _info.name;\r\n        symbol = _info.symbol;\r\n        description = _info.description;\r\n        lastTokenId = 1;\r\n        tgeList[lastTokenId].push(_primaryTGE);\r\n        tgeWithLockedTokensList[lastTokenId].push(_primaryTGE);\r\n        tokenType = _info.tokenType;\r\n        service = _service;\r\n        pool = _pool;\r\n    }\r\n\r\n    // RESTRICTED FUNCTIONS\r\n\r\n    /**\r\n     * @dev Minting of new tokens. Only the TGE or Vesting contract can mint tokens, there is no other way to get an additional issue. If the user who is being minted does not have tokens, they are sent to delegation on his behalf.\r\n     * @param to The address of the account for which new token units are being minted.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @param amount The amount of tokens being minted.\r\n     */\r\n    function mint(\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external override(ITokenERC1155) onlyTGEOrVesting {\r\n        // Mint tokens\r\n        _mint(to, tokenId, amount, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Method for burning tokens. It can be called by both token owners and TGE contracts to burn the returned tokens during redeeming.\r\n     * @param from The account address.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @param amount The amount of tokens being burned.\r\n     */\r\n    function burn(\r\n        address from,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) public override(ITokenERC1155) whenPoolNotPaused onlyTGEOrVesting {\r\n        // Check that sender is valid\r\n        require(\r\n            service.registry().typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.TGE ||\r\n                msg.sender == from,\r\n            ExceptionsLibrary.INVALID_USER\r\n        );\r\n\r\n        // Burn tokens\r\n        _burn(from, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This method adds the TGE contract address to the TGEList of the specified token collection.\r\n     * @param tge The TGE address.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     */\r\n    function addTGE(address tge, uint256 tokenId) external onlyTGEFactory {\r\n        tgeList[tokenId].push(tge);\r\n        tgeWithLockedTokensList[tokenId].push(tge);\r\n    }\r\n\r\n    /**\r\n     * @dev This method modifies the number of token units that are vested and reserved for claiming by users.\r\n     * @param amount The amount of tokens.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     */\r\n    function setTGEVestedTokens(\r\n        uint256 amount,\r\n        uint256 tokenId\r\n    ) external onlyTGEOrVesting {\r\n        totalVested[tokenId] = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This method irreversibly sets the emission cap for each of the created token collections.\r\n     * @param _tokenId The token collection of the ERC1155 contract.\r\n     * @param _cap The maximum emission cap in token units.\r\n     */\r\n    function setTokenIdCap(\r\n        uint256 _tokenId,\r\n        uint256 _cap\r\n    ) external onlyTGEFactory {\r\n        cap[_tokenId] = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev This method modifies the number of token units that should be used as protocol fees.\r\n     * @param amount The amount of tokens.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     */\r\n    function setProtocolFeeReserved(\r\n        uint256 amount,\r\n        uint256 tokenId\r\n    ) external onlyTGE {\r\n        totalProtocolFeeReserved[tokenId] = amount;\r\n    }\r\n\r\n    /**\r\n     * @dev This method sets the metadata URI for each of the token collections.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @param tokenURI The metadata URI.\r\n     */\r\n    function setURI(uint256 tokenId, string memory tokenURI) external onlyTGE {\r\n        _setURI(tokenId, tokenURI);\r\n    }\r\n\r\n    function setLastTokenId(uint256 tokenId) external onlyTGE {\r\n        if (tokenId > lastTokenId) lastTokenId = tokenId;\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n     * @dev This method is needed for compatibility with other protocol contracts to optimize algorithms. It always returns 0.\r\n     * @return uint8 Decimals (always 0)\r\n     */\r\n    function decimals() public pure returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev The given getter returns the total balance of the address that is not locked for transfer, taking into account all the TGEs with which this token collection was distributed.\r\n     * @dev It calculates the difference between the actual balance of the account and its locked portion. The calculation is performed for the specified token collection.\r\n     * @param account The account address.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return uint256 The unlocked balance of the account.\r\n     */\r\n    function unlockedBalanceOf(\r\n        address account,\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        // Get total account balance\r\n        uint256 balance = balanceOf(account, tokenId);\r\n\r\n        // Iterate through TGE With Locked Tokens List to get locked balance\r\n        address[] memory _tgeWithLockedTokensList = tgeWithLockedTokensList[\r\n            tokenId\r\n        ];\r\n        uint256 totalLocked = 0;\r\n        for (uint256 i; i < _tgeWithLockedTokensList.length; i++) {\r\n            totalLocked += ITGE(_tgeWithLockedTokensList[i]).lockedBalanceOf(\r\n                account\r\n            );\r\n        }\r\n\r\n        // Return difference\r\n        return balance - totalLocked;\r\n    }\r\n\r\n    /**\r\n     * @dev This method indicates whether a successful TGE has been conducted for the given token collection. It is sufficient to check the first event from the list of all TGEs.\r\n     * @param _tokenId The token collection of the ERC1155 contract.\r\n     * @return bool Whether any TGE is successful.\r\n     */\r\n    function isPrimaryTGESuccessful(\r\n        uint256 _tokenId\r\n    ) external view returns (bool) {\r\n        if (_tokenId > lastTokenId) return false;\r\n        return (ITGE(tgeList[_tokenId][0]).state() == ITGE.State.Successful);\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the list of addresses of all TGE contracts that have ever been deployed for the specified token collection.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return array An array of contract addresses.\r\n     */\r\n    function getTGEList(\r\n        uint256 tokenId\r\n    ) external view returns (address[] memory) {\r\n        return tgeList[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the list of addresses of all TGE contracts that have ever been deployed for the specified token collection and have active transfer restrictions.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return array An array of contract addresses.\r\n     */\r\n\r\n    function getTgeWithLockedTokensList(\r\n        uint256 tokenId\r\n    ) external view returns (address[] memory) {\r\n        return tgeWithLockedTokensList[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the address of the latest TGE contract for the given token collection. Sorting is based on the block of the TGE start, not the end block (i.e., even if an earlier TGE contract is still active while the latest one by creation time has already ended, this method will return the address of the latest contract).\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return address The TGE contract address.\r\n     */\r\n    function lastTGE(uint256 tokenId) external view returns (address) {\r\n        return tgeList[tokenId][tgeList[tokenId].length - 1];\r\n    }\r\n\r\n    /**\r\n     * @dev This method returns the accumulated value stored in the contract's memory, which represents the number of token units from the specified collection that are vested at the time of the request.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return uint256 The total number of vested tokens.\r\n     */\r\n    function getTotalTGEVestedTokens(\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        return totalVested[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This method calculates the total supply for the token, taking into account the reserved but not yet minted token units (for vesting and protocol fee).\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return uint256 The total supply with reserves.\r\n     */\r\n    function getTotalProtocolFeeReserved(\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        return totalProtocolFeeReserved[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev This method calculates the total supply for an ERC1155 token collection, taking into account the reserved but not yet minted token units (for vesting and protocol fee).\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return uint256 The total supply of the token collection with reserves.\r\n     */\r\n    function totalSupplyWithReserves(\r\n        uint256 tokenId\r\n    ) public view returns (uint256) {\r\n        uint256 _totalSupplyWithReserves = totalSupply(tokenId) +\r\n            getTotalTGEVestedTokens(tokenId) +\r\n            getTotalProtocolFeeReserved(tokenId);\r\n\r\n        return _totalSupplyWithReserves;\r\n    }\r\n\r\n    /**\r\n     * @dev This getter allows retrieving the stored metadata URI for the specified ERC1155 token collection in the contract.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @return uint256 The metadata URI for the collection.\r\n     */\r\n    function uri(uint256 tokenId) public view override returns (string memory) {\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    function isERC1155() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function getURIList(\r\n        uint256 limit,\r\n        uint offset\r\n    ) external view returns (string[] memory) {\r\n        string[] memory result = new string[](limit);\r\n        for (uint i = 0; i < limit && i <= lastTokenId; i++)\r\n            result[i] = _tokenURIs[offset + i + 1];\r\n        return result;\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /**\r\n     * @notice Simple transfer for ERC1155 tokens.\r\n     * @dev This method is used to transfer a specified amount of token units of the specified tokenId token collection of the ERC1155 type. The _beforeTokenTransfer validation scenario is applied before sending the tokens.\r\n     * @param from The address of the sender.\r\n     * @param to The address of the recipient.\r\n     * @param tokenId The token collection of the ERC1155 contract.\r\n     * @param amount The amount of tokens.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) internal whenPoolNotPaused {\r\n        // Execute transfer\r\n        super._safeTransferFrom(from, to, tokenId, amount, \"\");\r\n    }\r\n\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external override whenPoolNotPaused {\r\n        // Execute transfer\r\n        _transfer(from, to, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Special hook for validating ERC1155 transfers.\r\n     * @dev It is used to update the list of TGEs with an active lockup for the token units being transferred in an optimized way, while also checking the availability of unlocked balance for the transfer.\r\n     * @dev The set of parameters for this hook is comprehensive to be used for all ERC1155 methods related to token transfers between accounts.\r\n     * @param operator The potential initiator of the TransferFrom transaction to whom the account entrusted their tokens.\r\n     * @param from The address of the sender.\r\n     * @param to The address of the recipient.\r\n     * @param ids The list of ERC1155 token collection IDs that are being transferred to another account.\r\n     * @param amounts The list of corresponding amounts of token units.\r\n     * @param data Additional calldata attached to the transaction.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        if (from != address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                // Update list of TGEs with locked tokens\r\n                _updateTgeWithLockedTokensList(ids[i]);\r\n\r\n                // Check that locked tokens are not transferred\r\n                require(\r\n                    amounts[i] <= unlockedBalanceOf(from, ids[i]),\r\n                    ExceptionsLibrary.LOW_UNLOCKED_BALANCE\r\n                );\r\n                service.registry().log(\r\n                    msg.sender,\r\n                    address(this),\r\n                    0,\r\n                    abi.encodeWithSelector(\r\n                        ITokenERC1155.transfer.selector,\r\n                        from,\r\n                        to,\r\n                        ids[i],\r\n                        amounts[i]\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the metadata URI source for the token collection.\r\n     * @param tokenId The identifier of the ERC1155 token collection.\r\n     * @param tokenURI The URI string specifying the metadata source.\r\n     */\r\n    function _setURI(uint256 tokenId, string memory tokenURI) internal {\r\n        _tokenURIs[tokenId] = tokenURI;\r\n        emit URI(uri(tokenId), tokenId);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    /**\r\n     * @notice Update the list of TGEs with locked tokens.\r\n     * @dev It is crucial to keep this list up to date to have accurate information on how much of their token balance each user can dispose of, taking into account the locks imposed by TGEs in which the user participated.\r\n     * @dev Due to the nature of ERC1155, this method requires an additional argument specifying the token collection \"tokenId\". When transferring tokens of such collection, all TGEs related to the distribution of tokens from this collection will be checked.\r\n     * @param tokenId ERC1155 token collection identifier\r\n     */\r\n    function _updateTgeWithLockedTokensList(uint256 tokenId) private {\r\n        address[] memory _tgeWithLockedTokensList = tgeWithLockedTokensList[\r\n            tokenId\r\n        ];\r\n        for (uint256 i; i < _tgeWithLockedTokensList.length; i++) {\r\n            // Check if transfer is unlocked\r\n            if (ITGE(_tgeWithLockedTokensList[i]).transferUnlocked()) {\r\n                // Remove tge from tgeWithLockedTokensList when transfer is unlocked\r\n                tgeWithLockedTokensList[tokenId][i] = tgeWithLockedTokensList[\r\n                    tokenId\r\n                ][tgeWithLockedTokensList[tokenId].length - 1];\r\n                tgeWithLockedTokensList[tokenId].pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /// @notice Modifier that allows the method to be called only by the Pool contract.\r\n    modifier onlyPool() {\r\n        require(msg.sender == pool, ExceptionsLibrary.NOT_POOL);\r\n        _;\r\n    }\r\n\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGEFactory contract.\r\n    modifier onlyTGEFactory() {\r\n        require(\r\n            msg.sender == address(service.tgeFactory()),\r\n            ExceptionsLibrary.NOT_TGE_FACTORY\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGE contract.\r\n    modifier onlyTGE() {\r\n        require(\r\n            service.registry().typeOf(msg.sender) ==\r\n                IRecordsRegistry.ContractType.TGE,\r\n            ExceptionsLibrary.NOT_TGE\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only by the TGE or Vesting contract.\r\n    modifier onlyTGEOrVesting() {\r\n        bool isTGE = service.registry().typeOf(msg.sender) ==\r\n            IRecordsRegistry.ContractType.TGE;\r\n        bool isVesting = address(service.vesting()) == msg.sender;\r\n        require(isTGE || isVesting, ExceptionsLibrary.NOT_TGE);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that allows the method to be called only if the Pool contract is not paused.\r\n    modifier whenPoolNotPaused() {\r\n        require(!IPausable(pool).paused(), ExceptionsLibrary.SERVICE_PAUSED);\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\nimport \"./interfaces/IService.sol\";\r\nimport \"./interfaces/ITokenFactory.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\n\r\n/**\r\n * @title TokenFactory\r\n * @dev A factory for token contracts, utilizing the Beacon Proxy pattern for creating new contracts. \r\n * Each new contract is a \"proxy\" pointing to a \"beacon\" that stores the implementation logic.\r\n * This enables cheaper creation of new contracts and easier updating of all contracts at once.\r\n * The contract can also be upgraded, meaning the contract's logic can be replaced while retaining the same contract address and state variables.\r\n */\r\ncontract TokenFactory is Initializable, ITokenFactory {\r\n    // STORAGE\r\n\r\n    /**\r\n     * @notice Service contract\r\n     */\r\n    IService public service;\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n     * @notice Modifier restricting function call to TGEFactory contract only\r\n     * @dev Throws an exception if the caller is not the TGEFactory contract's address\r\n     */\r\n    modifier onlyTGEFactory() {\r\n        require(\r\n            msg.sender == address(service.tgeFactory()),\r\n            ExceptionsLibrary.NOT_TGE_FACTORY\r\n        );\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER\r\n\r\n    /**\r\n     * @notice Contract constructor\r\n     * @dev Disables the usage of initializers\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @dev Initializer function, can only be called once\r\n     * @param service_ Address of the service contract\r\n     */\r\n    function initialize(IService service_) external initializer {\r\n        service = service_;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a token contract\r\n     * @param pool Address of the pool\r\n     * @param info Token information\r\n     * @param primaryTGE Address of the primary TGE\r\n     * @return token Token contract\r\n     */\r\n    function createToken(\r\n        address pool,\r\n        IToken.TokenInfo memory info,\r\n        address primaryTGE\r\n    ) external onlyTGEFactory returns (address token) {\r\n        // Create token contract\r\n        token = address(new BeaconProxy(service.tokenBeacon(), \"\"));\r\n\r\n        // Initialize token\r\n        IToken(token).initialize(service, pool, info, primaryTGE);\r\n\r\n        // Add token contract to registry\r\n        service.registry().addContractRecord(\r\n            address(token),\r\n            IToken(token).tokenType() == IToken.TokenType.Governance\r\n                ? IRecordsRegistry.ContractType.GovernanceToken\r\n                : IRecordsRegistry.ContractType.PreferenceToken,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a ERC1155 token contract\r\n     * @param pool Address of the pool\r\n     * @param info Token information\r\n     * @param primaryTGE Address of the primary TGE\r\n     * @return token Token contract\r\n     */\r\n    function createTokenERC1155(\r\n        address pool,\r\n        IToken.TokenInfo memory info,\r\n        address primaryTGE\r\n    ) external onlyTGEFactory returns (address token) {\r\n        // Create token contract\r\n        token = address(new BeaconProxy(service.tokenERC1155Beacon(), \"\"));\r\n\r\n        // Initialize token\r\n        ITokenERC1155(token).initialize(service, pool, info, primaryTGE);\r\n\r\n        // Add token contract to registry\r\n        service.registry().addContractRecord(\r\n            address(token),\r\n            IToken(token).tokenType() == IToken.TokenType.Governance\r\n                ? IRecordsRegistry.ContractType.GovernanceToken\r\n                : IRecordsRegistry.ContractType.PreferenceToken,\r\n            \"\"\r\n        );\r\n    }\r\n}"
    },
    "contracts/Vesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"./libraries/ExceptionsLibrary.sol\";\r\nimport \"./interfaces/registry/IRegistry.sol\";\r\nimport \"./interfaces/ITGE.sol\";\r\nimport \"./interfaces/IVesting.sol\";\r\n    /**\r\n    * @title Vesting contract\r\n    * @notice The Vesting contract exists in a single instance and helps manage the vesting processes for all successful TGEs.\r\n    * @dev The vesting setup is performed by passing a value as one of the fields of the TGEInfo structure called \"vestingParams\", which is a structure of IVesting.VestingParams. This set of settings allows you to specify:\r\n    - what portion of the tokens will be released and directed to the buyer's wallet within the purchase transaction (using the TGE:purchase method);\r\n    - what portion of the tokens will be available for claim after the cliff period and the duration of this period;\r\n    - what percentage of the remaining tokens will be distributed equally over equal time intervals (as well as the number and duration of these intervals).\r\n    Any of these fields can accept zero values, for example, you can set the distribution of tokens without a cliff period or, conversely, split the receipt of values into two parts (immediately and after some time), without specifying time intervals.\r\n    @dev For each TGE, a list of Resolvers can be assigned, i.e., addresses that can stop the vesting program for a specific user. \r\n    The list of resolvers is immutable for each individual TGE and is set at the time of its launch (it can be stored in the proposal data for creating the TGE beforehand).\r\n    */\r\ncontract Vesting is Initializable, IVesting {\r\n    using SafeERC20Upgradeable for IToken;\r\n\r\n    // CONSTANTS\r\n\r\n    /** \r\n    * @notice Denominator for shares (such as thresholds)\r\n    * @dev The constant Service.sol:DENOM is used to work with percentage values of QuorumThreshold and DecisionThreshold thresholds, as well as for calculating the ProtocolTokenFee. In this version, it is equal to 1,000,000, for clarity stored as 100 * 10 ^ 4.\r\n    10^4 corresponds to one percent, and 100 * 10^4 corresponds to one hundred percent.\r\n    The value of 12.3456% will be written as 123,456, and 78.9% as 789,000.\r\n    This notation allows specifying ratios with an accuracy of up to four decimal places in percentage notation (six decimal places in decimal notation).\r\n    When working with the CompanyDAO frontend, the application scripts automatically convert the familiar percentage notation into the required format. When using the contracts independently, this feature of value notation should be taken into account.\r\n    */\r\n    uint256 private constant DENOM = 100 * 10 ** 4;\r\n\r\n    // STORAGE\r\n\r\n    /// @notice Registry contract address\r\n    IRegistry public registry;\r\n\r\n    /// @notice Mapping that stores the total amount of tokens locked in vesting for each conducted TGE.\r\n    /// @dev Claiming tokens does not modify these data; they are used to calculate the amount of tokens that can be claimed by a specific address and to determine the total amount of tokens in vesting for a given account.\r\n    /// @dev In the event of vesting cancellation for a specific address in any TGE, the value under the TGE address key is decreased by the full amount of tokens locked in vesting for that address.\r\n    mapping(address => uint256) public totalVested;\r\n\r\n    /// @notice Mapping (tge, account) to amount of tokens vested to that account in TGE\r\n    /// @dev The vesting contract does not store tokens, but it contains records of which address is entitled to what amount of tokens for which TGE when the conditions set in the settings are met. This means that minting these tokens only occurs when the owner of the address requests them, prior to that, they are not included in totalSupply or balances. No record in Vesting can affect the vote calculation for Governance.\r\n    mapping(address => mapping(address => uint256)) public vested;\r\n\r\n    /// @notice Mapping that stores the total amount of tokens vested by a specific address for a given TGE.\r\n    /// @dev This parameter increases every time a successful transaction is made to the Claim method by an address.\r\n    mapping(address => mapping(address => uint256)) public claimed;\r\n\r\n    /// @notice Mapping of flags indicating whether the TVL threshold set in the TGE conditions has been reached by the pool.\r\n    /// @dev It is one of the two conditions under which users can claim tokens reserved for them under the vesting program.\r\n    mapping(address => bool) public claimTVLReached;\r\n\r\n    /// @notice Mapping that shows the amount of tokens that will not be transferred to the user during claiming due to the cancellation of vesting by a resolver.\r\n    mapping(address => mapping(address => uint256)) public resolved;\r\n\r\n    // EVENTS\r\n\r\n    /**\r\n    * @dev This event is emitted when new token units are vested due to token purchase.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n    * @param amount Amount of tokens vested for the account\r\n    */\r\n    event Vested(address tge, address account, uint256 amount);\r\n\r\n    /**\r\n    * @dev This event is emitted for each token claiming by users.\r\n    * @param tge TGE contract address\r\n    * @param account Account address that requested the token claiming\r\n    * @param amount Amount of claimed tokens\r\n    */\r\n    event Claimed(address tge, address account, uint256 amount);\r\n\r\n    /**\r\n    * @dev This event is emitted when vesting is canceled for a specific account and TGE.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n    * @param amount Amount of tokens that will not be distributed to this address due to the cancellation\r\n    */\r\n    event Cancelled(address tge, address account, uint256 amount);\r\n\r\n    // MODIFIERS\r\n\r\n    /// @notice Modifier allows the method to be called only by the TGE contract.\r\n    /// @dev This modifier is commonly used for calling the `vest` method, which registers the arrival of new token units into vesting as a result of a successful `purchase` method call in the TGE contract.\r\n    modifier onlyTGE() {\r\n        require(\r\n            registry.typeOf(msg.sender) == IRecordsRegistry.ContractType.TGE,\r\n            ExceptionsLibrary.NOT_TGE\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /// @notice Modifier allows the method to be called only by an account that has the role of `SERVICE_MANAGER` in the Service contract.\r\n    /// @dev It restricts access to certain privileged actions that are reserved for the manager.\r\n    modifier onlyManager() {\r\n        IService service = registry.service();\r\n        require(\r\n            service.hasRole(service.SERVICE_MANAGER_ROLE(), msg.sender),\r\n            ExceptionsLibrary.NOT_WHITELISTED\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier allows the method to be called only by an account whose address is specified in the list of resolvers for a given TGE.\r\n    modifier onlyResolverOrTGE(address tge) {\r\n        if (msg.sender != tge) {\r\n            address[] memory resolvers = ITGE(tge)\r\n                .getInfo()\r\n                .vestingParams\r\n                .resolvers;\r\n            bool isResolver;\r\n            for (uint256 i = 0; i < resolvers.length; i++) {\r\n                if (resolvers[i] == msg.sender) {\r\n                    isResolver = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(isResolver, ExceptionsLibrary.NOT_RESOLVER);\r\n        }\r\n        _;\r\n    }\r\n\r\n    // INITIALIZER AND CONSTRUCTOR\r\n\r\n    /**\r\n     * @notice Contract constructor.\r\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\r\n     * The constructor is replaced with an initializer function.\r\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\r\n     * @custom:oz-upgrades-unsafe-allow constructor\r\n     */\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    /**\r\n     * @notice Contract initializer\r\n     * @dev This method replaces the constructor for upgradeable contracts. Additionally, it sets the address of the Registry contract in the contract's storage.\r\n     * @param registry_ Protocol registry address\r\n     */\r\n    function initialize(IRegistry registry_) external initializer {\r\n        registry = registry_;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /**\r\n    * @notice Method for increasing the token balance in vesting for a specific TGE contract.\r\n    * @dev This method is called only by the TGE contract and results in the creation of a new entry or an increase in the existing value in the vested mapping for the TGE key and the specified account. After this, the account is reserved the ability to mint and receive new token units in case the conditions specified in the vesting program for this TGE are met.\r\n    * @param to Account address that received the vested tokens\r\n    * @param amount Amount of tokens to vest\r\n     */\r\n    function vest(address to, uint256 amount) external onlyTGE {\r\n        totalVested[msg.sender] += amount;\r\n        vested[msg.sender][to] += amount;\r\n\r\n        emit Vested(msg.sender, to, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Method for recording the occurrence of one of two conditions for token unlocking.\r\n    * @dev This method can only be called by the address with the SERVICE_MANAGER role in the Service contract. It is a trusted way to load data into the source of truth about the TVL events achieved by the pool, as specified in the parameters of the vesting program.\r\n    * @param tge TGE contract address\r\n     */\r\n    function setClaimTVLReached(address tge) external onlyManager {\r\n        require(\r\n            ITGE(tge).state() == ITGE.State.Successful,\r\n            ExceptionsLibrary.WRONG_STATE\r\n        );\r\n        claimTVLReached[tge] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Cancels vesting for the specified account and TGE contract addresses.\r\n    * @dev Calling this method is only possible by the address specified in the resolvers list for the specific TGE, and it leads to resetting the token balance in vesting for the specified address, depriving it of the ability to make successful token claiming within the specified TGE.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n     */\r\n    function cancel(\r\n        address tge,\r\n        address account\r\n    ) external onlyResolverOrTGE(tge) {\r\n        uint256 amount = vestedBalanceOf(tge, account);\r\n\r\n        vested[tge][account] -= amount;\r\n        totalVested[tge] -= amount;\r\n\r\n        resolved[tge][account] += amount;\r\n\r\n        emit Cancelled(tge, account, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Method to issue and transfer unlocked tokens to the transaction sender's address.\r\n    * @dev This method is executed with the specified TGE, for which the currently unlocked token volume is calculated. Calling the method results in the issuance and transfer of the entire calculated token volume to the sender's address.\r\n    * @param tge TGE contract address\r\n     */\r\n    function claim(address tge) external {\r\n        uint256 amount = claimableBalanceOf(tge, msg.sender);\r\n        require(amount > 0, ExceptionsLibrary.CLAIM_NOT_AVAILABLE);\r\n\r\n        claimed[tge][msg.sender] += amount;\r\n        totalVested[tge] -= amount;\r\n\r\n        address token = ITGE(tge).token();\r\n        uint256 tokenId = ITGE(tge).tokenId();\r\n        if (ITGE(tge).isERC1155TGE()) {\r\n            ITokenERC1155(token).setTGEVestedTokens(\r\n                ITokenERC1155(token).getTotalTGEVestedTokens(tokenId) - amount,\r\n                tokenId\r\n            );\r\n\r\n            ITokenERC1155(token).mint(msg.sender, tokenId, amount);\r\n        } else {\r\n            IToken(token).setTGEVestedTokens(\r\n                IToken(token).getTotalTGEVestedTokens() - amount\r\n            );\r\n\r\n            IToken(token).mint(msg.sender, amount);\r\n        }\r\n\r\n        IToken(token).service().registry().log(\r\n            msg.sender,\r\n            address(this),\r\n            0,\r\n            abi.encodeWithSelector(IVesting.claim.selector, tge)\r\n        );\r\n\r\n        emit Claimed(tge, msg.sender, amount);\r\n    }\r\n\r\n    // PUBLIC VIEW FUNCTIONS\r\n\r\n    /**\r\n    * @notice This method returns the vesting parameters specified for a specific TGE.\r\n    * @param tge TGE contract address\r\n    * @return VestingParams Vesting settings\r\n     */\r\n    function vestingParams(\r\n        address tge\r\n    ) public view returns (VestingParams memory) {\r\n        return ITGE(tge).getInfo().vestingParams;\r\n    }\r\n\r\n    /**\r\n    * @notice This method validates the vesting program parameters proposed for use in the created TGE contract.\r\n    * @param params Vesting program parameters\r\n    * @return bool True if params are valid (reverts otherwise)\r\n     */\r\n    function validateParams(\r\n        VestingParams memory params\r\n    ) public pure returns (bool) {\r\n        require(\r\n            params.cliffShare + params.spans * params.spanShare <= DENOM,\r\n            ExceptionsLibrary.SHARES_SUM_EXCEEDS_ONE\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice This method returns the number of token units that have been unlocked for a specific account within the vesting program of a particular TGE.\r\n    * @dev The returned value is the total sum of all quantities after all token unlocks that have occurred for this account within this TGE. In other words, claimed tokens are also part of this response.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n    * @return uint256 Number of unlocked token units\r\n     */\r\n    function unlockedBalanceOf(\r\n        address tge,\r\n        address account\r\n    ) public view returns (uint256) {\r\n        // In active or failed TGE nothing is unlocked\r\n        if (ITGE(tge).state() != ITGE.State.Successful) {\r\n            return 0;\r\n        }\r\n\r\n        // Is claim TVL is non-zero and is not reached, nothing is unlocked\r\n        VestingParams memory params = vestingParams(tge);\r\n        if (params.claimTVL > 0 && !claimTVLReached[tge]) {\r\n            return 0;\r\n        }\r\n\r\n        // Determine unlocked amount\r\n        uint256 tgeEnd = ITGE(tge).getEnd();\r\n        if (block.number < tgeEnd + params.cliff) {\r\n            // If cliff is not exceeded, nothing is unlocked yet\r\n            return 0;\r\n        } else if (\r\n            block.number <\r\n            tgeEnd + params.cliff + params.spans * params.spanDuration\r\n        ) {\r\n            // If cliff is reached, but not all the period passed, calculate vested amount\r\n            uint256 spansUnlocked = (block.number - tgeEnd - params.cliff) /\r\n                params.spanDuration;\r\n            uint256 totalShare = params.cliffShare +\r\n                spansUnlocked *\r\n                params.spanShare;\r\n            return (vested[tge][account] * totalShare) / DENOM;\r\n        } else {\r\n            // Otherwise everything is unlocked\r\n            return vested[tge][account];\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice This method returns the currently available amount of token units that an account can claim within the specified TGE.\r\n    * @dev This method takes into account previous claimings made by the account.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n    * @return uin256 Number of claimable token units\r\n     */\r\n    function claimableBalanceOf(\r\n        address tge,\r\n        address account\r\n    ) public view returns (uint256) {\r\n        return unlockedBalanceOf(tge, account) - claimed[tge][account];\r\n    }\r\n\r\n    /**\r\n    * @notice This method shows the remaining tokens that are still vested for a given address.\r\n    * @dev This method shows both still locked token units and already unlocked units ready for claiming.\r\n    * @param tge TGE contract address\r\n    * @param account Account address\r\n    * @return uint256 Number of token units vested\r\n     */\r\n    function vestedBalanceOf(\r\n        address tge,\r\n        address account\r\n    ) public view returns (uint256) {\r\n        return vested[tge][account] - claimed[tge][account];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}