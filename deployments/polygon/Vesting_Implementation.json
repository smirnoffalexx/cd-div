{
  "address": "0xC9D2Cd12FF0afda8F401a6304D20D98fd23450d0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Vested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimTVLReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "resolved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "setClaimTVLReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vestedShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spans",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spanDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spanShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimTVL",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "resolvers",
              "type": "address[]"
            }
          ],
          "internalType": "struct IVesting.VestingParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "validateParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "vest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vestedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tge",
          "type": "address"
        }
      ],
      "name": "vestingParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vestedShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cliffShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spans",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spanDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spanShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimTVL",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "resolvers",
              "type": "address[]"
            }
          ],
          "internalType": "struct IVesting.VestingParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc2879001f716dac972c0158abea8be9e1c133f31748b4807671cff7f6d6e2ed",
  "receipt": {
    "to": null,
    "from": "0x40307162145227b6eC8CEF50C30A755C2f260633",
    "contractAddress": "0xC9D2Cd12FF0afda8F401a6304D20D98fd23450d0",
    "transactionIndex": 117,
    "gasUsed": "1509900",
    "logsBloom": "0x
    "blockHash": "0xe4beadc3a4c7073b9c9bc026f325a823fc179bd15a9e4d4d4de7ca8c58f06aac",
    "transactionHash": "0xbc2879001f716dac972c0158abea8be9e1c133f31748b4807671cff7f6d6e2ed",
    "logs": [
      {
        "transactionIndex": 117,
        "blockNumber": 43863406,
        "transactionHash": "0xbc2879001f716dac972c0158abea8be9e1c133f31748b4807671cff7f6d6e2ed",
        "address": "0xC9D2Cd12FF0afda8F401a6304D20D98fd23450d0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 497,
        "blockHash": "0xe4beadc3a4c7073b9c9bc026f325a823fc179bd15a9e4d4d4de7ca8c58f06aac"
      },
      {
        "transactionIndex": 117,
        "blockNumber": 43863406,
        "transactionHash": "0xbc2879001f716dac972c0158abea8be9e1c133f31748b4807671cff7f6d6e2ed",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000040307162145227b6ec8cef50c30a755c2f260633",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000575c0844c85c800000000000000000000000000000000000000000000000678b62bb2eedd13af0000000000000000000000000000000000000000000010db25b155e227446f0b00000000000000000000000000000000000000000000000678b0b5f26a908de70000000000000000000000000000000000000000000010db25b6cba2ab90f4d3",
        "logIndex": 498,
        "blockHash": "0xe4beadc3a4c7073b9c9bc026f325a823fc179bd15a9e4d4d4de7ca8c58f06aac"
      }
    ],
    "blockNumber": 43863406,
    "cumulativeGasUsed": "22731007",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "67fc85ef621887c5a1d0a259d5aa2aa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTVLReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resolved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"setClaimTVLReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestedShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spanShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTVL\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"resolvers\",\"type\":\"address[]\"}],\"internalType\":\"struct IVesting.VestingParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"validateParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tge\",\"type\":\"address\"}],\"name\":\"vestingParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestedShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spanShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTVL\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"resolvers\",\"type\":\"address[]\"}],\"internalType\":\"struct IVesting.VestingParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Cancelled(address,address,uint256)\":{\"details\":\"Event emitted on vesting cancellation for account by resolver\",\"params\":{\"account\":\"Account address\",\"amount\":\"Amount of burnt tokens\",\"tge\":\"TGE address\"}},\"Claimed(address,address,uint256)\":{\"details\":\"Event emitted on token claim.\",\"params\":{\"account\":\"Claimer address\",\"amount\":\"Amount of claimed tokens\",\"tge\":\"TGE address\"}},\"Recall(address,address,uint256)\":{\"details\":\"Event emitted on vested tokens recall\",\"params\":{\"account\":\"User address\",\"amount\":\"Amount of recalled tokens\",\"tge\":\"TGE address\"}},\"Vested(address,address,uint256)\":{\"details\":\"Event emitted on token vesting.\",\"params\":{\"account\":\"Claimer address\",\"amount\":\"Amount of vested tokens\",\"tge\":\"TGE address\"}}},\"kind\":\"dev\",\"methods\":{\"cancel(address,address)\":{\"params\":{\"account\":\"Account address\",\"tge\":\"TGE address\"}},\"claim(address)\":{\"params\":{\"tge\":\"TGE to claim from\"}},\"claimableBalanceOf(address,address)\":{\"params\":{\"account\":\"Account address\",\"tge\":\"TGE address\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address)\":{\"params\":{\"registry_\":\"Protocol registry address\"}},\"setClaimTVLReached(address)\":{\"params\":{\"tge\":\"Adddress of the TGE\"}},\"unlockedBalanceOf(address,address)\":{\"params\":{\"account\":\"Account address\",\"tge\":\"TGE address\"}},\"validateParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[]))\":{\"params\":{\"params\":\"Vesting params\"},\"returns\":{\"_0\":\"True if params are valid (reverts otherwise)\"}},\"vest(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to vest\",\"to\":\"Address to vest tokens to\"}},\"vestedBalanceOf(address,address)\":{\"params\":{\"account\":\"Account address\",\"tge\":\"TGE address\"}},\"vestingParams(address)\":{\"params\":{\"tge\":\"TGE address\"}}},\"stateVariables\":{\"claimTVLReached\":{\"details\":\"Users can claim their tokens only if claim TVL was reached.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancel(address,address)\":{\"notice\":\"Cancels vesting for given account in given tge, burning all remaining tokens (only called by TGE resolver or TGE)\"},\"claim(address)\":{\"notice\":\"Claims unlocked tokens from given TGE\"},\"claimTVLReached(address)\":{\"notice\":\"Mapping of TGE addresses to flags if claim TVL is reached for TGE\"},\"claimableBalanceOf(address,address)\":{\"notice\":\"Gets claimable balance of account in TGE\"},\"claimed(address,address)\":{\"notice\":\"Mapping (tge, account) to amount of already claimed vested tokens to that account in TGE\"},\"initialize(address)\":{\"notice\":\"Contract initializer\"},\"registry()\":{\"notice\":\"Registry contract\"},\"resolved(address,address)\":{\"notice\":\"Mapping (tge, account) to amount of resolved tokens in TGE\"},\"setClaimTVLReached(address)\":{\"notice\":\"Set's claim TVL reached for TGE (only called by manager)\"},\"totalVested(address)\":{\"notice\":\"Mapping of TGE addresses to total amount of tokens vested there\"},\"unlockedBalanceOf(address,address)\":{\"notice\":\"Gets total unlocked balance of account in TGE (including already claimed tokens)\"},\"validateParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[]))\":{\"notice\":\"Validates vesting params for TGE\"},\"vest(address,uint256)\":{\"notice\":\"Vests token to given account (only called by TGE)\"},\"vested(address,address)\":{\"notice\":\"Mapping (tge, account) to amount of tokens vested to that account in TGE\"},\"vestedBalanceOf(address,address)\":{\"notice\":\"Gets remaining vested balance of account in TGE (all unclaimed tokens, even locked)\"},\"vestingParams(address)\":{\"notice\":\"Gets vesting params for TGE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"./interfaces/registry/IRegistry.sol\\\";\\nimport \\\"./interfaces/ITGE.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\ncontract Vesting is Initializable, IVesting {\\n    using SafeERC20Upgradeable for IToken;\\n\\n    // CONSTANTS\\n\\n    /// @notice Denominator for shares\\n    uint256 private constant DENOM = 100 * 10 ** 4;\\n\\n    // STORAGE\\n\\n    /// @notice Registry contract\\n    IRegistry public registry;\\n\\n    /// @notice Mapping of TGE addresses to total amount of tokens vested there\\n    mapping(address => uint256) public totalVested;\\n\\n    /// @notice Mapping (tge, account) to amount of tokens vested to that account in TGE\\n    mapping(address => mapping(address => uint256)) public vested;\\n\\n    /// @notice Mapping (tge, account) to amount of already claimed vested tokens to that account in TGE\\n    mapping(address => mapping(address => uint256)) public claimed;\\n\\n    /// @notice Mapping of TGE addresses to flags if claim TVL is reached for TGE\\n    /// @dev Users can claim their tokens only if claim TVL was reached.\\n    mapping(address => bool) public claimTVLReached;\\n\\n    /// @notice Mapping (tge, account) to amount of resolved tokens in TGE\\n    mapping(address => mapping(address => uint256)) public resolved;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on token vesting.\\n     * @param tge TGE address\\n     * @param account Claimer address\\n     * @param amount Amount of vested tokens\\n     */\\n    event Vested(address tge, address account, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on vested tokens recall\\n     * @param tge TGE address\\n     * @param account User address\\n     * @param amount Amount of recalled tokens\\n     */\\n    event Recall(address tge, address account, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on token claim.\\n     * @param tge TGE address\\n     * @param account Claimer address\\n     * @param amount Amount of claimed tokens\\n     */\\n    event Claimed(address tge, address account, uint256 amount);\\n\\n    /**\\n     * @dev Event emitted on vesting cancellation for account by resolver\\n     * @param tge TGE address\\n     * @param account Account address\\n     * @param amount Amount of burnt tokens\\n     */\\n    event Cancelled(address tge, address account, uint256 amount);\\n\\n    // MODIFIERS\\n\\n    modifier onlyTGE() {\\n        require(\\n            registry.typeOf(msg.sender) == IRecordsRegistry.ContractType.TGE,\\n            ExceptionsLibrary.NOT_TGE\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        IService service = registry.service();\\n        require(\\n            service.hasRole(service.SERVICE_MANAGER_ROLE(), msg.sender),\\n            ExceptionsLibrary.NOT_WHITELISTED\\n        );\\n        _;\\n    }\\n\\n    modifier onlyResolverOrTGE(address tge) {\\n        if (msg.sender != tge) {\\n            address[] memory resolvers = ITGE(tge)\\n                .getInfo()\\n                .vestingParams\\n                .resolvers;\\n            bool isResolver;\\n            for (uint256 i = 0; i < resolvers.length; i++) {\\n                if (resolvers[i] == msg.sender) {\\n                    isResolver = true;\\n                    break;\\n                }\\n            }\\n            require(isResolver, ExceptionsLibrary.NOT_RESOLVER);\\n        }\\n        _;\\n    }\\n\\n    // INITIALIZER AND CONSTRUCTOR\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Contract initializer\\n     * @param registry_ Protocol registry address\\n     */\\n    function initialize(IRegistry registry_) external initializer {\\n        registry = registry_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @notice Vests token to given account (only called by TGE)\\n     * @param to Address to vest tokens to\\n     * @param amount Amount of tokens to vest\\n     */\\n    function vest(address to, uint256 amount) external onlyTGE {\\n        totalVested[msg.sender] += amount;\\n        vested[msg.sender][to] += amount;\\n\\n        emit Vested(msg.sender, to, amount);\\n    }\\n\\n    /**\\n     * @notice Set's claim TVL reached for TGE (only called by manager)\\n     * @param tge Adddress of the TGE\\n     */\\n    function setClaimTVLReached(address tge) external onlyManager {\\n        require(\\n            ITGE(tge).state() == ITGE.State.Successful,\\n            ExceptionsLibrary.WRONG_STATE\\n        );\\n        claimTVLReached[tge] = true;\\n    }\\n\\n    /**\\n     * @notice Cancels vesting for given account in given tge, burning all remaining tokens (only called by TGE resolver or TGE)\\n     * @param tge TGE address\\n     * @param account Account address\\n     */\\n    function cancel(\\n        address tge,\\n        address account\\n    ) external onlyResolverOrTGE(tge) {\\n        uint256 amount = vestedBalanceOf(tge, account);\\n\\n        vested[tge][account] -= amount;\\n        totalVested[tge] -= amount;\\n\\n        resolved[tge][account] += amount;\\n\\n        emit Cancelled(tge, account, amount);\\n    }\\n\\n    /**\\n     * @notice Claims unlocked tokens from given TGE\\n     * @param tge TGE to claim from\\n     */\\n    function claim(address tge) external {\\n        uint256 amount = claimableBalanceOf(tge, msg.sender);\\n        require(amount > 0, ExceptionsLibrary.CLAIM_NOT_AVAILABLE);\\n\\n        claimed[tge][msg.sender] += amount;\\n        totalVested[tge] -= amount;\\n\\n        address token = ITGE(tge).token();\\n        uint256 tokenId = ITGE(tge).tokenId();\\n        if (ITGE(tge).isERC1155TGE()) {\\n            ITokenERC1155(token).setTGEVestedTokens(\\n                ITokenERC1155(token).getTotalTGEVestedTokens(tokenId) - amount,\\n                tokenId\\n            );\\n\\n            ITokenERC1155(token).mint(msg.sender, tokenId, amount);\\n        } else {\\n            IToken(token).setTGEVestedTokens(\\n                IToken(token).getTotalTGEVestedTokens() - amount\\n            );\\n\\n            IToken(token).mint(msg.sender, amount);\\n        }\\n        emit Claimed(tge, msg.sender, amount);\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Gets vesting params for TGE\\n     * @param tge TGE address\\n     */\\n    function vestingParams(\\n        address tge\\n    ) public view returns (VestingParams memory) {\\n        return ITGE(tge).getInfo().vestingParams;\\n    }\\n\\n    /**\\n     * @notice Validates vesting params for TGE\\n     * @param params Vesting params\\n     * @return True if params are valid (reverts otherwise)\\n     */\\n    function validateParams(\\n        VestingParams memory params\\n    ) public pure returns (bool) {\\n        require(\\n            params.cliffShare + params.spans * params.spanShare <= DENOM,\\n            ExceptionsLibrary.SHARES_SUM_EXCEEDS_ONE\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Gets total unlocked balance of account in TGE (including already claimed tokens)\\n     * @param tge TGE address\\n     * @param account Account address\\n     */\\n    function unlockedBalanceOf(\\n        address tge,\\n        address account\\n    ) public view returns (uint256) {\\n        // In active or failed TGE nothing is unlocked\\n        if (ITGE(tge).state() != ITGE.State.Successful) {\\n            return 0;\\n        }\\n\\n        // Is claim TVL is non-zero and is not reached, nothing is unlocked\\n        VestingParams memory params = vestingParams(tge);\\n        if (params.claimTVL > 0 && !claimTVLReached[tge]) {\\n            return 0;\\n        }\\n\\n        // Determine unlocked amount\\n        uint256 tgeEnd = ITGE(tge).getEnd();\\n        if (block.number < tgeEnd + params.cliff) {\\n            // If cliff is not exceeded, nothing is unlocked yet\\n            return 0;\\n        } else if (\\n            block.number <\\n            tgeEnd + params.cliff + params.spans * params.spanDuration\\n        ) {\\n            // If cliff is reached, but not all the period passed, calculate vested amount\\n            uint256 spansUnlocked = (block.number - tgeEnd - params.cliff) /\\n                params.spanDuration;\\n            uint256 totalShare = params.cliffShare +\\n                spansUnlocked *\\n                params.spanShare;\\n            return (vested[tge][account] * totalShare) / DENOM;\\n        } else {\\n            // Otherwise everything is unlocked\\n            return vested[tge][account];\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets claimable balance of account in TGE\\n     * @param tge TGE address\\n     * @param account Account address\\n     */\\n    function claimableBalanceOf(\\n        address tge,\\n        address account\\n    ) public view returns (uint256) {\\n        return unlockedBalanceOf(tge, account) - claimed[tge][account];\\n    }\\n\\n    /**\\n     * @notice Gets remaining vested balance of account in TGE (all unclaimed tokens, even locked)\\n     * @param tge TGE address\\n     * @param account Account address\\n     */\\n    function vestedBalanceOf(\\n        address tge,\\n        address account\\n    ) public view returns (uint256) {\\n        return vested[tge][account] - claimed[tge][account];\\n    }\\n}\\n\",\"keccak256\":\"0x4e82d9cc14eed041fe02fb051cd615ae69695717b9ac9a7c5bfbb88d45108b93\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITGE.sol\\\";\\n\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface ICustomProposal {}\\n\",\"keccak256\":\"0x8fe04afb34d557d6cec7fec360eec6609b879fb16fe6220d3654ebf972611bf3\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IInvoice {\\n    struct InvoiceCore {\\n        uint256 amount;\\n        address unitOfAccount;\\n        uint256 expirationBlock;\\n        string description;\\n        address[] whitelist;\\n    }\\n    struct InvoiceInfo {\\n        InvoiceCore core;\\n        uint256 invoiceId;\\n        address createdBy;\\n        bool isPaid;\\n        bool isCanceled;\\n    }\\n\\n    enum InvoiceState {\\n        None,\\n        Active,\\n        Paid,\\n        Expired,\\n        Canceled\\n    }\\n\\n    function createInvoice(address pool, InvoiceCore memory core) external;\\n\\n    function payInvoice(address pool, uint256 invoiceId) external payable;\\n\\n    function cancelInvoice(address pool, uint256 invoiceId) external;\\n\\n    function setInvoiceCanceled(address pool, uint256 invoiceId) external;\\n}\\n\",\"keccak256\":\"0xaedf4488b225db0cdf4bfcd066dc44d01c8fe0d17f9dffe5d1d32e86c66c6283\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\n\\nimport \\\"./governor/IGovernor.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\n\\ninterface IPool is IGovernorProposals {\\n    function initialize(ICompaniesRegistry.CompanyInfo memory companyInfo_) external;\\n\\n    function setNewOwnerWithSettings(\\n        address owner_,\\n        string memory trademark_,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_\\n    ) external;\\n\\n    function propose(\\n        address proposer,\\n        uint256 proposalType,\\n        IGovernor.ProposalCoreData memory core,\\n        IGovernor.ProposalMetaData memory meta\\n    ) external returns (uint256 proposalId);\\n\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\n\\n    function setProposalIdToTGE(address tge) external;\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function setSettings(\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        address[] memory secretary,\\n        address[] memory executor\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isDAO() external view returns (bool);\\n\\n    function trademark() external view returns (string memory);\\n\\n    function getGovernanceToken() external view returns (IToken);\\n\\n    function tokenExists(IToken token_) external view returns (bool);\\n\\n    function tokenTypeByAddress(\\n        address token_\\n    ) external view returns (IToken.TokenType);\\n\\n    function isValidProposer(address account) external view returns (bool);\\n\\n    function isPoolSecretary(address account) external view returns (bool);\\n\\n    function isLastProposalIdByTypeActive(\\n        uint256 type_\\n    ) external view returns (bool);\\n\\n    function validateGovernanceSettings(\\n        IGovernanceSettings.NewGovernanceSettings memory settings\\n    ) external pure;\\n\\n    function getPoolSecretary() external view returns (address[] memory);\\n\\n    function getPoolExecutor() external view returns (address[] memory);\\n\\n    function setCompanyInfo(\\n        uint256 _jurisdiction,\\n        uint256 _entityType,\\n        string memory _ein,\\n        string memory _dateOfIncorporation,\\n        string memory _OAuri\\n    ) external;\\n\\n    function castVote(uint256 proposalId, bool support) external;\\n\\n    function executeProposal(uint256 proposalId) external;\\n\\n    function customTxByOwner(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b50e1dbb4f42fcd0cc0fcfdeb4c1df17ae33a4ea3e5aa5954deec2a407177d1\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./ICustomProposal.sol\\\";\\nimport \\\"./registry/IRecordsRegistry.sol\\\";\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./IInvoice.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"./ITokenFactory.sol\\\";\\nimport \\\"./ITGEFactory.sol\\\";\\nimport \\\"./IPool.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createPool(\\n        ICompaniesRegistry.CompanyInfo memory companyInfo\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRecordsRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function setProtocolCollectedFee(\\n        address _token,\\n        uint256 _protocolTokenFee\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function vesting() external view returns (IVesting);\\n\\n    function tokenFactory() external view returns (ITokenFactory);\\n\\n    function tgeFactory() external view returns (ITGEFactory);\\n\\n    function invoice() external view returns (IInvoice);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function getProtocolCollectedFee(\\n        address token_\\n    ) external view returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function tokenBeacon() external view returns (address);\\n\\n    function tokenERC1155Beacon() external view returns (address);\\n\\n    function customProposal() external view returns (ICustomProposal);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply,\\n        IToken.TokenType tokenType\\n    ) external view;\\n\\n    function getPoolAddress(\\n        ICompaniesRegistry.CompanyInfo memory info\\n    ) external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function addInvoiceEvent(\\n        address pool,\\n        uint256 invoiceId\\n    ) external returns (uint256);\\n\\n    function purchasePool(\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        string memory trademark,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\n    ) external payable;\\n\\n    function transferPurchasedPoolByService(\\n        address newowner,\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        string memory trademark,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa2c1ba371d10ba4bf3469c5787e2fcf375197990276418ba09e3b0a1a6758c57\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenERC1155.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 duration;\\n        IVesting.VestingParams vestingParams;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(\\n        address _service,\\n        address _token,\\n        uint256 _tokenId,\\n        string memory _uri,\\n        TGEInfo calldata _info,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function tokenId() external view returns (uint256);\\n\\n    function state() external view returns (State);\\n\\n    function getInfo() external view returns (TGEInfo memory);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function redeemableBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n\\n    function getEnd() external view returns (uint256);\\n\\n    function totalPurchased() external view returns (uint256);\\n\\n    function isERC1155TGE() external view returns (bool);\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function transferFunds() external;\\n}\\n\",\"keccak256\":\"0xa2bc8da5fe60c0f63eda3685f5d1b2a2cd689d3e689e4cebddaf8a536a3e0c74\",\"license\":\"MIT\"},\"contracts/interfaces/ITGEFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface ITGEFactory {\\n    function createSecondaryTGE(\\n        address token,\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function createSecondaryTGEERC1155(\\n        address token,\\n        uint256 tokenId,\\n        string memory uri,\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function createPrimaryTGE(\\n        address poolAddress,\\n        IToken.TokenInfo memory tokenInfo,\\n        ITGE.TGEInfo memory tgeInfo,\\n        string memory metadataURI,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        address[] memory secretary,\\n        address[] memory executor\\n    ) external;\\n}\\n\",\"keccak256\":\"0x89a5b4c5d7ecf40cfb135b83a6a7c9531b4e4cfe5fde0f63773e4a995ee3fc0f\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        IService service_,\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function setTGEVestedTokens(uint256 amount) external;\\n\\n    function setProtocolFeeReserved(uint256 amount) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n\\n    function getTotalProtocolFeeReserved() external view returns (uint256);\\n\\n    function totalSupplyWithReserves() external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xcdebb5bfae30efecd2686363c8bcfbd17c49a3a466bfbcbf0f416dd06cdcec7b\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITokenERC1155 is IERC1155Upgradeable {\\n    function initialize(\\n        IService service_,\\n        address pool_,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 tokenId, uint256 amount) external;\\n\\n    function burn(address from, uint256 tokenId, uint256 amount) external;\\n\\n    function cap(uint256 tokenId) external view returns (uint256);\\n\\n    function unlockedBalanceOf(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (IToken.TokenType);\\n\\n    function lastTGE(uint256 tokenId) external view returns (address);\\n\\n    function getTGEList(\\n        uint256 tokenId\\n    ) external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful(\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function addTGE(address tge, uint256 tokenId) external;\\n\\n    function setTGEVestedTokens(uint256 amount, uint256 tokenId) external;\\n\\n    function setProtocolFeeReserved(uint256 amount, uint256 tokenId) external;\\n\\n    function getTotalTGEVestedTokens(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function getTotalProtocolFeeReserved(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function totalSupplyWithReserves(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function setURI(uint256 tokenId, string memory tokenURI) external;\\n\\n    function setTokenIdCap(uint256 _tokenId, uint256 _cap) external;\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe3b708ee1686ce06f0c36534d871bf39d76a9723fdd2cc7ee2a975c33eff552e\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenERC1155.sol\\\";\\n\\ninterface ITokenFactory {\\n    function createToken(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n\\n    function createTokenERC1155(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n}\\n\",\"keccak256\":\"0x8384f0537c953611968ad8b27d64958dbcfde71ccca7107e862da35074a6f6e2\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVesting {\\n    struct VestingParams {\\n        uint256 vestedShare;\\n        uint256 cliff;\\n        uint256 cliffShare;\\n        uint256 spans;\\n        uint256 spanDuration;\\n        uint256 spanShare;\\n        uint256 claimTVL;\\n        address[] resolvers;\\n    }\\n\\n    function vest(address to, uint256 amount) external;\\n\\n    function cancel(address tge, address account) external;\\n\\n    function validateParams(\\n        VestingParams memory params\\n    ) external pure returns (bool);\\n\\n    function vested(\\n        address tge,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function totalVested(address tge) external view returns (uint256);\\n\\n    function vestedBalanceOf(\\n        address tge,\\n        address account\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x171ca30737bf0ecf90116607928e0dc463c5ee9d9607b6d75a1ad08205a7691f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGovernanceSettings {\\n    /**\\n     * @notice Governance settings\\n     * @param proposalThreshold_ Proposal threshold\\n     * @param quorumThreshold_ Quorum threshold\\n     * @param decisionThreshold_ Decision threshold\\n     * @param votingDuration_ Voting duration\\n     * @param transferValueForDelay_ Transfer value for delay\\n     * @param executionDelays_ List of execution delays for all proposal types\\n     */\\n    struct NewGovernanceSettings {\\n        uint256 proposalThreshold;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 votingDuration;\\n        uint256 transferValueForDelay;\\n        uint256[4] executionDelays;\\n        uint256 votingStartDelay;\\n    }\\n\\n    function setGovernanceSettings(\\n        NewGovernanceSettings memory settings\\n    ) external;\\n}\\n\",\"keccak256\":\"0x87c5f66e426ec7964504da60b0bcba8708fc7c140f5b868e50895edbdf773af4\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/registry/IRecordsRegistry.sol\\\";\\n\\ninterface IGovernor {\\n    /**\\n     * @dev Struct with proposal core data\\n     * @param targets Targets\\n     * @param values ETH values\\n     * @param callDatas Call datas to pass in .call() to target\\n     * @param quorumThreshold Quorum threshold (as percents)\\n     * @param decisionThreshold Decision threshold (as percents)\\n     * @param executionDelay Execution delay after successful voting (blocks)\\n     */\\n    struct ProposalCoreData {\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] callDatas;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 executionDelay;\\n    }\\n\\n    /**\\n     * @dev Struct with proposal metadata\\n     * @param proposalType Proposal type\\n     * @param description Description\\n     * @param metaHash Metadata hash\\n     */\\n    struct ProposalMetaData {\\n        IRecordsRegistry.EventType proposalType;\\n        string description;\\n        string metaHash;\\n    }\\n\\n    function proposalState(uint256 proposalId)\\n        external\\n        view\\n        returns (uint256 state);\\n}\\n\",\"keccak256\":\"0x3cf82e458bf2a56bf9a856480786dd40f9544627494e598adfaf5decf38537fc\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(\\n        uint256 jurisdiction,\\n        uint256 entityType\\n    ) external returns (CompanyInfo memory);\\n\\n    function createCompany(\\n        CompanyInfo calldata info\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9f65d3613179e2860588871fce34d6cf9e15221089f6572eae9251b8641be6a6\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param eventContract Address of the Event contract\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        address eventContract;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(\\n        address pool,\\n        uint256 proposalId\\n    ) external returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        address eventContract,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n\\n     \\n}\\n\",\"keccak256\":\"0x5ba05b58da82085ef5fd43f4b42f0f1c75881a41822c246978c260f98d88dee3\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\nimport \\\"../IService.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {\\n    function service() external view returns (IService);\\n\\n    function COMPANIES_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function log(\\n        address sender,\\n        address receiver,\\n        uint256 value, \\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x395d33740589a5d1da9cac45c1ce06bf9d7c39378f9d5d3e3af4971e0eaf1d0c\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant WRONG_TOKEN_ADDRESS = \\\"WRONG_TOKEN_ADDRESS\\\";\\n    string public constant GOVERNANCE_TOKEN_EXISTS = \\\"GOVERNANCE_TOKEN_EXISTS\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n    string public constant ALREADY_VOTED = \\\"ALREADY_VOTED\\\";\\n    string public constant ZERO_VOTES = \\\"ZERO_VOTES\\\";\\n    string public constant ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS =\\n        \\\"ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\\\";\\n    string public constant EMPTY_ADDRESS = \\\"EMPTY_ADDRESS\\\";\\n    string public constant NOT_VALID_PROPOSER = \\\"NOT_VALID_PROPOSER\\\";\\n    string public constant SHARES_SUM_EXCEEDS_ONE = \\\"SHARES_SUM_EXCEEDS_ONE\\\";\\n    string public constant NOT_RESOLVER = \\\"NOT_RESOLVER\\\";\\n    string public constant NOT_REGISTRY = \\\"NOT_REGISTRY\\\";\\n    string public constant INVALID_TARGET = \\\"INVALID_TARGET\\\";\\n    string public constant NOT_TGE_FACTORY = \\\"NOT_TGE_FACTORY\\\";\\n    string public constant WRONG_AMOUNT = \\\"WRONG_AMOUNT\\\";\\n    string public constant WRONG_BLOCK_NUMBER = \\\"WRONG_BLOCK_NUMBER\\\";\\n    string public constant NOT_VALID_EXECUTOR = \\\"NOT_VALID_EXECUTOR\\\";\\n    string public constant POOL_PAUSED = \\\"POOL_PAUSED\\\";\\n    string public constant NOT_INVOICE_MANAGER = \\\"NOT_INVOICE_MANAGER\\\";\\n     string public constant WRONG_RESOLVER = \\\"WRONG_RESOLVER\\\";\\n}\\n\",\"keccak256\":\"0x5e1222129b161c61bc8d29f311323ed555d0d6398e46b41c0cc5e662c24c1d5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6119e0806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637b10399911610097578063b13e4a9d11610066578063b13e4a9d1461027d578063c4d66de81461029d578063d01dacd0146102b0578063f7ce305c146102db57600080fd5b80637b103999146101f3578063824c1db5146102245780638d8d10151461023757806392cccc7e1461026a57600080fd5b80632797c6c8116100d35780632797c6c8146101a7578063306f9da9146101ba5780634493ff1c146101cd578063610f8eb0146101e057600080fd5b806309a6d758146101055780630c9cbf0e1461012e5780631e83409a146101675780631ee651121461017c575b600080fd5b61011861011336600461130b565b6102ee565b6040516101259190611328565b60405180910390f35b61015961013c3660046113ce565b600360209081526000928352604080842090915290825290205481565b604051908152602001610125565b61017a61017536600461130b565b6103a6565b005b61015961018a3660046113ce565b600560209081526000928352604080842090915290825290205481565b61017a6101b5366004611407565b610865565b6101596101c83660046113ce565b6109d3565b6101596101db3660046113ce565b610c29565b6101596101ee3660046113ce565b610c77565b60005461020c906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610125565b61017a6102323660046113ce565b610cb3565b61025a61024536600461130b565b60046020526000908152604090205460ff1681565b6040519015158152602001610125565b61017a61027836600461130b565b610ed4565b61015961028b36600461130b565b60016020526000908152604090205481565b61017a6102ab36600461130b565b61114a565b6101596102be3660046113ce565b600260209081526000928352604080842090915290825290205481565b61025a6102e9366004611555565b611272565b61033660405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b816001600160a01b0316635a9b0b896040518163ffffffff1660e01b8152600401600060405180830381865afa158015610374573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039c919081019061170c565b60c0015192915050565b60006103b28233610c77565b90506000811160405180604001604052806013815260200172434c41494d5f4e4f545f415641494c41424c4560681b8152509061040b5760405162461bcd60e51b81526004016104029190611808565b60405180910390fd5b506001600160a01b03821660009081526003602090815260408083203384529091528120805483929061043f90849061186c565b90915550506001600160a01b0382166000908152600160205260408120805483929061046c90849061187f565b925050819055506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611892565b90506000836001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d91906118af565b9050836001600160a01b031663b0935dd66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906118c8565b156106e8576040516328a477bf60e01b8152600481018290526001600160a01b0383169063188ada3d90859083906328a477bf90602401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906118af565b610623919061187f565b836040518363ffffffff1660e01b815260040161064a929190918252602082015260400190565b600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b5050604051630ab714fb60e11b815233600482015260248101849052604481018690526001600160a01b038516925063156e29f69150606401600060405180830381600087803b1580156106cb57600080fd5b505af11580156106df573d6000803e3d6000fd5b50505050610815565b816001600160a01b0316633946114c84846001600160a01b031663d554934b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a91906118af565b610764919061187f565b6040518263ffffffff1660e01b815260040161078291815260200190565b600060405180830381600087803b15801561079c57600080fd5b505af11580156107b0573d6000803e3d6000fd5b50506040516340c10f1960e01b8152336004820152602481018690526001600160a01b03851692506340c10f199150604401600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050505b604080516001600160a01b03861681523360208201529081018490527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683906060015b60405180910390a150505050565b6004600054604051630db9619f60e31b8152336004820152620100009091046001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190611900565b60048111156108e9576108e96118ea565b14604051806040016040528060078152602001664e4f545f54474560c81b815250906109285760405162461bcd60e51b81526004016104029190611808565b50336000908152600160205260408120805483929061094890849061186c565b90915550503360009081526002602090815260408083206001600160a01b03861684529091528120805483929061098090849061186c565b9091555050604080513381526001600160a01b03841660208201529081018290527f37e8b3f82c8fff5638a6b4a20e7359964331548e81edec9dcc714a75e12173be906060015b60405180910390a15050565b60006002836001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611921565b6002811115610a4a57610a4a6118ea565b14610a5757506000610c23565b6000610a62846102ee565b905060008160c00151118015610a9157506001600160a01b03841660009081526004602052604090205460ff16155b15610aa0576000915050610c23565b6000846001600160a01b0316639f05a36d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0491906118af565b9050816020015181610b16919061186c565b431015610b2857600092505050610c23565b81608001518260600151610b3c9190611942565b6020830151610b4b908361186c565b610b55919061186c565b431015610bf9576000826080015183602001518343610b74919061187f565b610b7e919061187f565b610b889190611959565b905060008360a0015182610b9c9190611942565b8460400151610bab919061186c565b6001600160a01b038089166000908152600260209081526040808320938b1683529290522054909150620f424090610be4908390611942565b610bee9190611959565b945050505050610c23565b5050506001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b6001600160a01b038083166000818152600360209081526040808320948616808452948252808320549383526002825280832094835293905291822054610c70919061187f565b9392505050565b6001600160a01b038083166000908152600360209081526040808320938516835292905290812054610ca984846109d3565b610c70919061187f565b81336001600160a01b03821614610dd6576000816001600160a01b0316635a9b0b896040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2c919081019061170c565b60c0015160e0015190506000805b8251811015610d9057336001600160a01b0316838281518110610d5f57610d5f61197b565b60200260200101516001600160a01b031603610d7e5760019150610d90565b80610d8881611991565b915050610d3a565b5060408051808201909152600c81526b2727aa2fa922a9a7a62b22a960a11b602082015281610dd25760405162461bcd60e51b81526004016104029190611808565b5050505b6000610de28484610c29565b6001600160a01b038086166000908152600260209081526040808320938816835292905290812080549293508392909190610e1e90849061187f565b90915550506001600160a01b03841660009081526001602052604081208054839290610e4b90849061187f565b90915550506001600160a01b03808516600090815260056020908152604080832093871683529290529081208054839290610e8790849061186c565b9091555050604080516001600160a01b038087168252851660208201529081018290527f915fb8c652d6245752cc491b71bd8e87ab6761417f8d2ca353c8055103294c0390606001610857565b60008060029054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190611892565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906118af565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906118c8565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b8152509061106b5760405162461bcd60e51b81526004016104029190611808565b506002826001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611921565b60028111156110e1576110e16118ea565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b815250906111245760405162461bcd60e51b81526004016104029190611808565b50506001600160a01b03166000908152600460205260409020805460ff19166001179055565b600054610100900460ff161580801561116a5750600054600160ff909116105b806111845750303b158015611184575060005460ff166001145b6111e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610402565b6000805460ff19166001179055801561120a576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561126e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016109c7565b5050565b6000620f42408260a00151836060015161128c9190611942565b836040015161129b919061186c565b1115604051806040016040528060168152602001755348415245535f53554d5f455843454544535f4f4e4560501b815250906112ea5760405162461bcd60e51b81526004016104029190611808565b50600192915050565b6001600160a01b038116811461130857600080fd5b50565b60006020828403121561131d57600080fd5b8135610c70816112f3565b6000602080835261012083018451828501528185015160408501526040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100808187015250818151808452610140870191508483019350600092505b808310156113c35783516001600160a01b0316825292840192600192909201919084019061139a565b509695505050505050565b600080604083850312156113e157600080fd5b82356113ec816112f3565b915060208301356113fc816112f3565b809150509250929050565b6000806040838503121561141a57600080fd5b8235611425816112f3565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561146d5761146d611433565b60405290565b604051610160810167ffffffffffffffff8111828210171561146d5761146d611433565b604051601f8201601f1916810167ffffffffffffffff811182821017156114c0576114c0611433565b604052919050565b600067ffffffffffffffff8211156114e2576114e2611433565b5060051b60200190565b600082601f8301126114fd57600080fd5b8135602061151261150d836114c8565b611497565b82815260059290921b8401810191818101908684111561153157600080fd5b8286015b848110156113c3578035611548816112f3565b8352918301918301611535565b60006020828403121561156757600080fd5b813567ffffffffffffffff8082111561157f57600080fd5b90830190610100828603121561159457600080fd5b61159c611449565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e0830135828111156115ee57600080fd5b6115fa878286016114ec565b60e08301525095945050505050565b8051611614816112f3565b919050565b600082601f83011261162a57600080fd5b8151602061163a61150d836114c8565b82815260059290921b8401810191818101908684111561165957600080fd5b8286015b848110156113c3578051611670816112f3565b835291830191830161165d565b6000610100828403121561169057600080fd5b611698611449565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015167ffffffffffffffff8111156116f457600080fd5b61170084828501611619565b60e08301525092915050565b60006020828403121561171e57600080fd5b815167ffffffffffffffff8082111561173657600080fd5b90830190610160828603121561174b57600080fd5b611753611473565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561179b57600080fd5b6117a78782860161167d565b60c08301525060e0830151828111156117bf57600080fd5b6117cb87828601611619565b60e08301525061010091506117e1828401611609565b91810191909152610120828101519082015261014091820151918101919091529392505050565b600060208083528351808285015260005b8181101561183557858101830151858201604001528201611819565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c2357610c23611856565b81810381811115610c2357610c23611856565b6000602082840312156118a457600080fd5b8151610c70816112f3565b6000602082840312156118c157600080fd5b5051919050565b6000602082840312156118da57600080fd5b81518015158114610c7057600080fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121561191257600080fd5b815160058110610c7057600080fd5b60006020828403121561193357600080fd5b815160038110610c7057600080fd5b8082028115828204841417610c2357610c23611856565b60008261197657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600182016119a3576119a3611856565b506001019056fea264697066735822122020c8b778a34da08ee8d529e3c362b1e1cfb1f3b4ef357515ff59b2895e230d3a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637b10399911610097578063b13e4a9d11610066578063b13e4a9d1461027d578063c4d66de81461029d578063d01dacd0146102b0578063f7ce305c146102db57600080fd5b80637b103999146101f3578063824c1db5146102245780638d8d10151461023757806392cccc7e1461026a57600080fd5b80632797c6c8116100d35780632797c6c8146101a7578063306f9da9146101ba5780634493ff1c146101cd578063610f8eb0146101e057600080fd5b806309a6d758146101055780630c9cbf0e1461012e5780631e83409a146101675780631ee651121461017c575b600080fd5b61011861011336600461130b565b6102ee565b6040516101259190611328565b60405180910390f35b61015961013c3660046113ce565b600360209081526000928352604080842090915290825290205481565b604051908152602001610125565b61017a61017536600461130b565b6103a6565b005b61015961018a3660046113ce565b600560209081526000928352604080842090915290825290205481565b61017a6101b5366004611407565b610865565b6101596101c83660046113ce565b6109d3565b6101596101db3660046113ce565b610c29565b6101596101ee3660046113ce565b610c77565b60005461020c906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610125565b61017a6102323660046113ce565b610cb3565b61025a61024536600461130b565b60046020526000908152604090205460ff1681565b6040519015158152602001610125565b61017a61027836600461130b565b610ed4565b61015961028b36600461130b565b60016020526000908152604090205481565b61017a6102ab36600461130b565b61114a565b6101596102be3660046113ce565b600260209081526000928352604080842090915290825290205481565b61025a6102e9366004611555565b611272565b61033660405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b816001600160a01b0316635a9b0b896040518163ffffffff1660e01b8152600401600060405180830381865afa158015610374573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261039c919081019061170c565b60c0015192915050565b60006103b28233610c77565b90506000811160405180604001604052806013815260200172434c41494d5f4e4f545f415641494c41424c4560681b8152509061040b5760405162461bcd60e51b81526004016104029190611808565b60405180910390fd5b506001600160a01b03821660009081526003602090815260408083203384529091528120805483929061043f90849061186c565b90915550506001600160a01b0382166000908152600160205260408120805483929061046c90849061187f565b925050819055506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190611892565b90506000836001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d91906118af565b9050836001600160a01b031663b0935dd66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a191906118c8565b156106e8576040516328a477bf60e01b8152600481018290526001600160a01b0383169063188ada3d90859083906328a477bf90602401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906118af565b610623919061187f565b836040518363ffffffff1660e01b815260040161064a929190918252602082015260400190565b600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b5050604051630ab714fb60e11b815233600482015260248101849052604481018690526001600160a01b038516925063156e29f69150606401600060405180830381600087803b1580156106cb57600080fd5b505af11580156106df573d6000803e3d6000fd5b50505050610815565b816001600160a01b0316633946114c84846001600160a01b031663d554934b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075a91906118af565b610764919061187f565b6040518263ffffffff1660e01b815260040161078291815260200190565b600060405180830381600087803b15801561079c57600080fd5b505af11580156107b0573d6000803e3d6000fd5b50506040516340c10f1960e01b8152336004820152602481018690526001600160a01b03851692506340c10f199150604401600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050505b604080516001600160a01b03861681523360208201529081018490527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683906060015b60405180910390a150505050565b6004600054604051630db9619f60e31b8152336004820152620100009091046001600160a01b031690636dcb0cf890602401602060405180830381865afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190611900565b60048111156108e9576108e96118ea565b14604051806040016040528060078152602001664e4f545f54474560c81b815250906109285760405162461bcd60e51b81526004016104029190611808565b50336000908152600160205260408120805483929061094890849061186c565b90915550503360009081526002602090815260408083206001600160a01b03861684529091528120805483929061098090849061186c565b9091555050604080513381526001600160a01b03841660208201529081018290527f37e8b3f82c8fff5638a6b4a20e7359964331548e81edec9dcc714a75e12173be906060015b60405180910390a15050565b60006002836001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611921565b6002811115610a4a57610a4a6118ea565b14610a5757506000610c23565b6000610a62846102ee565b905060008160c00151118015610a9157506001600160a01b03841660009081526004602052604090205460ff16155b15610aa0576000915050610c23565b6000846001600160a01b0316639f05a36d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0491906118af565b9050816020015181610b16919061186c565b431015610b2857600092505050610c23565b81608001518260600151610b3c9190611942565b6020830151610b4b908361186c565b610b55919061186c565b431015610bf9576000826080015183602001518343610b74919061187f565b610b7e919061187f565b610b889190611959565b905060008360a0015182610b9c9190611942565b8460400151610bab919061186c565b6001600160a01b038089166000908152600260209081526040808320938b1683529290522054909150620f424090610be4908390611942565b610bee9190611959565b945050505050610c23565b5050506001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b6001600160a01b038083166000818152600360209081526040808320948616808452948252808320549383526002825280832094835293905291822054610c70919061187f565b9392505050565b6001600160a01b038083166000908152600360209081526040808320938516835292905290812054610ca984846109d3565b610c70919061187f565b81336001600160a01b03821614610dd6576000816001600160a01b0316635a9b0b896040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d2c919081019061170c565b60c0015160e0015190506000805b8251811015610d9057336001600160a01b0316838281518110610d5f57610d5f61197b565b60200260200101516001600160a01b031603610d7e5760019150610d90565b80610d8881611991565b915050610d3a565b5060408051808201909152600c81526b2727aa2fa922a9a7a62b22a960a11b602082015281610dd25760405162461bcd60e51b81526004016104029190611808565b5050505b6000610de28484610c29565b6001600160a01b038086166000908152600260209081526040808320938816835292905290812080549293508392909190610e1e90849061187f565b90915550506001600160a01b03841660009081526001602052604081208054839290610e4b90849061187f565b90915550506001600160a01b03808516600090815260056020908152604080832093871683529290529081208054839290610e8790849061186c565b9091555050604080516001600160a01b038087168252851660208201529081018290527f915fb8c652d6245752cc491b71bd8e87ab6761417f8d2ca353c8055103294c0390606001610857565b60008060029054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190611892565b9050806001600160a01b03166391d14854826001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906118af565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906118c8565b6040518060400160405280600f81526020016e1393d517d5d2125511531254d51151608a1b8152509061106b5760405162461bcd60e51b81526004016104029190611808565b506002826001600160a01b031663c19d93fb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190611921565b60028111156110e1576110e16118ea565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b815250906111245760405162461bcd60e51b81526004016104029190611808565b50506001600160a01b03166000908152600460205260409020805460ff19166001179055565b600054610100900460ff161580801561116a5750600054600160ff909116105b806111845750303b158015611184575060005460ff166001145b6111e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610402565b6000805460ff19166001179055801561120a576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561126e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016109c7565b5050565b6000620f42408260a00151836060015161128c9190611942565b836040015161129b919061186c565b1115604051806040016040528060168152602001755348415245535f53554d5f455843454544535f4f4e4560501b815250906112ea5760405162461bcd60e51b81526004016104029190611808565b50600192915050565b6001600160a01b038116811461130857600080fd5b50565b60006020828403121561131d57600080fd5b8135610c70816112f3565b6000602080835261012083018451828501528185015160408501526040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100808187015250818151808452610140870191508483019350600092505b808310156113c35783516001600160a01b0316825292840192600192909201919084019061139a565b509695505050505050565b600080604083850312156113e157600080fd5b82356113ec816112f3565b915060208301356113fc816112f3565b809150509250929050565b6000806040838503121561141a57600080fd5b8235611425816112f3565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561146d5761146d611433565b60405290565b604051610160810167ffffffffffffffff8111828210171561146d5761146d611433565b604051601f8201601f1916810167ffffffffffffffff811182821017156114c0576114c0611433565b604052919050565b600067ffffffffffffffff8211156114e2576114e2611433565b5060051b60200190565b600082601f8301126114fd57600080fd5b8135602061151261150d836114c8565b611497565b82815260059290921b8401810191818101908684111561153157600080fd5b8286015b848110156113c3578035611548816112f3565b8352918301918301611535565b60006020828403121561156757600080fd5b813567ffffffffffffffff8082111561157f57600080fd5b90830190610100828603121561159457600080fd5b61159c611449565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e0830135828111156115ee57600080fd5b6115fa878286016114ec565b60e08301525095945050505050565b8051611614816112f3565b919050565b600082601f83011261162a57600080fd5b8151602061163a61150d836114c8565b82815260059290921b8401810191818101908684111561165957600080fd5b8286015b848110156113c3578051611670816112f3565b835291830191830161165d565b6000610100828403121561169057600080fd5b611698611449565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015167ffffffffffffffff8111156116f457600080fd5b61170084828501611619565b60e08301525092915050565b60006020828403121561171e57600080fd5b815167ffffffffffffffff8082111561173657600080fd5b90830190610160828603121561174b57600080fd5b611753611473565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561179b57600080fd5b6117a78782860161167d565b60c08301525060e0830151828111156117bf57600080fd5b6117cb87828601611619565b60e08301525061010091506117e1828401611609565b91810191909152610120828101519082015261014091820151918101919091529392505050565b600060208083528351808285015260005b8181101561183557858101830151858201604001528201611819565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610c2357610c23611856565b81810381811115610c2357610c23611856565b6000602082840312156118a457600080fd5b8151610c70816112f3565b6000602082840312156118c157600080fd5b5051919050565b6000602082840312156118da57600080fd5b81518015158114610c7057600080fd5b634e487b7160e01b600052602160045260246000fd5b60006020828403121561191257600080fd5b815160058110610c7057600080fd5b60006020828403121561193357600080fd5b815160038110610c7057600080fd5b8082028115828204841417610c2357610c23611856565b60008261197657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600182016119a3576119a3611856565b506001019056fea264697066735822122020c8b778a34da08ee8d529e3c362b1e1cfb1f3b4ef357515ff59b2895e230d3a64736f6c63430008110033",
  "devdoc": {
    "events": {
      "Cancelled(address,address,uint256)": {
        "details": "Event emitted on vesting cancellation for account by resolver",
        "params": {
          "account": "Account address",
          "amount": "Amount of burnt tokens",
          "tge": "TGE address"
        }
      },
      "Claimed(address,address,uint256)": {
        "details": "Event emitted on token claim.",
        "params": {
          "account": "Claimer address",
          "amount": "Amount of claimed tokens",
          "tge": "TGE address"
        }
      },
      "Recall(address,address,uint256)": {
        "details": "Event emitted on vested tokens recall",
        "params": {
          "account": "User address",
          "amount": "Amount of recalled tokens",
          "tge": "TGE address"
        }
      },
      "Vested(address,address,uint256)": {
        "details": "Event emitted on token vesting.",
        "params": {
          "account": "Claimer address",
          "amount": "Amount of vested tokens",
          "tge": "TGE address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancel(address,address)": {
        "params": {
          "account": "Account address",
          "tge": "TGE address"
        }
      },
      "claim(address)": {
        "params": {
          "tge": "TGE to claim from"
        }
      },
      "claimableBalanceOf(address,address)": {
        "params": {
          "account": "Account address",
          "tge": "TGE address"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "initialize(address)": {
        "params": {
          "registry_": "Protocol registry address"
        }
      },
      "setClaimTVLReached(address)": {
        "params": {
          "tge": "Adddress of the TGE"
        }
      },
      "unlockedBalanceOf(address,address)": {
        "params": {
          "account": "Account address",
          "tge": "TGE address"
        }
      },
      "validateParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[]))": {
        "params": {
          "params": "Vesting params"
        },
        "returns": {
          "_0": "True if params are valid (reverts otherwise)"
        }
      },
      "vest(address,uint256)": {
        "params": {
          "amount": "Amount of tokens to vest",
          "to": "Address to vest tokens to"
        }
      },
      "vestedBalanceOf(address,address)": {
        "params": {
          "account": "Account address",
          "tge": "TGE address"
        }
      },
      "vestingParams(address)": {
        "params": {
          "tge": "TGE address"
        }
      }
    },
    "stateVariables": {
      "claimTVLReached": {
        "details": "Users can claim their tokens only if claim TVL was reached."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancel(address,address)": {
        "notice": "Cancels vesting for given account in given tge, burning all remaining tokens (only called by TGE resolver or TGE)"
      },
      "claim(address)": {
        "notice": "Claims unlocked tokens from given TGE"
      },
      "claimTVLReached(address)": {
        "notice": "Mapping of TGE addresses to flags if claim TVL is reached for TGE"
      },
      "claimableBalanceOf(address,address)": {
        "notice": "Gets claimable balance of account in TGE"
      },
      "claimed(address,address)": {
        "notice": "Mapping (tge, account) to amount of already claimed vested tokens to that account in TGE"
      },
      "initialize(address)": {
        "notice": "Contract initializer"
      },
      "registry()": {
        "notice": "Registry contract"
      },
      "resolved(address,address)": {
        "notice": "Mapping (tge, account) to amount of resolved tokens in TGE"
      },
      "setClaimTVLReached(address)": {
        "notice": "Set's claim TVL reached for TGE (only called by manager)"
      },
      "totalVested(address)": {
        "notice": "Mapping of TGE addresses to total amount of tokens vested there"
      },
      "unlockedBalanceOf(address,address)": {
        "notice": "Gets total unlocked balance of account in TGE (including already claimed tokens)"
      },
      "validateParams((uint256,uint256,uint256,uint256,uint256,uint256,uint256,address[]))": {
        "notice": "Validates vesting params for TGE"
      },
      "vest(address,uint256)": {
        "notice": "Vests token to given account (only called by TGE)"
      },
      "vested(address,address)": {
        "notice": "Mapping (tge, account) to amount of tokens vested to that account in TGE"
      },
      "vestedBalanceOf(address,address)": {
        "notice": "Gets remaining vested balance of account in TGE (all unclaimed tokens, even locked)"
      },
      "vestingParams(address)": {
        "notice": "Gets vesting params for TGE"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1184,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1187,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19539,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "registry",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IRegistry)22560"
      },
      {
        "astId": 19544,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "totalVested",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19551,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "vested",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19558,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "claimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19563,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "claimTVLReached",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19570,
        "contract": "contracts/Vesting.sol:Vesting",
        "label": "resolved",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)22560": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}