{
  "address": "0xBe416E863C68eD4E0E0b625f5e0f4AD8f85a5043",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoicePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "cancelInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        }
      ],
      "name": "createInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "invoiceState",
      "outputs": [
        {
          "internalType": "enum IInvoice.InvoiceState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invoices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "createdBy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPaid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCanceled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isValidInvoiceManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastInvoiceIdForPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "payInvoice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "setInvoiceCanceled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "setInvoicePaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        }
      ],
      "name": "validateInvoiceCore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2ce01764100aa150920291c6c8231e6364f99b93b7f67279402404fc023cb40",
  "receipt": {
    "to": null,
    "from": "0x40307162145227b6eC8CEF50C30A755C2f260633",
    "contractAddress": "0xBe416E863C68eD4E0E0b625f5e0f4AD8f85a5043",
    "transactionIndex": 48,
    "gasUsed": "2287111",
    "logsBloom": "0x
    "blockHash": "0x57106675242e2d78880253cdbee08b1a338e1b2721cbfcc222f76ee4f2b6802d",
    "transactionHash": "0xa2ce01764100aa150920291c6c8231e6364f99b93b7f67279402404fc023cb40",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 43863177,
        "transactionHash": "0xa2ce01764100aa150920291c6c8231e6364f99b93b7f67279402404fc023cb40",
        "address": "0xBe416E863C68eD4E0E0b625f5e0f4AD8f85a5043",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 278,
        "blockHash": "0x57106675242e2d78880253cdbee08b1a338e1b2721cbfcc222f76ee4f2b6802d"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 43863177,
        "transactionHash": "0xa2ce01764100aa150920291c6c8231e6364f99b93b7f67279402404fc023cb40",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000040307162145227b6ec8cef50c30a755c2f260633",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000116eb979523000700000000000000000000000000000000000000000000000681bcd492134e52400000000000000000000000000000000000000000000222eecb37a61b4ad6dca800000000000000000000000000000000000000000000000680a5e8fa7e2b52390000000000000000000000000000000000000000000222eecc4e91b2dff9dcaf",
        "logIndex": 279,
        "blockHash": "0x57106675242e2d78880253cdbee08b1a338e1b2721cbfcc222f76ee4f2b6802d"
      }
    ],
    "blockNumber": 43863177,
    "cumulativeGasUsed": "11652319",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "67fc85ef621887c5a1d0a259d5aa2aa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoiceCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoicePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"cancelInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"createInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"invoiceState\",\"outputs\":[{\"internalType\":\"enum IInvoice.InvoiceState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isValidInvoiceManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvoiceIdForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"payInvoice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"setInvoiceCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"setInvoicePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"validateInvoiceCore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"InvoiceCanceled(address,uint256)\":{\"details\":\"Event emitted when invoice is canceled\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}},\"InvoiceCreated(address,uint256)\":{\"details\":\"Event emitted on invoice creating\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}},\"InvoicePaid(address,uint256)\":{\"details\":\"Event emitted when invoice is paid\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}}},\"kind\":\"dev\",\"methods\":{\"cancelInvoice(address,uint256)\":{\"params\":{\"invoiceId\":\"invoiceId\",\"pool\":\"Pool address\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createInvoice(address,(uint256,address,uint256,string,address[]))\":{\"params\":{\"core\":\"InvoiceCore\",\"pool\":\"Pool address\"}},\"initialize(address)\":{\"params\":{\"registry_\":\"Protocol registry address\"}},\"invoiceState(address,uint256)\":{\"details\":\"This method returns invoice state\",\"params\":{\"invoiceId\":\"Invoice ID\"},\"returns\":{\"_0\":\"Invoice State\"}},\"isValidInvoiceManager(address,address)\":{\"details\":\"This getter check if address is Valid Invoice Manager\"},\"payInvoice(address,uint256)\":{\"params\":{\"invoiceId\":\"InvoiceId\",\"pool\":\"Pool address\"}},\"setInvoiceCanceled(address,uint256)\":{\"params\":{\"invoiceId\":\"invoiceId\",\"pool\":\"Pool address\"}},\"setInvoicePaid(address,uint256)\":{\"params\":{\"invoiceId\":\"invoiceId\",\"pool\":\"Pool address\"}},\"validateInvoiceCore((uint256,address,uint256,string,address[]))\":{\"params\":{\"core\":\"Invoice params\"},\"returns\":{\"_0\":\"True if params are valid (reverts otherwise)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelInvoice(address,uint256)\":{\"notice\":\"Cancel Invoice by invoice id (only PoolSecretary)\"},\"createInvoice(address,(uint256,address,uint256,string,address[]))\":{\"notice\":\"create Invoice for given pool (only PoolSecretary)\"},\"eventIndex(address,uint256)\":{\"notice\":\"Event Index\"},\"initialize(address)\":{\"notice\":\"Contract initializer\"},\"invoices(address,uint256)\":{\"notice\":\"Invoice Info\"},\"lastInvoiceIdForPool(address)\":{\"notice\":\"last InvoiceId For Pool\"},\"payInvoice(address,uint256)\":{\"notice\":\"Pay Invoice\"},\"registry()\":{\"notice\":\"Registry contract\"},\"setInvoiceCanceled(address,uint256)\":{\"notice\":\"Set invoice paid for manual invoice cancellation\"},\"setInvoicePaid(address,uint256)\":{\"notice\":\"Set invoice paid for manual confirmation of payment\"},\"validateInvoiceCore((uint256,address,uint256,string,address[]))\":{\"notice\":\"Validates invoice params\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Invoice.sol\":\"Invoice\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Invoice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"./interfaces/registry/IRegistry.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IInvoice.sol\\\";\\nimport \\\"./interfaces/IPausable.sol\\\";\\ncontract Invoice is Initializable, ReentrancyGuardUpgradeable, IInvoice {\\n    using AddressUpgradeable for address payable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // STORAGE\\n\\n    /// @notice Registry contract\\n    IRegistry public registry;\\n\\n    /// @notice last InvoiceId For Pool\\n    mapping(address => uint256) public lastInvoiceIdForPool;\\n\\n    /// @notice Invoice Info\\n    mapping(address => mapping(uint256 => InvoiceInfo)) public invoices;\\n\\n    /// @notice Event Index\\n    mapping(address => mapping(uint256 => uint256)) public eventIndex;\\n\\n    // EVENTS\\n\\n    /**\\n     * @dev Event emitted on invoice creating\\n     * @param pool Pool address\\n     * @param invoiceId InvoiceId for Pool\\n     */\\n    event InvoiceCreated(address pool, uint256 invoiceId);\\n\\n    /**\\n     * @dev Event emitted when invoice is canceled\\n     * @param pool Pool address\\n     * @param invoiceId InvoiceId for Pool\\n     */\\n    event InvoiceCanceled(address pool, uint256 invoiceId);\\n\\n    /**\\n     * @dev Event emitted when invoice is paid\\n     * @param pool Pool address\\n     * @param invoiceId InvoiceId for Pool\\n     */\\n    event InvoicePaid(address pool, uint256 invoiceId);\\n\\n    // MODIFIERS\\n    modifier onlyValidInvoiceManager(address pool) {\\n        require(\\n            isValidInvoiceManager(pool, msg.sender),\\n            ExceptionsLibrary.NOT_INVOICE_MANAGER\\n        );\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            registry.service().hasRole(\\n                registry.service().SERVICE_MANAGER_ROLE(),\\n                msg.sender\\n            ),\\n            ExceptionsLibrary.INVALID_USER\\n        );\\n        _;\\n    }\\n\\n    modifier whenPoolNotPaused(address pool) {\\n        require(!IPausable(pool).paused(), ExceptionsLibrary.POOL_PAUSED);\\n        \\n        _;\\n    }\\n\\n    modifier onlyActive(address pool, uint256 invoiceId) {\\n        require(\\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\\n            ExceptionsLibrary.WRONG_STATE\\n        );\\n        _;\\n    }\\n\\n    // INITIALIZER AND CONSTRUCTOR\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Contract initializer\\n     * @param registry_ Protocol registry address\\n     */\\n    function initialize(IRegistry registry_) external initializer {\\n        registry = registry_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @notice Pay Invoice\\n     * @param pool Pool address\\n     * @param invoiceId InvoiceId\\n     */\\n    function payInvoice(\\n        address pool,\\n        uint256 invoiceId\\n    ) external payable nonReentrant whenPoolNotPaused(pool) {\\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\\n\\n        require(\\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\\n            ExceptionsLibrary.WRONG_STATE\\n        );\\n\\n        //check if payer is whitelisted\\n        if (invoice.core.whitelist.length > 0) {\\n            bool isWhitelisted = false;\\n            for (uint256 i = 0; i < invoice.core.whitelist.length; i++) {\\n                if (invoice.core.whitelist[i] == msg.sender)\\n                    isWhitelisted = true;\\n            }\\n            require(isWhitelisted, ExceptionsLibrary.NOT_WHITELISTED);\\n        }\\n\\n        //if unitOfAccount is ETH\\n        if (invoice.core.unitOfAccount == address(0)) {\\n            require(\\n                msg.value == invoice.core.amount,\\n                ExceptionsLibrary.WRONG_AMOUNT\\n            );\\n\\n            (bool success, ) = payable(pool).call{value: invoice.core.amount}(\\n                \\\"\\\"\\n            );\\n            require(success, ExceptionsLibrary.WRONG_AMOUNT);\\n        } else {\\n            IERC20Upgradeable(invoice.core.unitOfAccount).safeTransferFrom(\\n                msg.sender,\\n                pool,\\n                invoice.core.amount\\n            );\\n        }\\n\\n        _setInvoicePaid(pool, invoiceId);\\n        registry.log(\\n            msg.sender,\\n            address(this),\\n            msg.value,\\n            abi.encodeWithSelector(\\n                IInvoice.payInvoice.selector,\\n                pool,\\n                invoiceId\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice create Invoice for given pool (only PoolSecretary)\\n     * @param pool Pool address\\n     * @param core InvoiceCore\\n     */\\n    function createInvoice(\\n        address pool,\\n        InvoiceCore memory core\\n    ) external onlyValidInvoiceManager(pool) {\\n        //check if pool registry record exists\\n        require(\\n            registry.typeOf(pool) == IRecordsRegistry.ContractType.Pool,\\n            ExceptionsLibrary.NOT_POOL\\n        );\\n\\n        //validation\\n        validateInvoiceCore(core);\\n\\n        InvoiceInfo memory info;\\n        info.createdBy = msg.sender;\\n        info.core = core;\\n        \\n\\n        //set invoiceId\\n        uint256 invoiceId = lastInvoiceIdForPool[pool];\\n        info.invoiceId = invoiceId;\\n\\n        //add invoice\\n        invoices[pool][invoiceId] = info;\\n        lastInvoiceIdForPool[pool]++;\\n\\n        uint256 index = registry.service().addInvoiceEvent(pool, invoiceId);\\n        eventIndex[pool][invoiceId] = index;\\n\\n        emit InvoiceCreated(pool, invoiceId);\\n\\n        registry.log(\\n            msg.sender,\\n            address(this),\\n            0,\\n            abi.encodeWithSelector(IInvoice.createInvoice.selector, pool, core)\\n        );\\n    }\\n\\n    /**\\n     * @notice Cancel Invoice by invoice id (only PoolSecretary)\\n     * @param pool Pool address\\n     * @param invoiceId invoiceId\\n     */\\n    function cancelInvoice(\\n        address pool,\\n        uint256 invoiceId\\n    ) external onlyValidInvoiceManager(pool) {\\n        _setInvoiceCanceled(pool, invoiceId);\\n\\n        registry.log(\\n            msg.sender,\\n            address(this),\\n            0,\\n            abi.encodeWithSelector(\\n                IInvoice.cancelInvoice.selector,\\n                pool,\\n                invoiceId\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Set invoice paid for manual confirmation of payment\\n     * @param pool Pool address\\n     * @param invoiceId invoiceId\\n     */\\n    function setInvoicePaid(\\n        address pool,\\n        uint256 invoiceId\\n    ) external onlyManager {\\n        _setInvoicePaid(pool, invoiceId);\\n    }\\n\\n    /**\\n     * @notice Set invoice paid for manual invoice cancellation\\n     * @param pool Pool address\\n     * @param invoiceId invoiceId\\n     */\\n    function setInvoiceCanceled(\\n        address pool,\\n        uint256 invoiceId\\n    ) external onlyManager {\\n        _setInvoiceCanceled(pool, invoiceId);\\n\\n        registry.log(\\n            msg.sender,\\n            address(this),\\n            0,\\n            abi.encodeWithSelector(\\n                IInvoice.setInvoiceCanceled.selector,\\n                pool,\\n                invoiceId\\n            )\\n        );\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Validates invoice params\\n     * @param core Invoice params\\n     * @return True if params are valid (reverts otherwise)\\n     */\\n    function validateInvoiceCore(\\n        InvoiceCore memory core\\n    ) public view returns (bool) {\\n        require(core.amount > 0, ExceptionsLibrary.WRONG_AMOUNT);\\n\\n        require(\\n            core.expirationBlock > block.number,\\n            ExceptionsLibrary.WRONG_BLOCK_NUMBER\\n        );\\n\\n        require(\\n            core.unitOfAccount == address(0) ||\\n                IERC20Upgradeable(core.unitOfAccount).totalSupply() > 0,\\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev This method returns invoice state\\n     * @param invoiceId Invoice ID\\n     * @return Invoice State\\n     */\\n    function invoiceState(\\n        address pool,\\n        uint256 invoiceId\\n    ) public view returns (InvoiceState) {\\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\\n\\n        if (invoice.isPaid) return InvoiceState.Paid;\\n\\n        if (invoice.isCanceled) return InvoiceState.Canceled;\\n\\n        if (invoice.core.expirationBlock < block.number)\\n            return InvoiceState.Expired;\\n\\n        return InvoiceState.Active;\\n    }\\n\\n    /// @dev This getter check if address is Valid Invoice Manager\\n    function isValidInvoiceManager(\\n        address pool,\\n        address account\\n    ) public view returns (bool) {\\n        if (\\n            registry.service().hasRole(\\n                registry.service().SERVICE_MANAGER_ROLE(),\\n                account\\n            ) ||\\n            IPool(pool).isPoolSecretary(account)\\n            \\n        ) return true;\\n        if (!IPool(pool).isDAO() && account == IPool(pool).owner()) return true;\\n        return false;\\n    }\\n\\n    //PRIVATE\\n\\n    function _setInvoicePaid(\\n        address pool,\\n        uint256 invoiceId\\n    ) private onlyActive(pool, invoiceId) {\\n        invoices[pool][invoiceId].isPaid = true;\\n        emit InvoicePaid(pool, invoiceId);\\n    }\\n\\n    function _setInvoiceCanceled(\\n        address pool,\\n        uint256 invoiceId\\n    ) private onlyActive(pool, invoiceId) {\\n        invoices[pool][invoiceId].isCanceled = true;\\n        emit InvoiceCanceled(pool, invoiceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6c6248b18b860815588a651ddc44b2b3fee893892fe752b72caafe8a760832d2\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITGE.sol\\\";\\n\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface ICustomProposal {}\\n\",\"keccak256\":\"0x8fe04afb34d557d6cec7fec360eec6609b879fb16fe6220d3654ebf972611bf3\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IInvoice {\\n    struct InvoiceCore {\\n        uint256 amount;\\n        address unitOfAccount;\\n        uint256 expirationBlock;\\n        string description;\\n        address[] whitelist;\\n    }\\n    struct InvoiceInfo {\\n        InvoiceCore core;\\n        uint256 invoiceId;\\n        address createdBy;\\n        bool isPaid;\\n        bool isCanceled;\\n    }\\n\\n    enum InvoiceState {\\n        None,\\n        Active,\\n        Paid,\\n        Expired,\\n        Canceled\\n    }\\n\\n    function createInvoice(address pool, InvoiceCore memory core) external;\\n\\n    function payInvoice(address pool, uint256 invoiceId) external payable;\\n\\n    function cancelInvoice(address pool, uint256 invoiceId) external;\\n\\n    function setInvoiceCanceled(address pool, uint256 invoiceId) external;\\n}\\n\",\"keccak256\":\"0xaedf4488b225db0cdf4bfcd066dc44d01c8fe0d17f9dffe5d1d32e86c66c6283\",\"license\":\"MIT\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c8e2aab1cb096cc2069a9b8a780f8c63dc1822f19ef5d0c5a385ed64281b6d1\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\n\\nimport \\\"./governor/IGovernor.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\n\\ninterface IPool is IGovernorProposals {\\n    function initialize(ICompaniesRegistry.CompanyInfo memory companyInfo_) external;\\n\\n    function setNewOwnerWithSettings(\\n        address owner_,\\n        string memory trademark_,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_\\n    ) external;\\n\\n    function propose(\\n        address proposer,\\n        uint256 proposalType,\\n        IGovernor.ProposalCoreData memory core,\\n        IGovernor.ProposalMetaData memory meta\\n    ) external returns (uint256 proposalId);\\n\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\n\\n    function setProposalIdToTGE(address tge) external;\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function setSettings(\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        address[] memory secretary,\\n        address[] memory executor\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isDAO() external view returns (bool);\\n\\n    function trademark() external view returns (string memory);\\n\\n    function getGovernanceToken() external view returns (IToken);\\n\\n    function tokenExists(IToken token_) external view returns (bool);\\n\\n    function tokenTypeByAddress(\\n        address token_\\n    ) external view returns (IToken.TokenType);\\n\\n    function isValidProposer(address account) external view returns (bool);\\n\\n    function isPoolSecretary(address account) external view returns (bool);\\n\\n    function isLastProposalIdByTypeActive(\\n        uint256 type_\\n    ) external view returns (bool);\\n\\n    function validateGovernanceSettings(\\n        IGovernanceSettings.NewGovernanceSettings memory settings\\n    ) external pure;\\n\\n    function getPoolSecretary() external view returns (address[] memory);\\n\\n    function getPoolExecutor() external view returns (address[] memory);\\n\\n    function setCompanyInfo(\\n        uint256 _jurisdiction,\\n        uint256 _entityType,\\n        string memory _ein,\\n        string memory _dateOfIncorporation,\\n        string memory _OAuri\\n    ) external;\\n\\n    function castVote(uint256 proposalId, bool support) external;\\n\\n    function executeProposal(uint256 proposalId) external;\\n\\n    function customTxByOwner(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b50e1dbb4f42fcd0cc0fcfdeb4c1df17ae33a4ea3e5aa5954deec2a407177d1\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./ICustomProposal.sol\\\";\\nimport \\\"./registry/IRecordsRegistry.sol\\\";\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\nimport \\\"./registry/IRegistry.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./IInvoice.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\nimport \\\"./ITokenFactory.sol\\\";\\nimport \\\"./ITGEFactory.sol\\\";\\nimport \\\"./IPool.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface IService is IAccessControlEnumerableUpgradeable {\\n    function ADMIN_ROLE() external view returns (bytes32);\\n\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\n\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\n\\n    function createPool(\\n        ICompaniesRegistry.CompanyInfo memory companyInfo\\n    ) external;\\n\\n    function addProposal(uint256 proposalId) external;\\n\\n    function addEvent(\\n        IRecordsRegistry.EventType eventType,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external;\\n\\n    function setProtocolCollectedFee(\\n        address _token,\\n        uint256 _protocolTokenFee\\n    ) external;\\n\\n    function registry() external view returns (IRegistry);\\n\\n    function vesting() external view returns (IVesting);\\n\\n    function tokenFactory() external view returns (ITokenFactory);\\n\\n    function tgeFactory() external view returns (ITGEFactory);\\n\\n    function invoice() external view returns (IInvoice);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTokenFee() external view returns (uint256);\\n\\n    function getMinSoftCap() external view returns (uint256);\\n\\n    function getProtocolTokenFee(\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function getProtocolCollectedFee(\\n        address token_\\n    ) external view returns (uint256);\\n\\n    function poolBeacon() external view returns (address);\\n\\n    function tgeBeacon() external view returns (address);\\n\\n    function tokenBeacon() external view returns (address);\\n\\n    function tokenERC1155Beacon() external view returns (address);\\n\\n    function customProposal() external view returns (ICustomProposal);\\n\\n    function validateTGEInfo(\\n        ITGE.TGEInfo calldata info,\\n        uint256 cap,\\n        uint256 totalSupply,\\n        IToken.TokenType tokenType\\n    ) external view;\\n\\n    function getPoolAddress(\\n        ICompaniesRegistry.CompanyInfo memory info\\n    ) external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function addInvoiceEvent(\\n        address pool,\\n        uint256 invoiceId\\n    ) external returns (uint256);\\n\\n    function purchasePool(\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        string memory trademark,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\n    ) external payable;\\n\\n    function transferPurchasedPoolByService(\\n        address newowner,\\n        uint256 jurisdiction,\\n        uint256 entityType,\\n        string memory trademark,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa2c1ba371d10ba4bf3469c5787e2fcf375197990276418ba09e3b0a1a6758c57\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenERC1155.sol\\\";\\nimport \\\"./IVesting.sol\\\";\\n\\ninterface ITGE {\\n    struct TGEInfo {\\n        uint256 price;\\n        uint256 hardcap;\\n        uint256 softcap;\\n        uint256 minPurchase;\\n        uint256 maxPurchase;\\n        uint256 duration;\\n        IVesting.VestingParams vestingParams;\\n        address[] userWhitelist;\\n        address unitOfAccount;\\n        uint256 lockupDuration;\\n        uint256 lockupTVL;\\n    }\\n\\n    function initialize(\\n        address _service,\\n        address _token,\\n        uint256 _tokenId,\\n        string memory _uri,\\n        TGEInfo calldata _info,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    enum State {\\n        Active,\\n        Failed,\\n        Successful\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function tokenId() external view returns (uint256);\\n\\n    function state() external view returns (State);\\n\\n    function getInfo() external view returns (TGEInfo memory);\\n\\n    function transferUnlocked() external view returns (bool);\\n\\n    function purchaseOf(address user) external view returns (uint256);\\n\\n    function redeemableBalanceOf(address user) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account) external view returns (uint256);\\n\\n    function getEnd() external view returns (uint256);\\n\\n    function totalPurchased() external view returns (uint256);\\n\\n    function isERC1155TGE() external view returns (bool);\\n\\n    function purchase(uint256 amount) external payable;\\n\\n    function transferFunds() external;\\n}\\n\",\"keccak256\":\"0xa2bc8da5fe60c0f63eda3685f5d1b2a2cd689d3e689e4cebddaf8a536a3e0c74\",\"license\":\"MIT\"},\"contracts/interfaces/ITGEFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITGE.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\n\\ninterface ITGEFactory {\\n    function createSecondaryTGE(\\n        address token,\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function createSecondaryTGEERC1155(\\n        address token,\\n        uint256 tokenId,\\n        string memory uri,\\n        ITGE.TGEInfo calldata tgeInfo,\\n        IToken.TokenInfo calldata tokenInfo,\\n        string memory metadataURI\\n    ) external;\\n\\n    function createPrimaryTGE(\\n        address poolAddress,\\n        IToken.TokenInfo memory tokenInfo,\\n        ITGE.TGEInfo memory tgeInfo,\\n        string memory metadataURI,\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\n        address[] memory secretary,\\n        address[] memory executor\\n    ) external;\\n}\\n\",\"keccak256\":\"0x89a5b4c5d7ecf40cfb135b83a6a7c9531b4e4cfe5fde0f63773e4a995ee3fc0f\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\n\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\n    struct TokenInfo {\\n        TokenType tokenType;\\n        string name;\\n        string symbol;\\n        string description;\\n        uint256 cap;\\n        uint8 decimals;\\n    }\\n\\n    enum TokenType {\\n        None,\\n        Governance,\\n        Preference\\n    }\\n\\n    function initialize(\\n        IService service_,\\n        address pool_,\\n        TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function cap() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (TokenType);\\n\\n    function lastTGE() external view returns (address);\\n\\n    function getTGEList() external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful() external view returns (bool);\\n\\n    function addTGE(address tge) external;\\n\\n    function setTGEVestedTokens(uint256 amount) external;\\n\\n    function setProtocolFeeReserved(uint256 amount) external;\\n\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\n\\n    function getTotalProtocolFeeReserved() external view returns (uint256);\\n\\n    function totalSupplyWithReserves() external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xcdebb5bfae30efecd2686363c8bcfbd17c49a3a466bfbcbf0f416dd06cdcec7b\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./IService.sol\\\";\\nimport \\\"./IToken.sol\\\";\\n\\ninterface ITokenERC1155 is IERC1155Upgradeable {\\n    function initialize(\\n        IService service_,\\n        address pool_,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE_\\n    ) external;\\n\\n    function mint(address to, uint256 tokenId, uint256 amount) external;\\n\\n    function burn(address from, uint256 tokenId, uint256 amount) external;\\n\\n    function cap(uint256 tokenId) external view returns (uint256);\\n\\n    function unlockedBalanceOf(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function service() external view returns (IService);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenType() external view returns (IToken.TokenType);\\n\\n    function lastTGE(uint256 tokenId) external view returns (address);\\n\\n    function getTGEList(\\n        uint256 tokenId\\n    ) external view returns (address[] memory);\\n\\n    function isPrimaryTGESuccessful(\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function addTGE(address tge, uint256 tokenId) external;\\n\\n    function setTGEVestedTokens(uint256 amount, uint256 tokenId) external;\\n\\n    function setProtocolFeeReserved(uint256 amount, uint256 tokenId) external;\\n\\n    function getTotalTGEVestedTokens(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function getTotalProtocolFeeReserved(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function totalSupplyWithReserves(\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    function setURI(uint256 tokenId, string memory tokenURI) external;\\n\\n    function setTokenIdCap(uint256 _tokenId, uint256 _cap) external;\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe3b708ee1686ce06f0c36534d871bf39d76a9723fdd2cc7ee2a975c33eff552e\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenERC1155.sol\\\";\\n\\ninterface ITokenFactory {\\n    function createToken(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n\\n    function createTokenERC1155(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n}\\n\",\"keccak256\":\"0x8384f0537c953611968ad8b27d64958dbcfde71ccca7107e862da35074a6f6e2\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IVesting {\\n    struct VestingParams {\\n        uint256 vestedShare;\\n        uint256 cliff;\\n        uint256 cliffShare;\\n        uint256 spans;\\n        uint256 spanDuration;\\n        uint256 spanShare;\\n        uint256 claimTVL;\\n        address[] resolvers;\\n    }\\n\\n    function vest(address to, uint256 amount) external;\\n\\n    function cancel(address tge, address account) external;\\n\\n    function validateParams(\\n        VestingParams memory params\\n    ) external pure returns (bool);\\n\\n    function vested(\\n        address tge,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function totalVested(address tge) external view returns (uint256);\\n\\n    function vestedBalanceOf(\\n        address tge,\\n        address account\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x171ca30737bf0ecf90116607928e0dc463c5ee9d9607b6d75a1ad08205a7691f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGovernanceSettings {\\n    /**\\n     * @notice Governance settings\\n     * @param proposalThreshold_ Proposal threshold\\n     * @param quorumThreshold_ Quorum threshold\\n     * @param decisionThreshold_ Decision threshold\\n     * @param votingDuration_ Voting duration\\n     * @param transferValueForDelay_ Transfer value for delay\\n     * @param executionDelays_ List of execution delays for all proposal types\\n     */\\n    struct NewGovernanceSettings {\\n        uint256 proposalThreshold;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 votingDuration;\\n        uint256 transferValueForDelay;\\n        uint256[4] executionDelays;\\n        uint256 votingStartDelay;\\n    }\\n\\n    function setGovernanceSettings(\\n        NewGovernanceSettings memory settings\\n    ) external;\\n}\\n\",\"keccak256\":\"0x87c5f66e426ec7964504da60b0bcba8708fc7c140f5b868e50895edbdf773af4\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/registry/IRecordsRegistry.sol\\\";\\n\\ninterface IGovernor {\\n    /**\\n     * @dev Struct with proposal core data\\n     * @param targets Targets\\n     * @param values ETH values\\n     * @param callDatas Call datas to pass in .call() to target\\n     * @param quorumThreshold Quorum threshold (as percents)\\n     * @param decisionThreshold Decision threshold (as percents)\\n     * @param executionDelay Execution delay after successful voting (blocks)\\n     */\\n    struct ProposalCoreData {\\n        address[] targets;\\n        uint256[] values;\\n        bytes[] callDatas;\\n        uint256 quorumThreshold;\\n        uint256 decisionThreshold;\\n        uint256 executionDelay;\\n    }\\n\\n    /**\\n     * @dev Struct with proposal metadata\\n     * @param proposalType Proposal type\\n     * @param description Description\\n     * @param metaHash Metadata hash\\n     */\\n    struct ProposalMetaData {\\n        IRecordsRegistry.EventType proposalType;\\n        string description;\\n        string metaHash;\\n    }\\n\\n    function proposalState(uint256 proposalId)\\n        external\\n        view\\n        returns (uint256 state);\\n}\\n\",\"keccak256\":\"0x3cf82e458bf2a56bf9a856480786dd40f9544627494e598adfaf5decf38537fc\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../ITGE.sol\\\";\\nimport \\\"../IToken.sol\\\";\\n\\ninterface ICompaniesRegistry {\\n    struct CompanyInfo {\\n        uint256 jurisdiction;\\n        uint256 entityType;\\n        string ein;\\n        string dateOfIncorporation;\\n        uint256 fee;\\n    }\\n\\n    function lockCompany(\\n        uint256 jurisdiction,\\n        uint256 entityType\\n    ) external returns (CompanyInfo memory);\\n\\n    function createCompany(\\n        CompanyInfo calldata info\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9f65d3613179e2860588871fce34d6cf9e15221089f6572eae9251b8641be6a6\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IRecordsRegistry {\\n    // Directory\\n    enum ContractType {\\n        None,\\n        Pool,\\n        GovernanceToken,\\n        PreferenceToken,\\n        TGE\\n    }\\n\\n    enum EventType {\\n        None,\\n        Transfer,\\n        TGE,\\n        GovernanceSettings\\n    }\\n\\n    /**\\n     * @dev Contract information structure\\n     * @param addr Contract address\\n     * @param contractType Contract type\\n     * @param description Contract description\\n     */\\n    struct ContractInfo {\\n        address addr;\\n        ContractType contractType;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Proposal information structure\\n     * @param pool Pool address\\n     * @param proposalId Proposal ID\\n     * @param description Proposal description\\n     */\\n    struct ProposalInfo {\\n        address pool;\\n        uint256 proposalId;\\n        string description;\\n    }\\n\\n    /**\\n     * @dev Event information structure\\n     * @param eventType Event type\\n     * @param pool Pool address\\n     * @param eventContract Address of the Event contract\\n     * @param proposalId Proposal ID\\n     * @param metaHash Hash value of event metadata\\n     */\\n    struct Event {\\n        EventType eventType;\\n        address pool;\\n        address eventContract;\\n        uint256 proposalId;\\n        string metaHash;\\n    }\\n\\n    function addContractRecord(\\n        address addr,\\n        ContractType contractType,\\n        string memory description\\n    ) external returns (uint256 index);\\n\\n    function addProposalRecord(\\n        address pool,\\n        uint256 proposalId\\n    ) external returns (uint256 index);\\n\\n    function addEventRecord(\\n        address pool,\\n        EventType eventType,\\n        address eventContract,\\n        uint256 proposalId,\\n        string calldata metaHash\\n    ) external returns (uint256 index);\\n\\n    function typeOf(address addr) external view returns (ContractType);\\n\\n     \\n}\\n\",\"keccak256\":\"0x5ba05b58da82085ef5fd43f4b42f0f1c75881a41822c246978c260f98d88dee3\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ICompaniesRegistry.sol\\\";\\nimport \\\"./ITokensRegistry.sol\\\";\\nimport \\\"./IRecordsRegistry.sol\\\";\\nimport \\\"../IService.sol\\\";\\n\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {\\n    function service() external view returns (IService);\\n\\n    function COMPANIES_MANAGER_ROLE() external view returns (bytes32);\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function log(\\n        address sender,\\n        address receiver,\\n        uint256 value, \\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x395d33740589a5d1da9cac45c1ce06bf9d7c39378f9d5d3e3af4971e0eaf1d0c\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary ExceptionsLibrary {\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\n    string public constant WRONG_TOKEN_ADDRESS = \\\"WRONG_TOKEN_ADDRESS\\\";\\n    string public constant GOVERNANCE_TOKEN_EXISTS = \\\"GOVERNANCE_TOKEN_EXISTS\\\";\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\n    string public constant ALREADY_VOTED = \\\"ALREADY_VOTED\\\";\\n    string public constant ZERO_VOTES = \\\"ZERO_VOTES\\\";\\n    string public constant ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS =\\n        \\\"ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\\\";\\n    string public constant EMPTY_ADDRESS = \\\"EMPTY_ADDRESS\\\";\\n    string public constant NOT_VALID_PROPOSER = \\\"NOT_VALID_PROPOSER\\\";\\n    string public constant SHARES_SUM_EXCEEDS_ONE = \\\"SHARES_SUM_EXCEEDS_ONE\\\";\\n    string public constant NOT_RESOLVER = \\\"NOT_RESOLVER\\\";\\n    string public constant NOT_REGISTRY = \\\"NOT_REGISTRY\\\";\\n    string public constant INVALID_TARGET = \\\"INVALID_TARGET\\\";\\n    string public constant NOT_TGE_FACTORY = \\\"NOT_TGE_FACTORY\\\";\\n    string public constant WRONG_AMOUNT = \\\"WRONG_AMOUNT\\\";\\n    string public constant WRONG_BLOCK_NUMBER = \\\"WRONG_BLOCK_NUMBER\\\";\\n    string public constant NOT_VALID_EXECUTOR = \\\"NOT_VALID_EXECUTOR\\\";\\n    string public constant POOL_PAUSED = \\\"POOL_PAUSED\\\";\\n    string public constant NOT_INVOICE_MANAGER = \\\"NOT_INVOICE_MANAGER\\\";\\n     string public constant WRONG_RESOLVER = \\\"WRONG_RESOLVER\\\";\\n}\\n\",\"keccak256\":\"0x5e1222129b161c61bc8d29f311323ed555d0d6398e46b41c0cc5e662c24c1d5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6127ec80620000f46000396000f3fe6080604052600436106100c25760003560e01c8063528dd5121161007f578063862b7cbf11610059578063862b7cbf146102395780639ad8ec5714610259578063c4d66de814610291578063de35f20c146102b157600080fd5b8063528dd512146101c15780635c337409146101e15780637b1039991461020157600080fd5b80630dad62fa146100c75780632b9542341461010157806330c6faeb14610131578063365fa35d146101465780633a1de8fc1461016657806341cec40e14610186575b600080fd5b3480156100d357600080fd5b506100e76100e23660046120ec565b6102de565b6040516100f89594939291906121f6565b60405180910390f35b34801561010d57600080fd5b5061012161011c366004612238565b610453565b60405190151581526020016100f8565b61014461013f3660046120ec565b61078b565b005b34801561015257600080fd5b50610121610161366004612449565b610cc9565b34801561017257600080fd5b506101446101813660046120ec565b610e32565b34801561019257600080fd5b506101b36101a136600461247e565b60346020526000908152604090205481565b6040519081526020016100f8565b3480156101cd57600080fd5b506101446101dc3660046124a2565b611043565b3480156101ed57600080fd5b506101446101fc3660046120ec565b6114c5565b34801561020d57600080fd5b50603354610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b34801561024557600080fd5b506101446102543660046120ec565b6115d0565b34801561026557600080fd5b506101b36102743660046120ec565b603660209081526000928352604080842090915290825290205481565b34801561029d57600080fd5b506101446102ac36600461247e565b61188b565b3480156102bd57600080fd5b506102d16102cc3660046120ec565b6119af565b6040516100f89190612508565b6035602090815260009283526040808420825291835291819020815160a0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003810180549192918391606084019161033e90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461036a90612530565b80156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561041957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103fb575b5050509190925250505060058201546006909201549091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041685565b6033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c1919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610546919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190612587565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906125a0565b80610686575060405163232bd84f60e21b81526001600160a01b038381166004830152841690638caf613c90602401602060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906125a0565b1561069357506001610785565b826001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f591906125a0565b1580156107745750826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f919061256a565b6001600160a01b0316826001600160a01b0316145b1561078157506001610785565b5060005b92915050565b610793611b96565b81806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f691906125a0565b156040518060400160405280600b81526020016a1413d3d317d4105554d15160aa1b815250906108425760405162461bcd60e51b815260040161083991906125c2565b60405180910390fd5b506001600160a01b03808416600090815260356020908152604080832086845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939492939192849290918491610100850191906108b490612530565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612530565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561098f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610971575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b909104161515608090910152905060016109eb85856119af565b60048111156109fc576109fc6124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610a3f5760405162461bcd60e51b815260040161083991906125c2565b508051608001515115610aee576000805b82516080015151811015610aa657825160800151805133919083908110610a7957610a796125d5565b60200260200101516001600160a01b031603610a9457600191505b80610a9e816125eb565b915050610a50565b5060408051808201909152600f81526e1393d517d5d2125511531254d51151608a1b602082015281610aeb5760405162461bcd60e51b815260040161083991906125c2565b50505b8051602001516001600160a01b0316610be85780515160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152903414610b475760405162461bcd60e51b815260040161083991906125c2565b508051516040516000916001600160a01b038716918381818185875af1925050503d8060008114610b94576040519150601f19603f3d011682016040523d82523d6000602084013e610b99565b606091505b50509050806040518060400160405280600c81526020016b15d493d391d7d05353d5539560a21b81525090610be15760405162461bcd60e51b815260040161083991906125c2565b5050610c0b565b80518051602090910151610c0b916001600160a01b039091169033908790611bef565b610c158484611c4f565b603354604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b03166330c6faeb60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91610c8891339130913491600401612612565b600060405180830381600087803b158015610ca257600080fd5b505af1158015610cb6573d6000803e3d6000fd5b505050505050610cc560018055565b5050565b805160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152600091610d0e5760405162461bcd60e51b815260040161083991906125c2565b5043826040015111604051806040016040528060128152602001712ba927a723afa12627a1a5afa72aa6a122a960711b81525090610d5f5760405162461bcd60e51b815260040161083991906125c2565b5060208201516001600160a01b03161580610ddf5750600082602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190612587565b115b6040518060400160405280601381526020017257524f4e475f544f4b454e5f4144445245535360681b81525090610e295760405162461bcd60e51b815260040161083991906125c2565b50600192915050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea9919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612587565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff591906125a0565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906110385760405162461bcd60e51b815260040161083991906125c2565b50610cc58282611c4f565b8161104e8133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906110985760405162461bcd60e51b815260040161083991906125c2565b50603354604051630db9619f60e31b81526001600160a01b0385811660048301526001921690636dcb0cf890602401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611108919061264f565b6004811115611119576111196124f2565b14604051806040016040528060088152602001671393d517d413d3d360c21b815250906111595760405162461bcd60e51b815260040161083991906125c2565b5061116382610cc9565b506040805161014081018252600060a0820181905260c0820181905260e0820181905260606101008301819052610120830181905260208084018381528285018490526080850184905233858701528785526001600160a01b03898116808652603484528786205492839052855260358352868520828652835293869020855180518255928301516001820180546001600160a01b031916919096161790945594810151600284015590810151929392849291908290600382019061122890826126b6565b506080820151805161124491600484019160209091019061205a565b50505060208281015160058301556040808401516006909301805460608601516080909601511515600160a81b0260ff60a81b19961515600160a01b026001600160a81b03199092166001600160a01b0396871617919091179590951694909417909355908716600090815260349091529081208054916112c4836125eb565b90915550506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611337919061256a565b604051635a4c3ceb60e01b81526001600160a01b038881166004830152602482018590529190911690635a4c3ceb906044016020604051808303816000875af1158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190612587565b6001600160a01b0387166000818152603660209081526040808320878452825291829020849055815192835282018590529192507f6a39120258d0c412cb2b8a5731afda5aa7b25b23efbd037907ab4223ec73ee6c910160405180910390a16033546040516001600160a01b0390911690634dbb83fd9033903090600090632946ea8960e11b90611443908d908d90602401612776565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e087901b909216825261148b94939291600401612612565b600060405180830381600087803b1580156114a557600080fd5b505af11580156114b9573d6000803e3d6000fd5b50505050505050505050565b816114d08133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b8152509061151a5760405162461bcd60e51b815260040161083991906125c2565b506115258383611d26565b603354604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316635c33740960e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916115999133913091600091600401612612565b600060405180830381600087803b1580156115b357600080fd5b505af11580156115c7573d6000803e3d6000fd5b50505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611647919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612587565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906125a0565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906117d65760405162461bcd60e51b815260040161083991906125c2565b506117e18282611d26565b603354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663862b7cbf60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916118559133913091600091600401612612565b600060405180830381600087803b15801561186f57600080fd5b505af1158015611883573d6000803e3d6000fd5b505050505050565b600054610100900460ff16158080156118ab5750600054600160ff909116105b806118c55750303b1580156118c5575060005460ff166001145b6119285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610839565b6000805460ff19166001179055801561194b576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0384161790558015610cc5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b03808316600090815260356020908152604080832085845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939485948492849161010085019190611a1c90612530565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4890612530565b8015611a955780601f10611a6a57610100808354040283529160200191611a95565b820191906000526020600020905b815481529060010190602001808311611a7857829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611af757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ad9575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b820481161515606080850191909152600160a81b90920416151560809092019190915281015190915015611b61576002915050610785565b806080015115611b75576004915050610785565b805160400151431115611b8c576003915050610785565b5060019392505050565b600260015403611be85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610839565b6002600155565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c49908590611df3565b50505050565b81816001611c5d83836119af565b6004811115611c6e57611c6e6124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611cb15760405162461bcd60e51b815260040161083991906125c2565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a01b1916600160a01b179055815192835282018590527f799d4ec405ca3d1ee291cbd8904cbccb4b8a0ecef447ddae03b2fbeddcc30cfb91015b60405180910390a150505050565b81816001611d3483836119af565b6004811115611d4557611d456124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611d885760405162461bcd60e51b815260040161083991906125c2565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a81b1916600160a81b179055815192835282018590527f9abf50c8342d18dbbf559ab00e917d3d8fe7f836797cf666bc944252e61469e39101611d18565b6000611e48826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eca9092919063ffffffff16565b805190915015611ec55780806020019051810190611e6691906125a0565b611ec55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610839565b505050565b6060611ed98484600085611ee1565b949350505050565b606082471015611f425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610839565b600080866001600160a01b03168587604051611f5e919061279a565b60006040518083038185875af1925050503d8060008114611f9b576040519150601f19603f3d011682016040523d82523d6000602084013e611fa0565b606091505b5091509150611fb187838387611fbc565b979650505050505050565b6060831561202b578251600003612024576001600160a01b0385163b6120245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610839565b5081611ed9565b611ed983838151156120405781518083602001fd5b8060405162461bcd60e51b815260040161083991906125c2565b8280548282559060005260206000209081019282156120af579160200282015b828111156120af57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061207a565b506120bb9291506120bf565b5090565b5b808211156120bb57600081556001016120c0565b6001600160a01b03811681146120e957600080fd5b50565b600080604083850312156120ff57600080fd5b823561210a816120d4565b946020939093013593505050565b60005b8381101561213357818101518382015260200161211b565b50506000910152565b60008151808452612154816020860160208601612118565b601f01601f19169290920160200192915050565b80518252600060208083015160018060a01b0380821683870152604085015160408701526060850151915060a060608701526121a760a087018361213c565b60808681015188830391890191909152805180835290850193506000918501905b808310156121ea578451841682529385019360019290920191908501906121c8565b50979650505050505050565b60a08152600061220960a0830188612168565b6020830196909652506001600160a01b0393909316604084015290151560608301521515608090910152919050565b6000806040838503121561224b57600080fd5b8235612256816120d4565b91506020830135612266816120d4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156122aa576122aa612271565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156122d9576122d9612271565b604052919050565b600082601f8301126122f257600080fd5b8135602067ffffffffffffffff82111561230e5761230e612271565b8160051b61231d8282016122b0565b928352848101820192828101908785111561233757600080fd5b83870192505b84831015611fb1578235612350816120d4565b8252918301919083019061233d565b600060a0828403121561237157600080fd5b612379612287565b90508135815260208083013561238e816120d4565b8282015260408381013590830152606083013567ffffffffffffffff808211156123b757600080fd5b818501915085601f8301126123cb57600080fd5b8135818111156123dd576123dd612271565b6123ef601f8201601f191685016122b0565b818152878583860101111561240357600080fd5b818585018683013760008583830101528060608701525050608085013592508083111561242f57600080fd5b505061243d848285016122e1565b60808301525092915050565b60006020828403121561245b57600080fd5b813567ffffffffffffffff81111561247257600080fd5b611ed98482850161235f565b60006020828403121561249057600080fd5b813561249b816120d4565b9392505050565b600080604083850312156124b557600080fd5b82356124c0816120d4565b9150602083013567ffffffffffffffff8111156124dc57600080fd5b6124e88582860161235f565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061252a57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061254457607f821691505b60208210810361256457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561257c57600080fd5b815161249b816120d4565b60006020828403121561259957600080fd5b5051919050565b6000602082840312156125b257600080fd5b8151801515811461249b57600080fd5b60208152600061249b602083018461213c565b634e487b7160e01b600052603260045260246000fd5b60006001820161260b57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126459083018461213c565b9695505050505050565b60006020828403121561266157600080fd5b81516005811061249b57600080fd5b601f821115611ec557600081815260208120601f850160051c810160208610156126975750805b601f850160051c820191505b81811015611883578281556001016126a3565b815167ffffffffffffffff8111156126d0576126d0612271565b6126e4816126de8454612530565b84612670565b602080601f83116001811461271957600084156127015750858301515b600019600386901b1c1916600185901b178555611883565b600085815260208120601f198616915b8281101561274857888601518255948401946001909101908401612729565b50858210156127665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090611ed990830184612168565b600082516127ac818460208701612118565b919091019291505056fea26469706673582212204218a496ccb864bca80ce77e5b56e2f51c88eb3acbe5acfa042f347a3c7d582e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063528dd5121161007f578063862b7cbf11610059578063862b7cbf146102395780639ad8ec5714610259578063c4d66de814610291578063de35f20c146102b157600080fd5b8063528dd512146101c15780635c337409146101e15780637b1039991461020157600080fd5b80630dad62fa146100c75780632b9542341461010157806330c6faeb14610131578063365fa35d146101465780633a1de8fc1461016657806341cec40e14610186575b600080fd5b3480156100d357600080fd5b506100e76100e23660046120ec565b6102de565b6040516100f89594939291906121f6565b60405180910390f35b34801561010d57600080fd5b5061012161011c366004612238565b610453565b60405190151581526020016100f8565b61014461013f3660046120ec565b61078b565b005b34801561015257600080fd5b50610121610161366004612449565b610cc9565b34801561017257600080fd5b506101446101813660046120ec565b610e32565b34801561019257600080fd5b506101b36101a136600461247e565b60346020526000908152604090205481565b6040519081526020016100f8565b3480156101cd57600080fd5b506101446101dc3660046124a2565b611043565b3480156101ed57600080fd5b506101446101fc3660046120ec565b6114c5565b34801561020d57600080fd5b50603354610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b34801561024557600080fd5b506101446102543660046120ec565b6115d0565b34801561026557600080fd5b506101b36102743660046120ec565b603660209081526000928352604080842090915290825290205481565b34801561029d57600080fd5b506101446102ac36600461247e565b61188b565b3480156102bd57600080fd5b506102d16102cc3660046120ec565b6119af565b6040516100f89190612508565b6035602090815260009283526040808420825291835291819020815160a0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003810180549192918391606084019161033e90612530565b80601f016020809104026020016040519081016040528092919081815260200182805461036a90612530565b80156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561041957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103fb575b5050509190925250505060058201546006909201549091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041685565b6033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c1919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610546919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a79190612587565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906125a0565b80610686575060405163232bd84f60e21b81526001600160a01b038381166004830152841690638caf613c90602401602060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906125a0565b1561069357506001610785565b826001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f591906125a0565b1580156107745750826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f919061256a565b6001600160a01b0316826001600160a01b0316145b1561078157506001610785565b5060005b92915050565b610793611b96565b81806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f691906125a0565b156040518060400160405280600b81526020016a1413d3d317d4105554d15160aa1b815250906108425760405162461bcd60e51b815260040161083991906125c2565b60405180910390fd5b506001600160a01b03808416600090815260356020908152604080832086845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939492939192849290918491610100850191906108b490612530565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090612530565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561098f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610971575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b909104161515608090910152905060016109eb85856119af565b60048111156109fc576109fc6124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610a3f5760405162461bcd60e51b815260040161083991906125c2565b508051608001515115610aee576000805b82516080015151811015610aa657825160800151805133919083908110610a7957610a796125d5565b60200260200101516001600160a01b031603610a9457600191505b80610a9e816125eb565b915050610a50565b5060408051808201909152600f81526e1393d517d5d2125511531254d51151608a1b602082015281610aeb5760405162461bcd60e51b815260040161083991906125c2565b50505b8051602001516001600160a01b0316610be85780515160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152903414610b475760405162461bcd60e51b815260040161083991906125c2565b508051516040516000916001600160a01b038716918381818185875af1925050503d8060008114610b94576040519150601f19603f3d011682016040523d82523d6000602084013e610b99565b606091505b50509050806040518060400160405280600c81526020016b15d493d391d7d05353d5539560a21b81525090610be15760405162461bcd60e51b815260040161083991906125c2565b5050610c0b565b80518051602090910151610c0b916001600160a01b039091169033908790611bef565b610c158484611c4f565b603354604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b03166330c6faeb60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91610c8891339130913491600401612612565b600060405180830381600087803b158015610ca257600080fd5b505af1158015610cb6573d6000803e3d6000fd5b505050505050610cc560018055565b5050565b805160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152600091610d0e5760405162461bcd60e51b815260040161083991906125c2565b5043826040015111604051806040016040528060128152602001712ba927a723afa12627a1a5afa72aa6a122a960711b81525090610d5f5760405162461bcd60e51b815260040161083991906125c2565b5060208201516001600160a01b03161580610ddf5750600082602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddd9190612587565b115b6040518060400160405280601381526020017257524f4e475f544f4b454e5f4144445245535360681b81525090610e295760405162461bcd60e51b815260040161083991906125c2565b50600192915050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea9919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2e919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190612587565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff591906125a0565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906110385760405162461bcd60e51b815260040161083991906125c2565b50610cc58282611c4f565b8161104e8133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906110985760405162461bcd60e51b815260040161083991906125c2565b50603354604051630db9619f60e31b81526001600160a01b0385811660048301526001921690636dcb0cf890602401602060405180830381865afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611108919061264f565b6004811115611119576111196124f2565b14604051806040016040528060088152602001671393d517d413d3d360c21b815250906111595760405162461bcd60e51b815260040161083991906125c2565b5061116382610cc9565b506040805161014081018252600060a0820181905260c0820181905260e0820181905260606101008301819052610120830181905260208084018381528285018490526080850184905233858701528785526001600160a01b03898116808652603484528786205492839052855260358352868520828652835293869020855180518255928301516001820180546001600160a01b031916919096161790945594810151600284015590810151929392849291908290600382019061122890826126b6565b506080820151805161124491600484019160209091019061205a565b50505060208281015160058301556040808401516006909301805460608601516080909601511515600160a81b0260ff60a81b19961515600160a01b026001600160a81b03199092166001600160a01b0396871617919091179590951694909417909355908716600090815260349091529081208054916112c4836125eb565b90915550506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611337919061256a565b604051635a4c3ceb60e01b81526001600160a01b038881166004830152602482018590529190911690635a4c3ceb906044016020604051808303816000875af1158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190612587565b6001600160a01b0387166000818152603660209081526040808320878452825291829020849055815192835282018590529192507f6a39120258d0c412cb2b8a5731afda5aa7b25b23efbd037907ab4223ec73ee6c910160405180910390a16033546040516001600160a01b0390911690634dbb83fd9033903090600090632946ea8960e11b90611443908d908d90602401612776565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e087901b909216825261148b94939291600401612612565b600060405180830381600087803b1580156114a557600080fd5b505af11580156114b9573d6000803e3d6000fd5b50505050505050505050565b816114d08133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b8152509061151a5760405162461bcd60e51b815260040161083991906125c2565b506115258383611d26565b603354604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316635c33740960e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916115999133913091600091600401612612565b600060405180830381600087803b1580156115b357600080fd5b505af11580156115c7573d6000803e3d6000fd5b50505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611647919061256a565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc919061256a565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612587565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561176f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179391906125a0565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906117d65760405162461bcd60e51b815260040161083991906125c2565b506117e18282611d26565b603354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663862b7cbf60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916118559133913091600091600401612612565b600060405180830381600087803b15801561186f57600080fd5b505af1158015611883573d6000803e3d6000fd5b505050505050565b600054610100900460ff16158080156118ab5750600054600160ff909116105b806118c55750303b1580156118c5575060005460ff166001145b6119285760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610839565b6000805460ff19166001179055801561194b576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0384161790558015610cc5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b03808316600090815260356020908152604080832085845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939485948492849161010085019190611a1c90612530565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4890612530565b8015611a955780601f10611a6a57610100808354040283529160200191611a95565b820191906000526020600020905b815481529060010190602001808311611a7857829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611af757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ad9575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b820481161515606080850191909152600160a81b90920416151560809092019190915281015190915015611b61576002915050610785565b806080015115611b75576004915050610785565b805160400151431115611b8c576003915050610785565b5060019392505050565b600260015403611be85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610839565b6002600155565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c49908590611df3565b50505050565b81816001611c5d83836119af565b6004811115611c6e57611c6e6124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611cb15760405162461bcd60e51b815260040161083991906125c2565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a01b1916600160a01b179055815192835282018590527f799d4ec405ca3d1ee291cbd8904cbccb4b8a0ecef447ddae03b2fbeddcc30cfb91015b60405180910390a150505050565b81816001611d3483836119af565b6004811115611d4557611d456124f2565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611d885760405162461bcd60e51b815260040161083991906125c2565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a81b1916600160a81b179055815192835282018590527f9abf50c8342d18dbbf559ab00e917d3d8fe7f836797cf666bc944252e61469e39101611d18565b6000611e48826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611eca9092919063ffffffff16565b805190915015611ec55780806020019051810190611e6691906125a0565b611ec55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610839565b505050565b6060611ed98484600085611ee1565b949350505050565b606082471015611f425760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610839565b600080866001600160a01b03168587604051611f5e919061279a565b60006040518083038185875af1925050503d8060008114611f9b576040519150601f19603f3d011682016040523d82523d6000602084013e611fa0565b606091505b5091509150611fb187838387611fbc565b979650505050505050565b6060831561202b578251600003612024576001600160a01b0385163b6120245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610839565b5081611ed9565b611ed983838151156120405781518083602001fd5b8060405162461bcd60e51b815260040161083991906125c2565b8280548282559060005260206000209081019282156120af579160200282015b828111156120af57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061207a565b506120bb9291506120bf565b5090565b5b808211156120bb57600081556001016120c0565b6001600160a01b03811681146120e957600080fd5b50565b600080604083850312156120ff57600080fd5b823561210a816120d4565b946020939093013593505050565b60005b8381101561213357818101518382015260200161211b565b50506000910152565b60008151808452612154816020860160208601612118565b601f01601f19169290920160200192915050565b80518252600060208083015160018060a01b0380821683870152604085015160408701526060850151915060a060608701526121a760a087018361213c565b60808681015188830391890191909152805180835290850193506000918501905b808310156121ea578451841682529385019360019290920191908501906121c8565b50979650505050505050565b60a08152600061220960a0830188612168565b6020830196909652506001600160a01b0393909316604084015290151560608301521515608090910152919050565b6000806040838503121561224b57600080fd5b8235612256816120d4565b91506020830135612266816120d4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156122aa576122aa612271565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156122d9576122d9612271565b604052919050565b600082601f8301126122f257600080fd5b8135602067ffffffffffffffff82111561230e5761230e612271565b8160051b61231d8282016122b0565b928352848101820192828101908785111561233757600080fd5b83870192505b84831015611fb1578235612350816120d4565b8252918301919083019061233d565b600060a0828403121561237157600080fd5b612379612287565b90508135815260208083013561238e816120d4565b8282015260408381013590830152606083013567ffffffffffffffff808211156123b757600080fd5b818501915085601f8301126123cb57600080fd5b8135818111156123dd576123dd612271565b6123ef601f8201601f191685016122b0565b818152878583860101111561240357600080fd5b818585018683013760008583830101528060608701525050608085013592508083111561242f57600080fd5b505061243d848285016122e1565b60808301525092915050565b60006020828403121561245b57600080fd5b813567ffffffffffffffff81111561247257600080fd5b611ed98482850161235f565b60006020828403121561249057600080fd5b813561249b816120d4565b9392505050565b600080604083850312156124b557600080fd5b82356124c0816120d4565b9150602083013567ffffffffffffffff8111156124dc57600080fd5b6124e88582860161235f565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061252a57634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061254457607f821691505b60208210810361256457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561257c57600080fd5b815161249b816120d4565b60006020828403121561259957600080fd5b5051919050565b6000602082840312156125b257600080fd5b8151801515811461249b57600080fd5b60208152600061249b602083018461213c565b634e487b7160e01b600052603260045260246000fd5b60006001820161260b57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906126459083018461213c565b9695505050505050565b60006020828403121561266157600080fd5b81516005811061249b57600080fd5b601f821115611ec557600081815260208120601f850160051c810160208610156126975750805b601f850160051c820191505b81811015611883578281556001016126a3565b815167ffffffffffffffff8111156126d0576126d0612271565b6126e4816126de8454612530565b84612670565b602080601f83116001811461271957600084156127015750858301515b600019600386901b1c1916600185901b178555611883565b600085815260208120601f198616915b8281101561274857888601518255948401946001909101908401612729565b50858210156127665787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090611ed990830184612168565b600082516127ac818460208701612118565b919091019291505056fea26469706673582212204218a496ccb864bca80ce77e5b56e2f51c88eb3acbe5acfa042f347a3c7d582e64736f6c63430008110033",
  "devdoc": {
    "events": {
      "InvoiceCanceled(address,uint256)": {
        "details": "Event emitted when invoice is canceled",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      },
      "InvoiceCreated(address,uint256)": {
        "details": "Event emitted on invoice creating",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      },
      "InvoicePaid(address,uint256)": {
        "details": "Event emitted when invoice is paid",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelInvoice(address,uint256)": {
        "params": {
          "invoiceId": "invoiceId",
          "pool": "Pool address"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createInvoice(address,(uint256,address,uint256,string,address[]))": {
        "params": {
          "core": "InvoiceCore",
          "pool": "Pool address"
        }
      },
      "initialize(address)": {
        "params": {
          "registry_": "Protocol registry address"
        }
      },
      "invoiceState(address,uint256)": {
        "details": "This method returns invoice state",
        "params": {
          "invoiceId": "Invoice ID"
        },
        "returns": {
          "_0": "Invoice State"
        }
      },
      "isValidInvoiceManager(address,address)": {
        "details": "This getter check if address is Valid Invoice Manager"
      },
      "payInvoice(address,uint256)": {
        "params": {
          "invoiceId": "InvoiceId",
          "pool": "Pool address"
        }
      },
      "setInvoiceCanceled(address,uint256)": {
        "params": {
          "invoiceId": "invoiceId",
          "pool": "Pool address"
        }
      },
      "setInvoicePaid(address,uint256)": {
        "params": {
          "invoiceId": "invoiceId",
          "pool": "Pool address"
        }
      },
      "validateInvoiceCore((uint256,address,uint256,string,address[]))": {
        "params": {
          "core": "Invoice params"
        },
        "returns": {
          "_0": "True if params are valid (reverts otherwise)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelInvoice(address,uint256)": {
        "notice": "Cancel Invoice by invoice id (only PoolSecretary)"
      },
      "createInvoice(address,(uint256,address,uint256,string,address[]))": {
        "notice": "create Invoice for given pool (only PoolSecretary)"
      },
      "eventIndex(address,uint256)": {
        "notice": "Event Index"
      },
      "initialize(address)": {
        "notice": "Contract initializer"
      },
      "invoices(address,uint256)": {
        "notice": "Invoice Info"
      },
      "lastInvoiceIdForPool(address)": {
        "notice": "last InvoiceId For Pool"
      },
      "payInvoice(address,uint256)": {
        "notice": "Pay Invoice"
      },
      "registry()": {
        "notice": "Registry contract"
      },
      "setInvoiceCanceled(address,uint256)": {
        "notice": "Set invoice paid for manual invoice cancellation"
      },
      "setInvoicePaid(address,uint256)": {
        "notice": "Set invoice paid for manual confirmation of payment"
      },
      "validateInvoiceCore((uint256,address,uint256,string,address[]))": {
        "notice": "Validates invoice params"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1184,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1187,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1623,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1681,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11542,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRegistry)22560"
      },
      {
        "astId": 11547,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "lastInvoiceIdForPool",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11555,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "invoices",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(InvoiceInfo)21281_storage))"
      },
      {
        "astId": 11562,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "eventIndex",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)22560": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(InvoiceInfo)21281_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IInvoice.InvoiceInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InvoiceInfo)21281_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(InvoiceInfo)21281_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IInvoice.InvoiceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(InvoiceInfo)21281_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InvoiceCore)21269_storage": {
        "encoding": "inplace",
        "label": "struct IInvoice.InvoiceCore",
        "members": [
          {
            "astId": 21259,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21261,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "unitOfAccount",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 21263,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "expirationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21265,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 21268,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "whitelist",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(InvoiceInfo)21281_storage": {
        "encoding": "inplace",
        "label": "struct IInvoice.InvoiceInfo",
        "members": [
          {
            "astId": 21272,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "core",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(InvoiceCore)21269_storage"
          },
          {
            "astId": 21274,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "invoiceId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21276,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "createdBy",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 21278,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "isPaid",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 21280,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "isCanceled",
            "offset": 21,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}