{
  "address": "0x9Dc858C1F83Da51FCcE58473b2F102f6aB16322e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "InvoicePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "cancelInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        }
      ],
      "name": "createInvoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "invoiceState",
      "outputs": [
        {
          "internalType": "enum IInvoice.InvoiceState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invoices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "createdBy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPaid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCanceled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isValidInvoiceManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastInvoiceIdForPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "payInvoice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "setInvoiceCanceled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "invoiceId",
          "type": "uint256"
        }
      ],
      "name": "setInvoicePaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "unitOfAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            }
          ],
          "internalType": "struct IInvoice.InvoiceCore",
          "name": "core",
          "type": "tuple"
        }
      ],
      "name": "validateInvoiceCore",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a57fa4cf2f6c594124cfa33667241ca2877edba884f925334e05cedc3f23f8e",
  "receipt": {
    "to": null,
    "from": "0xE7e5605aC99ED54Ff6E6e32c52e9Ed91AA0163bC",
    "contractAddress": "0x9Dc858C1F83Da51FCcE58473b2F102f6aB16322e",
    "transactionIndex": 139,
    "gasUsed": "2290107",
    "logsBloom": "0x
    "blockHash": "0x23d2d86d103e02d52cf4907eb94ef65190fc2cf8ca8e8d7df82a5ec23f257f41",
    "transactionHash": "0x6a57fa4cf2f6c594124cfa33667241ca2877edba884f925334e05cedc3f23f8e",
    "logs": [
      {
        "transactionIndex": 139,
        "blockNumber": 17934950,
        "transactionHash": "0x6a57fa4cf2f6c594124cfa33667241ca2877edba884f925334e05cedc3f23f8e",
        "address": "0x9Dc858C1F83Da51FCcE58473b2F102f6aB16322e",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 326,
        "blockHash": "0x23d2d86d103e02d52cf4907eb94ef65190fc2cf8ca8e8d7df82a5ec23f257f41"
      }
    ],
    "blockNumber": 17934950,
    "cumulativeGasUsed": "17217833",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "4aedc985f9775ab0893ae4bd47e71ec5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoiceCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"InvoicePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"cancelInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"createInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"invoiceState\",\"outputs\":[{\"internalType\":\"enum IInvoice.InvoiceState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invoices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isValidInvoiceManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastInvoiceIdForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"payInvoice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"setInvoiceCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invoiceId\",\"type\":\"uint256\"}],\"name\":\"setInvoicePaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unitOfAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IInvoice.InvoiceCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"validateInvoiceCore\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It supports both trusted (payment confirmation off-chain by an authorized address) and trustless (on-chain payment) modes of operation. Regardless of the presence of Governance tokens in delegation or balance, and regardless of the owner/creator pool status, any address can act as an invoice payer. The following conditions must be met: - The structure Invoice.sol:invoices for the selected invoice number stores either an empty InvoiceInfo.core.whitelist[] (public invoice), or it contains the payer's address - The structure Invoice.sol:invoices for the selected invoice number has the values false in the fields InvoiceInfo.isPaid and InvoiceInfo.isCanceled (the invoice has not been canceled or paid by anyone yet) - The current network block is less than the InvoiceInfo.core.expirationBlock stored in the structure Invoice.sol:invoices for the selected invoice number When paying the invoice, the amount specified by the invoice creator is debited in the units they have chosen (ERC20 tokens or ETH)._Note. All the above is valid for on-chain invoice payments. For off-chain invoice payments, a 3rd party backend solution is used to verify the payment of the specified invoice and has its mechanisms for allowing or disallowing the user to pay, including KYC. There is no such blockchain payer in this approach; the invoice is marked as paid by the address assigned the role of SERVICE_MANAGER in the Service contract._\",\"events\":{\"InvoiceCanceled(address,uint256)\":{\"details\":\"Event emitted when invoice is canceled\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}},\"InvoiceCreated(address,uint256)\":{\"details\":\"Event emitted on invoice creating\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}},\"InvoicePaid(address,uint256)\":{\"details\":\"Event emitted when invoice is paid\",\"params\":{\"invoiceId\":\"InvoiceId for Pool\",\"pool\":\"Pool address\"}}},\"kind\":\"dev\",\"methods\":{\"cancelInvoice(address,uint256)\":{\"details\":\"To cancel an invoice, the request must pass the onlyValidInvoiceManager modifier, which regulates who can manipulate the pool's invoices on behalf of the pool.After cancellation, the invoice receives an irreversible \\\"Canceled\\\" status.\",\"params\":{\"invoiceId\":\"Invoice identifier\",\"pool\":\"Address of the pool contract that issued the invoice\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"This contract uses OpenZeppelin upgrades and has no need for a constructor function. The constructor is replaced with an initializer function. This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\"},\"createInvoice(address,(uint256,address,uint256,string,address[]))\":{\"details\":\"The onlyValidInvoiceManager modifier determines which accounts can create an invoice for the specified pool.After creation, the invoice receives an \\\"Active\\\" status.\",\"params\":{\"core\":\"Invoice payment data (described in the interface)\",\"pool\":\"Address of the pool contract that issues the invoice\"}},\"initialize(address)\":{\"details\":\"This method replaces the constructor for upgradeable contracts. It also sets the registry contract address in the contract's storage.\",\"params\":{\"registry_\":\"Protocol registry address\"}},\"invoiceState(address,uint256)\":{\"details\":\"This method returns the state of an invoice\",\"params\":{\"invoiceId\":\"The identifier of the invoice\",\"pool\":\"The address of the pool contract that issued the invoice\"}},\"isValidInvoiceManager(address,address)\":{\"details\":\"In order to create and cancel pool invoices, the account address must: - be listed in the pool's secretaries OR - have the \\\"SERVICE_MANAGER\\\" role in the Service contract OR - be the owner of the pool if the pool has not yet obtained DAO status\",\"params\":{\"account\":\"The account address\",\"pool\":\"The address of the pool contract\"}},\"payInvoice(address,uint256)\":{\"details\":\"In addition to the specified modifiers, there is also a check for the payer's wallet to be included in the whitelist of invoice payers.To allow the invoice to be paid by any wallet, the whitelist field should be left empty when creating the invoice.After successful payment, the invoice receives an irreversible \\\"Paid\\\" status.\",\"params\":{\"invoiceId\":\"Identifier of the invoice being paid\",\"pool\":\"Address of the pool contract that issued the invoice\"}},\"setInvoiceCanceled(address,uint256)\":{\"details\":\"Addresses that have the \\\"SERVICE_MANAGER\\\" role in the Service contract can cancel any active invoice of any pool.After cancellation, the invoice receives an irreversible \\\"Canceled\\\" status.\",\"params\":{\"invoiceId\":\"Invoice identifier\",\"pool\":\"Address of the pool contract that issued the invoice\"}},\"setInvoicePaid(address,uint256)\":{\"details\":\"Addresses that have the \\\"SERVICE_MANAGER\\\" role in the Service contract can change the status of any active invoice of any pool to \\\"Paid\\\", indicating a successful payment of the invoice through an off-chain payment method.After successful payment, the invoice receives an irreversible \\\"Paid\\\" status.\",\"params\":{\"invoiceId\":\"Invoice identifier\",\"pool\":\"Address of the pool contract that issued the invoice\"}},\"validateInvoiceCore((uint256,address,uint256,string,address[]))\":{\"details\":\"An invoice is considered valid if it meets the following criteria: - Non-zero payment amount (in any token, including the native network coin) - The expiration block has not yet been reached - The specified token for payment is a valid ERC20 contract\",\"params\":{\"core\":\"Invoice data represented by the structure described in the InvoiceCore interface\"},\"returns\":{\"_0\":\"True if the parameters are valid (reverts otherwise)\"}}},\"stateVariables\":{\"eventIndex\":{\"details\":\"For each pool and for each invoice issued by the pool, the mapping contains global event IDs under which the invoices were registered in the Registry contract.\"},\"invoices\":{\"details\":\"Mapping that stores nested mappings of invoice structures for each pool (pool address is used as the key)\"},\"lastInvoiceIdForPool\":{\"details\":\"\\u041c\\u0430\\u043f\\u043f\\u0438\\u043d\\u0433, \\u0441\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u0449\\u0438\\u0439 \\u043f\\u043e\\u0441\\u043b\\u0435\\u0434\\u043d\\u0438\\u0439 (\\u043c\\u0430\\u043a\\u0441\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439) \\u043d\\u043e\\u043c\\u0435\\u0440 \\u0438\\u043d\\u0432\\u043e\\u0439\\u0441\\u0430 \\u0434\\u043b\\u044f \\u043a\\u0430\\u0436\\u0434\\u043e\\u0433\\u043e \\u043f\\u0443\\u043b\\u0430\"}},\"title\":\"Invoice Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelInvoice(address,uint256)\":{\"notice\":\"Cancel an invoice\"},\"constructor\":{\"notice\":\"Contract constructor.\"},\"createInvoice(address,(uint256,address,uint256,string,address[]))\":{\"notice\":\"Create an invoice by a specified pool\"},\"eventIndex(address,uint256)\":{\"notice\":\"Global enumeration of invoices\"},\"initialize(address)\":{\"notice\":\"Contract initializer\"},\"invoices(address,uint256)\":{\"notice\":\"Invoice data (including their state)\"},\"isValidInvoiceManager(address,address)\":{\"notice\":\"This method checks the account's authority to manipulate pool invoices\"},\"lastInvoiceIdForPool(address)\":{\"notice\":\"\\u041f\\u043e\\u0441\\u043b\\u0435\\u0434\\u043d\\u0438\\u0435 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043f\\u0443\\u043b\\u0430\\u043c\\u0438 \\u0438\\u043d\\u0432\\u043e\\u0439\\u0441\\u044b\"},\"payInvoice(address,uint256)\":{\"notice\":\"On-chain payment of an invoice (trustless scenario)\"},\"registry()\":{\"notice\":\"\\u0410\\u0434\\u0440\\u0435\\u0441 \\u043a\\u043e\\u043d\\u0442\\u0440\\u0430\\u043a\\u0442\\u0430 Registry\"},\"setInvoiceCanceled(address,uint256)\":{\"notice\":\"Canceling an invoice by the manager\"},\"setInvoicePaid(address,uint256)\":{\"notice\":\"Off-chain payment of an invoice (trusted scenario)\"},\"validateInvoiceCore((uint256,address,uint256,string,address[]))\":{\"notice\":\"This method checks the validity of invoice data during its creation\"}},\"notice\":\"This contract is designed for managing invoices issued by pools for payment.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Invoice.sol\":\"Invoice\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Invoice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"./interfaces/registry/IRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./interfaces/IInvoice.sol\\\";\\r\\nimport \\\"./interfaces/IPausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Invoice Contract\\r\\n * @notice This contract is designed for managing invoices issued by pools for payment.\\r\\n * @dev It supports both trusted (payment confirmation off-chain by an authorized address) and trustless (on-chain payment) modes of operation.\\r\\n *Regardless of the presence of Governance tokens in delegation or balance, and regardless of the owner/creator pool status, any address can act as an invoice payer. The following conditions must be met:\\r\\n *\\r\\n * - The structure Invoice.sol:invoices for the selected invoice number stores either an empty InvoiceInfo.core.whitelist[] (public invoice), or it contains the payer's address\\r\\n * - The structure Invoice.sol:invoices for the selected invoice number has the values false in the fields InvoiceInfo.isPaid and InvoiceInfo.isCanceled (the invoice has not been canceled or paid by anyone yet)\\r\\n * - The current network block is less than the InvoiceInfo.core.expirationBlock stored in the structure Invoice.sol:invoices for the selected invoice number\\r\\n *\\r\\n * When paying the invoice, the amount specified by the invoice creator is debited in the units they have chosen (ERC20 tokens or ETH).\\r\\n *\\r\\n *@dev _Note. All the above is valid for on-chain invoice payments. For off-chain invoice payments, a 3rd party backend solution is used to verify the payment of the specified invoice and has its mechanisms for allowing or disallowing the user to pay, including KYC. There is no such blockchain payer in this approach; the invoice is marked as paid by the address assigned the role of SERVICE_MANAGER in the Service contract._\\r\\n */\\r\\ncontract Invoice is Initializable, ReentrancyGuardUpgradeable, IInvoice {\\r\\n    using AddressUpgradeable for address payable;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    // STORAGE\\r\\n\\r\\n    /// @notice \\u0410\\u0434\\u0440\\u0435\\u0441 \\u043a\\u043e\\u043d\\u0442\\u0440\\u0430\\u043a\\u0442\\u0430 Registry\\r\\n    IRegistry public registry;\\r\\n\\r\\n    /// @notice \\u041f\\u043e\\u0441\\u043b\\u0435\\u0434\\u043d\\u0438\\u0435 \\u0441\\u043e\\u0437\\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u043f\\u0443\\u043b\\u0430\\u043c\\u0438 \\u0438\\u043d\\u0432\\u043e\\u0439\\u0441\\u044b\\r\\n    /// @dev \\u041c\\u0430\\u043f\\u043f\\u0438\\u043d\\u0433, \\u0441\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430\\u0449\\u0438\\u0439 \\u043f\\u043e\\u0441\\u043b\\u0435\\u0434\\u043d\\u0438\\u0439 (\\u043c\\u0430\\u043a\\u0441\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439) \\u043d\\u043e\\u043c\\u0435\\u0440 \\u0438\\u043d\\u0432\\u043e\\u0439\\u0441\\u0430 \\u0434\\u043b\\u044f \\u043a\\u0430\\u0436\\u0434\\u043e\\u0433\\u043e \\u043f\\u0443\\u043b\\u0430\\r\\n    mapping(address => uint256) public lastInvoiceIdForPool;\\r\\n\\r\\n    /// @notice Invoice data (including their state)\\r\\n    /// @dev Mapping that stores nested mappings of invoice structures for each pool (pool address is used as the key)\\r\\n    mapping(address => mapping(uint256 => InvoiceInfo)) public invoices;\\r\\n\\r\\n    /// @notice Global enumeration of invoices\\r\\n    /// @dev For each pool and for each invoice issued by the pool, the mapping contains global event IDs under which the invoices were registered in the Registry contract.\\r\\n    mapping(address => mapping(uint256 => uint256)) public eventIndex;\\r\\n\\r\\n    // EVENTS\\r\\n\\r\\n    /**\\r\\n     * @dev Event emitted on invoice creating\\r\\n     * @param pool Pool address\\r\\n     * @param invoiceId InvoiceId for Pool\\r\\n     */\\r\\n    event InvoiceCreated(address pool, uint256 invoiceId);\\r\\n\\r\\n    /**\\r\\n     * @dev Event emitted when invoice is canceled\\r\\n     * @param pool Pool address\\r\\n     * @param invoiceId InvoiceId for Pool\\r\\n     */\\r\\n    event InvoiceCanceled(address pool, uint256 invoiceId);\\r\\n\\r\\n    /**\\r\\n     * @dev Event emitted when invoice is paid\\r\\n     * @param pool Pool address\\r\\n     * @param invoiceId InvoiceId for Pool\\r\\n     */\\r\\n    event InvoicePaid(address pool, uint256 invoiceId);\\r\\n\\r\\n    // MODIFIERS\\r\\n    /**\\r\\n     * @notice Modifier that allows creating and canceling invoices for a given pool.\\r\\n     * @dev The logic of the modifier is described in the isValidInvoiceManager method. The modifier forwards the arguments to this method and uses its boolean output.\\r\\n     */\\r\\n    modifier onlyValidInvoiceManager(address pool) {\\r\\n        require(\\r\\n            isValidInvoiceManager(pool, msg.sender),\\r\\n            ExceptionsLibrary.NOT_INVOICE_MANAGER\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to allow only the service manager to call a function.\\r\\n     */\\r\\n    modifier onlyManager() {\\r\\n        require(\\r\\n            registry.service().hasRole(\\r\\n                registry.service().SERVICE_MANAGER_ROLE(),\\r\\n                msg.sender\\r\\n            ),\\r\\n            ExceptionsLibrary.INVALID_USER\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if the pool is not paused.\\r\\n     */\\r\\n    modifier whenPoolNotPaused(address pool) {\\r\\n        require(!IPausable(pool).paused(), ExceptionsLibrary.POOL_PAUSED);\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@notice Modifier that allows manipulation with an existing invoice only if it has the \\\"Active\\\" status.\\r\\n     */\\r\\n    modifier onlyActive(address pool, uint256 invoiceId) {\\r\\n        require(\\r\\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\\r\\n            ExceptionsLibrary.WRONG_STATE\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // INITIALIZER AND CONSTRUCTOR\\r\\n\\r\\n    /**\\r\\n     * @notice Contract constructor.\\r\\n     * @dev This contract uses OpenZeppelin upgrades and has no need for a constructor function.\\r\\n     * The constructor is replaced with an initializer function.\\r\\n     * This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused.\\r\\n     * @custom:oz-upgrades-unsafe-allow constructor\\r\\n     */\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Contract initializer\\r\\n     * @dev This method replaces the constructor for upgradeable contracts. It also sets the registry contract address in the contract's storage.\\r\\n     * @param registry_ Protocol registry address\\r\\n     */\\r\\n    function initialize(IRegistry registry_) external initializer {\\r\\n        registry = registry_;\\r\\n    }\\r\\n\\r\\n    // PUBLIC FUNCTIONS\\r\\n\\r\\n    /**\\r\\n     * @notice On-chain payment of an invoice (trustless scenario)\\r\\n     * @dev In addition to the specified modifiers, there is also a check for the payer's wallet to be included in the whitelist of invoice payers.\\r\\n     * @dev To allow the invoice to be paid by any wallet, the whitelist field should be left empty when creating the invoice.\\r\\n     * @dev After successful payment, the invoice receives an irreversible \\\"Paid\\\" status.\\r\\n     * @param pool Address of the pool contract that issued the invoice\\r\\n     * @param invoiceId Identifier of the invoice being paid\\r\\n     */\\r\\n    function payInvoice(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) external payable nonReentrant whenPoolNotPaused(pool) {\\r\\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\\r\\n\\r\\n        require(\\r\\n            invoiceState(pool, invoiceId) == InvoiceState.Active,\\r\\n            ExceptionsLibrary.WRONG_STATE\\r\\n        );\\r\\n\\r\\n        //check if payer is whitelisted\\r\\n        if (invoice.core.whitelist.length > 0) {\\r\\n            bool isWhitelisted = false;\\r\\n            for (uint256 i = 0; i < invoice.core.whitelist.length; i++) {\\r\\n                if (invoice.core.whitelist[i] == msg.sender)\\r\\n                    isWhitelisted = true;\\r\\n            }\\r\\n            require(isWhitelisted, ExceptionsLibrary.NOT_WHITELISTED);\\r\\n        }\\r\\n\\r\\n        //if unitOfAccount is ETH\\r\\n        if (invoice.core.unitOfAccount == address(0)) {\\r\\n            require(\\r\\n                msg.value == invoice.core.amount,\\r\\n                ExceptionsLibrary.WRONG_AMOUNT\\r\\n            );\\r\\n\\r\\n            (bool success, ) = payable(pool).call{value: invoice.core.amount}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            require(success, ExceptionsLibrary.WRONG_AMOUNT);\\r\\n        } else {\\r\\n            IERC20Upgradeable(invoice.core.unitOfAccount).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                pool,\\r\\n                invoice.core.amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _setInvoicePaid(pool, invoiceId);\\r\\n        registry.log(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            msg.value,\\r\\n            abi.encodeWithSelector(\\r\\n                IInvoice.payInvoice.selector,\\r\\n                pool,\\r\\n                invoiceId\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create an invoice by a specified pool\\r\\n     * @dev The onlyValidInvoiceManager modifier determines which accounts can create an invoice for the specified pool.\\r\\n     * @dev After creation, the invoice receives an \\\"Active\\\" status.\\r\\n     * @param pool Address of the pool contract that issues the invoice\\r\\n     * @param core Invoice payment data (described in the interface)\\r\\n     */\\r\\n    function createInvoice(\\r\\n        address pool,\\r\\n        InvoiceCore memory core\\r\\n    ) external onlyValidInvoiceManager(pool) {\\r\\n        //check if pool registry record exists\\r\\n        require(\\r\\n            registry.typeOf(pool) == IRecordsRegistry.ContractType.Pool,\\r\\n            ExceptionsLibrary.NOT_POOL\\r\\n        );\\r\\n\\r\\n        //validation\\r\\n        validateInvoiceCore(core);\\r\\n\\r\\n        InvoiceInfo memory info;\\r\\n        info.createdBy = msg.sender;\\r\\n        info.core = core;\\r\\n\\r\\n        //set invoiceId\\r\\n        uint256 invoiceId = lastInvoiceIdForPool[pool];\\r\\n        info.invoiceId = invoiceId;\\r\\n\\r\\n        //add invoice\\r\\n        invoices[pool][invoiceId] = info;\\r\\n        lastInvoiceIdForPool[pool]++;\\r\\n\\r\\n        uint256 index = registry.service().addInvoiceEvent(pool, invoiceId);\\r\\n        eventIndex[pool][invoiceId] = index;\\r\\n\\r\\n        emit InvoiceCreated(pool, invoiceId);\\r\\n\\r\\n        registry.log(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            0,\\r\\n            abi.encodeWithSelector(IInvoice.createInvoice.selector, pool, core)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancel an invoice\\r\\n     * @dev To cancel an invoice, the request must pass the onlyValidInvoiceManager modifier, which regulates who can manipulate the pool's invoices on behalf of the pool.\\r\\n     * @dev After cancellation, the invoice receives an irreversible \\\"Canceled\\\" status.\\r\\n     * @param pool Address of the pool contract that issued the invoice\\r\\n     * @param invoiceId Invoice identifier\\r\\n     */\\r\\n    function cancelInvoice(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) external onlyValidInvoiceManager(pool) {\\r\\n        _setInvoiceCanceled(pool, invoiceId);\\r\\n\\r\\n        registry.log(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            0,\\r\\n            abi.encodeWithSelector(\\r\\n                IInvoice.cancelInvoice.selector,\\r\\n                pool,\\r\\n                invoiceId\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Off-chain payment of an invoice (trusted scenario)\\r\\n     * @dev Addresses that have the \\\"SERVICE_MANAGER\\\" role in the Service contract can change the status of any active invoice of any pool to \\\"Paid\\\", indicating a successful payment of the invoice through an off-chain payment method.\\r\\n     * @dev After successful payment, the invoice receives an irreversible \\\"Paid\\\" status.\\r\\n     * @param pool Address of the pool contract that issued the invoice\\r\\n     * @param invoiceId Invoice identifier\\r\\n     */\\r\\n    function setInvoicePaid(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) external onlyManager {\\r\\n        _setInvoicePaid(pool, invoiceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Canceling an invoice by the manager\\r\\n     * @dev Addresses that have the \\\"SERVICE_MANAGER\\\" role in the Service contract can cancel any active invoice of any pool.\\r\\n     * @dev After cancellation, the invoice receives an irreversible \\\"Canceled\\\" status.\\r\\n     * @param pool Address of the pool contract that issued the invoice\\r\\n     * @param invoiceId Invoice identifier\\r\\n     */\\r\\n    function setInvoiceCanceled(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) external onlyManager {\\r\\n        _setInvoiceCanceled(pool, invoiceId);\\r\\n\\r\\n        registry.log(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            0,\\r\\n            abi.encodeWithSelector(\\r\\n                IInvoice.setInvoiceCanceled.selector,\\r\\n                pool,\\r\\n                invoiceId\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // PUBLIC VIEW FUNCTIONS\\r\\n\\r\\n    /**\\r\\n    * @notice This method checks the validity of invoice data during its creation\\r\\n    * @dev An invoice is considered valid if it meets the following criteria:\\r\\n    - Non-zero payment amount (in any token, including the native network coin)\\r\\n    - The expiration block has not yet been reached\\r\\n    - The specified token for payment is a valid ERC20 contract\\r\\n    * @param core Invoice data represented by the structure described in the InvoiceCore interface\\r\\n    * @return True if the parameters are valid (reverts otherwise)\\r\\n    */\\r\\n    function validateInvoiceCore(\\r\\n        InvoiceCore memory core\\r\\n    ) public view returns (bool) {\\r\\n        require(core.amount > 0, ExceptionsLibrary.WRONG_AMOUNT);\\r\\n\\r\\n        require(\\r\\n            core.expirationBlock > block.number,\\r\\n            ExceptionsLibrary.WRONG_BLOCK_NUMBER\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            core.unitOfAccount == address(0) ||\\r\\n                IERC20Upgradeable(core.unitOfAccount).totalSupply() > 0,\\r\\n            ExceptionsLibrary.WRONG_TOKEN_ADDRESS\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This method returns the state of an invoice\\r\\n     * @param pool The address of the pool contract that issued the invoice\\r\\n     * @param invoiceId The identifier of the invoice\\r\\n     */\\r\\n    function invoiceState(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) public view returns (InvoiceState) {\\r\\n        InvoiceInfo memory invoice = invoices[pool][invoiceId];\\r\\n\\r\\n        if (invoice.isPaid) return InvoiceState.Paid;\\r\\n\\r\\n        if (invoice.isCanceled) return InvoiceState.Canceled;\\r\\n\\r\\n        if (invoice.core.expirationBlock < block.number)\\r\\n            return InvoiceState.Expired;\\r\\n\\r\\n        return InvoiceState.Active;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n\\r\\n    * @notice This method checks the account's authority to manipulate pool invoices\\r\\n    * @dev In order to create and cancel pool invoices, the account address must:\\r\\n    - be listed in the pool's secretaries OR\\r\\n    - have the \\\"SERVICE_MANAGER\\\" role in the Service contract OR\\r\\n    - be the owner of the pool if the pool has not yet obtained DAO status\\r\\n    *@param pool The address of the pool contract\\r\\n    *@param account The account address\\r\\n    */\\r\\n    function isValidInvoiceManager(\\r\\n        address pool,\\r\\n        address account\\r\\n    ) public view returns (bool) {\\r\\n        if (!IPool(pool).isDAO() && account == IPool(pool).owner()) return true;\\r\\n\\r\\n        if (\\r\\n            registry.service().hasRole(\\r\\n                registry.service().SERVICE_MANAGER_ROLE(),\\r\\n                account\\r\\n            ) || IPool(pool).isValidProposer(account)\\r\\n        ) return true;\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    //PRIVATE\\r\\n\\r\\n    /// @dev Implementation of the function that changes the status of an active invoice to \\\"Paid\\\"\\r\\n    function _setInvoicePaid(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) private onlyActive(pool, invoiceId) {\\r\\n        invoices[pool][invoiceId].isPaid = true;\\r\\n        emit InvoicePaid(pool, invoiceId);\\r\\n    }\\r\\n\\r\\n    /// @dev Implementation of the function that cancels an active invoice and sets its status to \\\"Canceled\\\"\\r\\n    function _setInvoiceCanceled(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) private onlyActive(pool, invoiceId) {\\r\\n        invoices[pool][invoiceId].isCanceled = true;\\r\\n        emit InvoiceCanceled(pool, invoiceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb64d6fd612791c68952ea0f1259118a6b21a9c715b338130cc90550e3cbcbe2f\",\"license\":\"MIT\"},\"contracts/interfaces/ICustomProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./ITGE.sol\\\";\\r\\n\\r\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\r\\n\\r\\ninterface ICustomProposal {}\\r\\n\",\"keccak256\":\"0xdcb9b0cec3c89f0b00e465d7f3fab14d2ef57d367800962f24dcc36d5a1688a5\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n/**\\r\\n * @title Invoice Interface\\r\\n * @notice These structures are used to describe an instance of an invoice.\\r\\n * @dev The storage of invoices is managed in Invoice.sol in the `invoices` variable.\\r\\n*/\\r\\ninterface IInvoice {\\r\\n    /** \\r\\n    * @notice This interface contains a data structure that describes the payment rules for an invoice. \\r\\n    * @dev This data is used to validate the payment transaction, determine the state of the invoice, and so on. This data is formed from the input of the invoice creator.\\r\\n    * @param amount Amount to be paid\\r\\n    * @param unitOfAccount The address of the token contract that can be used to make the payment (a zero address assumes payment in native ETH)\\r\\n    * @param expirationBlock The block at which the invoice expires\\r\\n    * @param description Description of the invoice\\r\\n    * @param whitelist A whitelist of payers. An empty array denotes a public invoice.\\r\\n    */\\r\\n    struct InvoiceCore {\\r\\n        uint256 amount;\\r\\n        address unitOfAccount;\\r\\n        uint256 expirationBlock;\\r\\n        string description;\\r\\n        address[] whitelist;\\r\\n    }\\r\\n    /**\\r\\n    * @notice This interface is used to store complete records of invoices, including their current state, metadata, and payment rules.\\r\\n    * @dev This data is automatically formed when the invoice is created and changes when state-changing transactions are executed.\\r\\n    * @param core Payment rules (user input)\\r\\n    * @param invoiceId Invoice identifier\\r\\n    * @param createdBy The creator of the invoice\\r\\n    * @param isPaid Flag indicating whether the invoice has been successfully paid\\r\\n    * @param isCanceled Flag indicating whether the invoice has been canceled\\r\\n    */\\r\\n    struct InvoiceInfo {\\r\\n        InvoiceCore core;\\r\\n        uint256 invoiceId;\\r\\n        address createdBy;\\r\\n        bool isPaid;\\r\\n        bool isCanceled;\\r\\n    }\\r\\n    /**\\r\\n    * @notice Encoding the states of an individual invoice\\r\\n    * @dev None - for a non-existent invoice, Paid, Expired, Canceled - are completed invoice states where payment is not possible.\\r\\n    */\\r\\n    enum InvoiceState {\\r\\n        None,\\r\\n        Active,\\r\\n        Paid,\\r\\n        Expired,\\r\\n        Canceled\\r\\n    }\\r\\n\\r\\n    function createInvoice(address pool, InvoiceCore memory core) external;\\r\\n\\r\\n    function payInvoice(address pool, uint256 invoiceId) external payable;\\r\\n\\r\\n    function cancelInvoice(address pool, uint256 invoiceId) external;\\r\\n\\r\\n    function setInvoiceCanceled(address pool, uint256 invoiceId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfd80b1da68d8cd61001e8a9a8419a295a8c1c30c76d83e08440fafd994dfbc1f\",\"license\":\"MIT\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IPausable {\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa478fbf96e88d48bcd569befc8faf7a71f98b743b86fa72a328d42311b2a7edc\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IToken.sol\\\";\\r\\nimport \\\"./registry/IRegistry.sol\\\";\\r\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\r\\n\\r\\nimport \\\"./governor/IGovernor.sol\\\";\\r\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\r\\nimport \\\"./governor/IGovernorProposals.sol\\\";\\r\\n\\r\\ninterface IPool is IGovernorProposals {\\r\\n    function initialize(\\r\\n        ICompaniesRegistry.CompanyInfo memory companyInfo_\\r\\n    ) external;\\r\\n\\r\\n    function setNewOwnerWithSettings(\\r\\n        address owner_,\\r\\n        string memory trademark_,\\r\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_\\r\\n    ) external;\\r\\n\\r\\n    function propose(\\r\\n        address proposer,\\r\\n        uint256 proposalType,\\r\\n        IGovernor.ProposalCoreData memory core,\\r\\n        IGovernor.ProposalMetaData memory meta\\r\\n    ) external returns (uint256 proposalId);\\r\\n\\r\\n    function setToken(address token_, IToken.TokenType tokenType_) external;\\r\\n\\r\\n    function setProposalIdToTGE(address tge) external;\\r\\n\\r\\n    function cancelProposal(uint256 proposalId) external;\\r\\n\\r\\n    function setSettings(\\r\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\r\\n        address[] memory secretary,\\r\\n        address[] memory executor\\r\\n    ) external;\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function isDAO() external view returns (bool);\\r\\n\\r\\n    function trademark() external view returns (string memory);\\r\\n\\r\\n    function getGovernanceToken() external view returns (IToken);\\r\\n\\r\\n    function tokenExists(IToken token_) external view returns (bool);\\r\\n\\r\\n    function tokenTypeByAddress(\\r\\n        address token_\\r\\n    ) external view returns (IToken.TokenType);\\r\\n\\r\\n    function isValidProposer(address account) external view returns (bool);\\r\\n\\r\\n    function isPoolSecretary(address account) external view returns (bool);\\r\\n\\r\\n    function isLastProposalIdByTypeActive(\\r\\n        uint256 type_\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function validateGovernanceSettings(\\r\\n        IGovernanceSettings.NewGovernanceSettings memory settings\\r\\n    ) external pure;\\r\\n\\r\\n    function getPoolSecretary() external view returns (address[] memory);\\r\\n\\r\\n    function getPoolExecutor() external view returns (address[] memory);\\r\\n\\r\\n    function setCompanyInfo(\\r\\n        uint256 _fee,\\r\\n        uint256 _jurisdiction,\\r\\n        uint256 _entityType,\\r\\n        string memory _ein,\\r\\n        string memory _dateOfIncorporation,\\r\\n        string memory _OAuri\\r\\n    ) external;\\r\\n\\r\\n    function castVote(uint256 proposalId, bool support) external;\\r\\n\\r\\n    function executeProposal(uint256 proposalId) external;\\r\\n\\r\\n    function getCompanyFee() external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c44d4778837f39fcb91f13ad357ce57745cba2e89f27df839a4cbfa6bfb92f8\",\"license\":\"MIT\"},\"contracts/interfaces/IService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"./ITGE.sol\\\";\\r\\nimport \\\"./ICustomProposal.sol\\\";\\r\\nimport \\\"./registry/IRecordsRegistry.sol\\\";\\r\\nimport \\\"./registry/ICompaniesRegistry.sol\\\";\\r\\nimport \\\"./registry/IRegistry.sol\\\";\\r\\nimport \\\"./IToken.sol\\\";\\r\\nimport \\\"./IInvoice.sol\\\";\\r\\nimport \\\"./IVesting.sol\\\";\\r\\nimport \\\"./ITokenFactory.sol\\\";\\r\\nimport \\\"./ITGEFactory.sol\\\";\\r\\nimport \\\"./IPool.sol\\\";\\r\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\r\\n\\r\\ninterface IService is IAccessControlEnumerableUpgradeable {\\r\\n    function ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function WHITELISTED_USER_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function SERVICE_MANAGER_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function EXECUTOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function createPool(\\r\\n        ICompaniesRegistry.CompanyInfo memory companyInfo\\r\\n    ) external returns(address);\\r\\n\\r\\n    function addProposal(uint256 proposalId) external;\\r\\n\\r\\n    function addEvent(\\r\\n        IRecordsRegistry.EventType eventType,\\r\\n        uint256 proposalId,\\r\\n        string calldata metaHash\\r\\n    ) external;\\r\\n\\r\\n    function setProtocolCollectedFee(\\r\\n        address _token,\\r\\n        uint256 _protocolTokenFee\\r\\n    ) external;\\r\\n\\r\\n    function registry() external view returns (IRegistry);\\r\\n\\r\\n    function vesting() external view returns (IVesting);\\r\\n\\r\\n    function tokenFactory() external view returns (ITokenFactory);\\r\\n\\r\\n    function tgeFactory() external view returns (ITGEFactory);\\r\\n\\r\\n    function invoice() external view returns (IInvoice);\\r\\n\\r\\n    function protocolTreasury() external view returns (address);\\r\\n\\r\\n    function protocolTokenFee() external view returns (uint256);\\r\\n\\r\\n    function getMinSoftCap() external view returns (uint256);\\r\\n\\r\\n    function getProtocolTokenFee(\\r\\n        uint256 amount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getProtocolCollectedFee(\\r\\n        address token_\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function poolBeacon() external view returns (address);\\r\\n\\r\\n    function tgeBeacon() external view returns (address);\\r\\n\\r\\n    function tokenBeacon() external view returns (address);\\r\\n\\r\\n    function tokenERC1155Beacon() external view returns (address);\\r\\n\\r\\n    function customProposal() external view returns (ICustomProposal);\\r\\n\\r\\n    function validateTGEInfo(\\r\\n        ITGE.TGEInfo calldata info,\\r\\n        uint256 cap,\\r\\n        uint256 totalSupply,\\r\\n        IToken.TokenType tokenType\\r\\n    ) external view;\\r\\n\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function addInvoiceEvent(\\r\\n        address pool,\\r\\n        uint256 invoiceId\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function purchasePool(\\r\\n        uint256 jurisdiction,\\r\\n        uint256 entityType,\\r\\n        string memory trademark,\\r\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\r\\n    ) external payable;\\r\\n\\r\\n    function transferPurchasedPoolByService(\\r\\n        address newowner,\\r\\n        uint256 jurisdiction,\\r\\n        uint256 entityType,\\r\\n        string memory trademark,\\r\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xcc5d4a4cfc8e87c863722e3b472a582f504ade7f133d49044671972b5ab45f89\",\"license\":\"MIT\"},\"contracts/interfaces/ITGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./IToken.sol\\\";\\r\\nimport \\\"./ITokenERC1155.sol\\\";\\r\\nimport \\\"./IVesting.sol\\\";\\r\\n\\r\\ninterface ITGE {\\r\\n    /**\\r\\n    * @notice This structure defines comprehensive TGE settings, including Vesting, Lockup, and distribution rules for these tokens.\\r\\n    * @dev Initially, such a structure appears as a parameter when creating a proposal in CustomProposal, after which the data from the structure is placed in the storage of the deployed TGE contract.\\r\\n    * @dev In addition, these data are used as an argument in its original form in the TGEFactory contract, including when creating the initial TGE by the pool owner without a proposal.\\r\\n    * @param price The price of one token in the smallest unitOfAccount (1 wei when defining the price in ETH, 0.000001 USDT when defining the price in USDT, etc.)\\r\\n    * @param hardcap The maximum number of tokens that can be sold (note the ProtocolTokenFee for Governance Tokens)\\r\\n    * @param softcap The minimum number of tokens that buyers must acquire for the TGE to be considered successful\\r\\n    * @param minPurchase The minimum number of tokens that can be purchased by a single account (minimum one-time purchase)\\r\\n    * @param maxPurchase The maximum number of tokens that can be purchased by a single account in total during the launched TGE \\r\\n    * @param duration The duration of the event in blocks, after which the TGE status will be forcibly changed from Active to another\\r\\n    * @param vestingParams Vesting settings for tokens acquired during this TGE\\r\\n    * @param userWhiteList A list of addresses allowed to participate in this TGE. Leave the list empty to make the TGE public.\\r\\n    * @param unitOfAccount The address of the ERC20 or compatible token contract, in the smallest units of which the price of one token is determined\\r\\n    * @param lockupDuration The duration of token lockup (in blocks), one of two independent lockup conditions.\\r\\n    * @param lockupTVL The minimum total pool balance in USD, one of two independent lockup conditions.\\r\\n    */\\r\\n\\r\\n    struct TGEInfo {\\r\\n        uint256 price;\\r\\n        uint256 hardcap;\\r\\n        uint256 softcap;\\r\\n        uint256 minPurchase;\\r\\n        uint256 maxPurchase;\\r\\n        uint256 duration;\\r\\n        IVesting.VestingParams vestingParams;\\r\\n        address[] userWhitelist;\\r\\n        address unitOfAccount;\\r\\n        uint256 lockupDuration;\\r\\n        uint256 lockupTVL;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _service,\\r\\n        address _token,\\r\\n        uint256 _tokenId,\\r\\n        string memory _uri,\\r\\n        TGEInfo calldata _info,\\r\\n        uint256 _protocolFee\\r\\n    ) external;\\r\\n\\r\\n    enum State {\\r\\n        Active,\\r\\n        Failed,\\r\\n        Successful\\r\\n    }\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function tokenId() external view returns (uint256);\\r\\n\\r\\n    function state() external view returns (State);\\r\\n\\r\\n    function getInfo() external view returns (TGEInfo memory);\\r\\n\\r\\n    function transferUnlocked() external view returns (bool);\\r\\n\\r\\n    function purchaseOf(address user) external view returns (uint256);\\r\\n\\r\\n    function redeemableBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function lockedBalanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function getEnd() external view returns (uint256);\\r\\n\\r\\n    function totalPurchased() external view returns (uint256);\\r\\n\\r\\n    function isERC1155TGE() external view returns (bool);\\r\\n\\r\\n    function purchase(uint256 amount) external payable;\\r\\n\\r\\n    function transferFunds() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc06af5c35b467ecea58bec4c8bde0c2ee55ebafe17684813cd998d806da8e6ee\",\"license\":\"MIT\"},\"contracts/interfaces/ITGEFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./ITGE.sol\\\";\\r\\nimport \\\"./IToken.sol\\\";\\r\\nimport \\\"./governor/IGovernanceSettings.sol\\\";\\r\\n\\r\\ninterface ITGEFactory {\\r\\n    function createSecondaryTGE(\\r\\n        address token,\\r\\n        ITGE.TGEInfo calldata tgeInfo,\\r\\n        IToken.TokenInfo calldata tokenInfo,\\r\\n        string memory metadataURI\\r\\n    ) external;\\r\\n\\r\\n    function createSecondaryTGEERC1155(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        string memory uri,\\r\\n        ITGE.TGEInfo calldata tgeInfo,\\r\\n        IToken.TokenInfo calldata tokenInfo,\\r\\n        string memory metadataURI\\r\\n    ) external;\\r\\n\\r\\n    function createPrimaryTGE(\\r\\n        address poolAddress,\\r\\n        IToken.TokenInfo memory tokenInfo,\\r\\n        ITGE.TGEInfo memory tgeInfo,\\r\\n        string memory metadataURI,\\r\\n        IGovernanceSettings.NewGovernanceSettings memory governanceSettings_,\\r\\n        address[] memory secretary,\\r\\n        address[] memory executor\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x6de57f174f9b08389700e208eb353904d636afc424917bbc2f7b878402cd7ddb\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\r\\nimport \\\"./IService.sol\\\";\\r\\n\\r\\ninterface IToken is IVotesUpgradeable, IERC20Upgradeable {\\r\\n    /**\\r\\n    * @notice This structure is used to define the parameters of ERC20 tokens issued by the protocol for pools.\\r\\n    * @dev This structure is suitable for both Governance and Preference tokens if they are based on ERC20.\\r\\n    * @param tokenType Numeric code for the token type\\r\\n    * @param name Full name of the token\\r\\n    * @param symbol Ticker symbol (short name) of the token\\r\\n    * @param description Description of the token\\r\\n    * @param cap Maximum allowable token issuance\\r\\n    * @param decimals Number of decimal places for the token (precision)\\r\\n    */\\r\\n    struct TokenInfo {\\r\\n        TokenType tokenType;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        string description;\\r\\n        uint256 cap;\\r\\n        uint8 decimals;\\r\\n    }\\r\\n    /**\\r\\n    * @notice Token type encoding\\r\\n    */\\r\\n    enum TokenType {\\r\\n        None,\\r\\n        Governance,\\r\\n        Preference\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        IService service_,\\r\\n        address pool_,\\r\\n        TokenInfo memory info,\\r\\n        address primaryTGE_\\r\\n    ) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    function cap() external view returns (uint256);\\r\\n\\r\\n    function unlockedBalanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function service() external view returns (IService);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function tokenType() external view returns (TokenType);\\r\\n\\r\\n    function lastTGE() external view returns (address);\\r\\n\\r\\n    function getTGEList() external view returns (address[] memory);\\r\\n\\r\\n    function isPrimaryTGESuccessful() external view returns (bool);\\r\\n\\r\\n    function addTGE(address tge) external;\\r\\n\\r\\n    function setTGEVestedTokens(uint256 amount) external;\\r\\n\\r\\n    function setProtocolFeeReserved(uint256 amount) external;\\r\\n\\r\\n    function getTotalTGEVestedTokens() external view returns (uint256);\\r\\n\\r\\n    function getTotalProtocolFeeReserved() external view returns (uint256);\\r\\n\\r\\n    function totalSupplyWithReserves() external view returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function delegate(\\r\\n        address delegatee\\r\\n    ) external; \\r\\n}\\r\\n\",\"keccak256\":\"0xbaa27a11f0d4446acb54ceac53a871b7e9c63d0ae4efa929cb853f97cd543ab2\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\r\\nimport \\\"./IService.sol\\\";\\r\\nimport \\\"./IToken.sol\\\";\\r\\n\\r\\ninterface ITokenERC1155 is IERC1155Upgradeable {\\r\\n    function initialize(\\r\\n        IService service_,\\r\\n        address pool_,\\r\\n        IToken.TokenInfo memory info,\\r\\n        address primaryTGE_\\r\\n    ) external;\\r\\n\\r\\n    function mint(address to, uint256 tokenId, uint256 amount) external;\\r\\n\\r\\n    function burn(address from, uint256 tokenId, uint256 amount) external;\\r\\n\\r\\n    function cap(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    function unlockedBalanceOf(\\r\\n        address account,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function service() external view returns (IService);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function lastTokenId() external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function tokenType() external view returns (IToken.TokenType);\\r\\n\\r\\n    function lastTGE(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function getTGEList(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    function isPrimaryTGESuccessful(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function addTGE(address tge, uint256 tokenId) external;\\r\\n\\r\\n    function setTGEVestedTokens(uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n    function setProtocolFeeReserved(uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n    function getTotalTGEVestedTokens(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getTotalProtocolFeeReserved(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function totalSupplyWithReserves(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function setURI(uint256 tokenId, string memory tokenURI) external;\\r\\n\\r\\n    function setTokenIdCap(uint256 _tokenId, uint256 _cap) external;\\r\\n\\r\\n    function transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setLastTokenId(uint256 tokenId) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1e1e5b09d6e326fd72a6f3c11aabeeee3549bb49aebbf252e965e0226a6592ce\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./ITokenERC1155.sol\\\";\\n\\ninterface ITokenFactory {\\n    function createToken(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n\\n    function createTokenERC1155(\\n        address pool,\\n        IToken.TokenInfo memory info,\\n        address primaryTGE\\n    ) external returns (address token);\\n}\\n\",\"keccak256\":\"0x8384f0537c953611968ad8b27d64958dbcfde71ccca7107e862da35074a6f6e2\",\"license\":\"MIT\"},\"contracts/interfaces/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IVesting {\\r\\n    /**\\r\\n     * @notice This interface describes a vesting program for tokens distributed within a specific TGE.\\r\\n     * @dev Such data is stored in the TGE contracts in the TGEInfo public info.\\r\\n     * @param vestedShare The percentage of tokens that participate in the vesting program (not distributed until conditions are met)\\r\\n     * @param cliff Cliff period (in blocks)\\r\\n     * @param cliffShare The portion of tokens that are distributed\\r\\n     * @param spans The number of periods for distributing the remaining tokens in vesting in equal shares\\r\\n     * @param spanDuration The duration of one such period (in blocks)\\r\\n     * @param spanShare The percentage of the total number of tokens in vesting that corresponds to one such period\\r\\n     * @param claimTVL The minimum required TVL of the pool after which it will be possible to claim tokens from vesting. Optional parameter (0 if this condition is not needed)\\r\\n     * @param resolvers A list of addresses that can cancel the vesting program for any address from the TGE participants list\\r\\n     */\\r\\n    struct VestingParams {\\r\\n        uint256 vestedShare;\\r\\n        uint256 cliff;\\r\\n        uint256 cliffShare;\\r\\n        uint256 spans;\\r\\n        uint256 spanDuration;\\r\\n        uint256 spanShare;\\r\\n        uint256 claimTVL;\\r\\n        address[] resolvers;\\r\\n    }\\r\\n\\r\\n    function vest(address to, uint256 amount) external;\\r\\n\\r\\n    function cancel(address tge, address account) external;\\r\\n\\r\\n    function validateParams(\\r\\n        VestingParams memory params\\r\\n    ) external pure returns (bool);\\r\\n\\r\\n    function vested(\\r\\n        address tge,\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function totalVested(address tge) external view returns (uint256);\\r\\n\\r\\n    function vestedBalanceOf(\\r\\n        address tge,\\r\\n        address account\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function claim(address tge) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbee2f0d452fd3d268159e9322bd623e6416dd41d3f1d2bdfd62cf2d61e2f3f54\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernanceSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IGovernanceSettings {\\r\\n    /**\\r\\n     * @notice This structure specifies and stores the Governance settings for each individual pool.\\r\\n     * @dev More information on the thresholds (proposal, quorum, decision) and creating proposals can be found in the \\\"Other Entities\\\" section.\\r\\n     * @param proposalThreshold_ The proposal threshold (specified in token units with decimals taken into account)\\r\\n     * @param quorumThreshold_ The quorum threshold (specified as a percentage)\\r\\n     * @param decisionThreshold_ The decision threshold (specified as a percentage)\\r\\n     * @param votingDuration_ The duration of the voting period (specified in blocks)\\r\\n     * @param transferValueForDelay_ The minimum amount in USD for which a transfer from the pool wallet will be subject to a del\\r\\n     * @param executionDelays_ List of execution delays specified in blocks for different types of proposals\\r\\n     * @param votingStartDelay The delay before voting starts for newly created proposals, specified in blocks\\r\\n     */\\r\\n    struct NewGovernanceSettings {\\r\\n        uint256 proposalThreshold;\\r\\n        uint256 quorumThreshold;\\r\\n        uint256 decisionThreshold;\\r\\n        uint256 votingDuration;\\r\\n        uint256 transferValueForDelay;\\r\\n        uint256[4] executionDelays;\\r\\n        uint256 votingStartDelay;\\r\\n    }\\r\\n\\r\\n    function setGovernanceSettings(\\r\\n        NewGovernanceSettings memory settings\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbd7a46af1e02aba199423e43feb09d053035d19faefb8a1030cca3e78778d3f8\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/registry/IRecordsRegistry.sol\\\";\\r\\n\\r\\ninterface IGovernor {\\r\\n    /**\\r\\n     * @notice Struct with proposal core data\\r\\n     * @dev This interface specifies the Governance settings that existed in the pool at the time of proposal creation, as well as the service data (to which addresses and with what messages and amounts of ETH should be sent) of the scenario that should be executed in case of a positive voting outcome.\\r\\n     * @param targets A list of addresses to be called in case of a positive voting outcome\\r\\n     * @param values The amounts of wei to be sent to the addresses from targets\\r\\n     * @param callDatas The 'calldata' messages to be attached to transactions\\r\\n     * @param quorumThreshold The quorum, expressed as a percentage with DENOM taken into account\\r\\n     * @param decisionThreshold The decision-making threshold, expressed as a percentage with DENOM taken into account\\r\\n     * @param executionDelay The number of blocks that must pass since the creation of the proposal for it to be considered launched\\r\\n     */\\r\\n    struct ProposalCoreData {\\r\\n        address[] targets;\\r\\n        uint256[] values;\\r\\n        bytes[] callDatas;\\r\\n        uint256 quorumThreshold;\\r\\n        uint256 decisionThreshold;\\r\\n        uint256 executionDelay;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This interface specifies information about the subject of the voting, intended for human perception.\\r\\n     * @dev Struct with proposal metadata\\r\\n     * @param proposalType The digital code of the proposal type\\r\\n     * @param description The public description of the proposal\\r\\n     * @param metaHash The identifier of the private proposal description stored on the backend\\r\\n     */\\r\\n    struct ProposalMetaData {\\r\\n        IRecordsRegistry.EventType proposalType;\\r\\n        string description;\\r\\n        string metaHash;\\r\\n    }\\r\\n\\r\\n    function proposalState(uint256 proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 state);\\r\\n}\\r\\n\",\"keccak256\":\"0x55ed3a5c79b2d98c3026ee33b7ef3c3f72498ca8df28df1e7cdcf80ede335c3f\",\"license\":\"MIT\"},\"contracts/interfaces/governor/IGovernorProposals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../IService.sol\\\";\\n\\ninterface IGovernorProposals {\\n    function service() external view returns (IService);\\n}\\n\",\"keccak256\":\"0xccb34e00bebdc99b089351a10727d57141e22268ef25b289e7d3aba34177f9c7\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ICompaniesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../ITGE.sol\\\";\\r\\nimport \\\"../IToken.sol\\\";\\r\\n\\r\\ninterface ICompaniesRegistry {\\r\\n    /**\\r\\n    * @notice This is how immutable data about companies is stored\\r\\n    * @dev For companies listed for sale, this data is stored in the Registry in mapping(uint256 => CompanyInfo) public companies. Additionally, this data is duplicated in the Pool contract in IRegistry.CompanyInfo public companyInfo.\\r\\n    * @param jurisdiction Numeric code for the jurisdiction (region where the company is registered)\\r\\n    * @param entityType Numeric code for the type of organization\\r\\n    * @param ein Unique registration number (uniqueness is checked within a single jurisdiction)\\r\\n    * @param dateOfIncorporation Date of company registration (in the format provided by the jurisdiction)\\r\\n    * @param fee Fost of the company in wei ETH\\r\\n    */ \\r\\n    struct CompanyInfo {\\r\\n        uint256 jurisdiction;\\r\\n        uint256 entityType;\\r\\n        string ein;\\r\\n        string dateOfIncorporation;\\r\\n        uint256 fee;\\r\\n    }\\r\\n\\r\\n    function lockCompany(\\r\\n        uint256 jurisdiction,\\r\\n        uint256 entityType\\r\\n    ) external returns (CompanyInfo memory);\\r\\n\\r\\n    function createCompany(\\r\\n        CompanyInfo calldata info\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc9f182cbcbe6d1507c3beae1aaa46ab162ba53390b264ff3c721fb59cc06d3ad\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRecordsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IRecordsRegistry {\\r\\n    /**\\r\\n     * @notice In the section of the Registry contract that contains records of the type of deployed user contract, the following numeric encoding of contract types is used.\\r\\n     * @dev TGE is both a type of user contract and an event for which the contract was deployed.\\r\\n     **/\\r\\n    enum ContractType {\\r\\n        None,\\r\\n        Pool,\\r\\n        GovernanceToken,\\r\\n        PreferenceToken,\\r\\n        TGE\\r\\n    }\\r\\n    /**\\r\\n     * @notice Encoding of the registered event type\\r\\n     */\\r\\n    enum EventType {\\r\\n        None,\\r\\n        Transfer,\\r\\n        TGE,\\r\\n        GovernanceSettings\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This structure is used for contracts storing in the CompanyDAO ecosystem.\\r\\n     * @dev The Registry contract stores data about deployed user contracts in `ContractInfo[] public contractRecords`, where records receive a sequential and pool-independent numbering.\\r\\n     * @param addr Deployed contract address\\r\\n     * @param contractType Digital code of contract type\\r\\n     * @param description Contract description\\r\\n     */\\r\\n    struct ContractInfo {\\r\\n        address addr;\\r\\n        ContractType contractType;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Using this data, you can refer to the contract of a specific pool to get more detailed information about the proposal.\\r\\n     * @dev The Registry contract stores data about proposals launched by users in `ProposalInfo[] public proposalRecords`, where records receive a sequential and pool-independent numbering.\\r\\n     * @param pool Pool contract in which the proposal was launched\\r\\n     * @param proposalId Internal proposal identifier for the pool\\r\\n     * @param description Proposal description\\r\\n     */\\r\\n    struct ProposalInfo {\\r\\n        address pool;\\r\\n        uint256 proposalId;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The Registry contract stores data about all events that have taken place in `Event[] public events`, where records receive a sequential and pool-independent numbering.\\r\\n     * @param eventType Code of event type\\r\\n     * @param pool Address of the pool to which this event relates\\r\\n     * @param eventContract Address of the event contract, if the event type implies the deployment of a separate contract\\r\\n     * @param proposalId Internal proposal identifier for the pool, the execution of which led to the launch of this event\\r\\n     * @param metaHash Hash identifier of the private description stored on the backend\\r\\n     */\\r\\n    struct Event {\\r\\n        EventType eventType;\\r\\n        address pool;\\r\\n        address eventContract;\\r\\n        uint256 proposalId;\\r\\n        string metaHash;\\r\\n    }\\r\\n\\r\\n    function addContractRecord(\\r\\n        address addr,\\r\\n        ContractType contractType,\\r\\n        string memory description\\r\\n    ) external returns (uint256 index);\\r\\n\\r\\n    function addProposalRecord(\\r\\n        address pool,\\r\\n        uint256 proposalId\\r\\n    ) external returns (uint256 index);\\r\\n\\r\\n    function addEventRecord(\\r\\n        address pool,\\r\\n        EventType eventType,\\r\\n        address eventContract,\\r\\n        uint256 proposalId,\\r\\n        string calldata metaHash\\r\\n    ) external returns (uint256 index);\\r\\n\\r\\n    function typeOf(address addr) external view returns (ContractType);\\r\\n}\\r\\n\",\"keccak256\":\"0x5b60cab7b9c64d04768f68d3341a9eb87a23bf52d9befee53e51c69f9b84caa1\",\"license\":\"MIT\"},\"contracts/interfaces/registry/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./ICompaniesRegistry.sol\\\";\\r\\nimport \\\"./ITokensRegistry.sol\\\";\\r\\nimport \\\"./IRecordsRegistry.sol\\\";\\r\\nimport \\\"../IService.sol\\\";\\r\\n\\r\\ninterface IRegistry is ITokensRegistry, ICompaniesRegistry, IRecordsRegistry {\\r\\n    function service() external view returns (IService);\\r\\n\\r\\n    function COMPANIES_MANAGER_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function hasRole(\\r\\n        bytes32 role,\\r\\n        address account\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function log(\\r\\n        address sender,\\r\\n        address receiver,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n\\r\\n    function getPoolAddressByIndex(uint256 index) external view returns (address);\\r\\n\\r\\n    function getAvailableCompanyAddress(\\r\\n        uint256 jurisdiction,\\r\\n        uint256 entityType\\r\\n    ) external view returns (address);\\r\\n}\",\"keccak256\":\"0x85c4895f185415d196f91affbbc18f6f8d8650d208fda210a1388beec65c188b\",\"license\":\"MIT\"},\"contracts/interfaces/registry/ITokensRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface ITokensRegistry {\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcbbf6de279d7d4b0b55061c2ee0980e1b4e5a769ba6f01d39ec681111f51b110\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary ExceptionsLibrary {\\r\\n    string public constant ADDRESS_ZERO = \\\"ADDRESS_ZERO\\\";\\r\\n    string public constant INCORRECT_ETH_PASSED = \\\"INCORRECT_ETH_PASSED\\\";\\r\\n    string public constant NO_COMPANY = \\\"NO_COMPANY\\\";\\r\\n    string public constant INVALID_TOKEN = \\\"INVALID_TOKEN\\\";\\r\\n    string public constant NOT_POOL = \\\"NOT_POOL\\\";\\r\\n    string public constant NOT_TGE = \\\"NOT_TGE\\\";\\r\\n    string public constant NOT_Registry = \\\"NOT_Registry\\\";\\r\\n    string public constant NOT_POOL_OWNER = \\\"NOT_POOL_OWNER\\\";\\r\\n    string public constant NOT_SERVICE_OWNER = \\\"NOT_SERVICE_OWNER\\\";\\r\\n    string public constant IS_DAO = \\\"IS_DAO\\\";\\r\\n    string public constant NOT_DAO = \\\"NOT_DAO\\\";\\r\\n    string public constant NOT_WHITELISTED = \\\"NOT_WHITELISTED\\\";\\r\\n    string public constant NOT_SERVICE = \\\"NOT_SERVICE\\\";\\r\\n    string public constant WRONG_STATE = \\\"WRONG_STATE\\\";\\r\\n    string public constant TRANSFER_FAILED = \\\"TRANSFER_FAILED\\\";\\r\\n    string public constant CLAIM_NOT_AVAILABLE = \\\"CLAIM_NOT_AVAILABLE\\\";\\r\\n    string public constant NO_LOCKED_BALANCE = \\\"NO_LOCKED_BALANCE\\\";\\r\\n    string public constant LOCKUP_TVL_REACHED = \\\"LOCKUP_TVL_REACHED\\\";\\r\\n    string public constant HARDCAP_OVERFLOW = \\\"HARDCAP_OVERFLOW\\\";\\r\\n    string public constant MAX_PURCHASE_OVERFLOW = \\\"MAX_PURCHASE_OVERFLOW\\\";\\r\\n    string public constant HARDCAP_OVERFLOW_REMAINING_SUPPLY =\\r\\n        \\\"HARDCAP_OVERFLOW_REMAINING_SUPPLY\\\";\\r\\n    string public constant HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY =\\r\\n        \\\"HARDCAP_AND_PROTOCOL_FEE_OVERFLOW_REMAINING_SUPPLY\\\";\\r\\n    string public constant MIN_PURCHASE_UNDERFLOW = \\\"MIN_PURCHASE_UNDERFLOW\\\";\\r\\n    string public constant LOW_UNLOCKED_BALANCE = \\\"LOW_UNLOCKED_BALANCE\\\";\\r\\n    string public constant ZERO_PURCHASE_AMOUNT = \\\"ZERO_PURCHASE_AMOUNTs\\\";\\r\\n    string public constant NOTHING_TO_REDEEM = \\\"NOTHING_TO_REDEEM\\\";\\r\\n    string public constant RECORD_IN_USE = \\\"RECORD_IN_USE\\\";\\r\\n    string public constant INVALID_EIN = \\\"INVALID_EIN\\\";\\r\\n    string public constant VALUE_ZERO = \\\"VALUE_ZERO\\\";\\r\\n    string public constant ALREADY_SET = \\\"ALREADY_SET\\\";\\r\\n    string public constant VOTING_FINISHED = \\\"VOTING_FINISHED\\\";\\r\\n    string public constant ALREADY_EXECUTED = \\\"ALREADY_EXECUTED\\\";\\r\\n    string public constant ACTIVE_TGE_EXISTS = \\\"ACTIVE_TGE_EXISTS\\\";\\r\\n    string public constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\r\\n    string public constant INVALID_CAP = \\\"INVALID_CAP\\\";\\r\\n    string public constant INVALID_HARDCAP = \\\"INVALID_HARDCAP\\\";\\r\\n    string public constant ONLY_POOL = \\\"ONLY_POOL\\\";\\r\\n    string public constant ETH_TRANSFER_FAIL = \\\"ETH_TRANSFER_FAIL\\\";\\r\\n    string public constant TOKEN_TRANSFER_FAIL = \\\"TOKEN_TRANSFER_FAIL\\\";\\r\\n    string public constant SERVICE_PAUSED = \\\"SERVICE_PAUSED\\\";\\r\\n    string public constant INVALID_PROPOSAL_TYPE = \\\"INVALID_PROPOSAL_TYPE\\\";\\r\\n    string public constant EXECUTION_FAILED = \\\"EXECUTION_FAILED\\\";\\r\\n    string public constant INVALID_USER = \\\"INVALID_USER\\\";\\r\\n    string public constant NOT_LAUNCHED = \\\"NOT_LAUNCHED\\\";\\r\\n    string public constant LAUNCHED = \\\"LAUNCHED\\\";\\r\\n    string public constant VESTING_TVL_REACHED = \\\"VESTING_TVL_REACHED\\\";\\r\\n    string public constant WRONG_TOKEN_ADDRESS = \\\"WRONG_TOKEN_ADDRESS\\\";\\r\\n    string public constant GOVERNANCE_TOKEN_EXISTS = \\\"GOVERNANCE_TOKEN_EXISTS\\\";\\r\\n    string public constant THRESHOLD_NOT_REACHED = \\\"THRESHOLD_NOT_REACHED\\\";\\r\\n    string public constant UNSUPPORTED_TOKEN_TYPE = \\\"UNSUPPORTED_TOKEN_TYPE\\\";\\r\\n    string public constant ALREADY_VOTED = \\\"ALREADY_VOTED\\\";\\r\\n    string public constant ZERO_VOTES = \\\"ZERO_VOTES\\\";\\r\\n    string public constant ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS =\\r\\n        \\\"ACTIVE_GOVERNANCE_SETTINGS_PROPOSAL_EXISTS\\\";\\r\\n    string public constant EMPTY_ADDRESS = \\\"EMPTY_ADDRESS\\\";\\r\\n    string public constant NOT_VALID_PROPOSER = \\\"NOT_VALID_PROPOSER\\\";\\r\\n    string public constant SHARES_SUM_EXCEEDS_ONE = \\\"SHARES_SUM_EXCEEDS_ONE\\\";\\r\\n    string public constant NOT_RESOLVER = \\\"NOT_RESOLVER\\\";\\r\\n    string public constant NOT_REGISTRY = \\\"NOT_REGISTRY\\\";\\r\\n    string public constant INVALID_TARGET = \\\"INVALID_TARGET\\\";\\r\\n    string public constant NOT_TGE_FACTORY = \\\"NOT_TGE_FACTORY\\\";\\r\\n    string public constant WRONG_AMOUNT = \\\"WRONG_AMOUNT\\\";\\r\\n    string public constant WRONG_BLOCK_NUMBER = \\\"WRONG_BLOCK_NUMBER\\\";\\r\\n    string public constant NOT_VALID_EXECUTOR = \\\"NOT_VALID_EXECUTOR\\\";\\r\\n    string public constant POOL_PAUSED = \\\"POOL_PAUSED\\\";\\r\\n    string public constant NOT_INVOICE_MANAGER = \\\"NOT_INVOICE_MANAGER\\\";\\r\\n    string public constant WRONG_RESOLVER = \\\"WRONG_RESOLVER\\\";\\r\\n    string public constant INVALID_PURCHASE_AMOUNT = \\\"INVALID_PURCHASE_AMOUNT\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x1a9e87deffa10092846b54b3864db1f8f4a3f7fc0a7b4e7dd354516d3ea017e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6127f780620000f46000396000f3fe6080604052600436106100c25760003560e01c8063528dd5121161007f578063862b7cbf11610059578063862b7cbf146102395780639ad8ec5714610259578063c4d66de814610291578063de35f20c146102b157600080fd5b8063528dd512146101c15780635c337409146101e15780637b1039991461020157600080fd5b80630dad62fa146100c75780632b9542341461010157806330c6faeb14610131578063365fa35d146101465780633a1de8fc1461016657806341cec40e14610186575b600080fd5b3480156100d357600080fd5b506100e76100e23660046120f7565b6102de565b6040516100f8959493929190612201565b60405180910390f35b34801561010d57600080fd5b5061012161011c366004612243565b610453565b60405190151581526020016100f8565b61014461013f3660046120f7565b610796565b005b34801561015257600080fd5b50610121610161366004612454565b610cd4565b34801561017257600080fd5b506101446101813660046120f7565b610e3d565b34801561019257600080fd5b506101b36101a1366004612489565b60346020526000908152604090205481565b6040519081526020016100f8565b3480156101cd57600080fd5b506101446101dc3660046124ad565b61104e565b3480156101ed57600080fd5b506101446101fc3660046120f7565b6114d0565b34801561020d57600080fd5b50603354610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b34801561024557600080fd5b506101446102543660046120f7565b6115db565b34801561026557600080fd5b506101b36102743660046120f7565b603660209081526000928352604080842090915290825290205481565b34801561029d57600080fd5b506101446102ac366004612489565b611896565b3480156102bd57600080fd5b506102d16102cc3660046120f7565b6119ba565b6040516100f89190612513565b6035602090815260009283526040808420825291835291819020815160a0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003810180549192918391606084019161033e9061253b565b80601f016020809104026020016040519081016040528092919081815260200182805461036a9061253b565b80156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561041957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103fb575b5050509190925250505060058201546006909201549091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041685565b6000826001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190612575565b1580156105365750826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190612597565b6001600160a01b0316826001600160a01b0316145b1561054357506001610790565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906125b4565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190612575565b8061077f575060405163e8533e2960e01b81526001600160a01b03838116600483015284169063e8533e2990602401602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190612575565b1561078c57506001610790565b5060005b92915050565b61079e611ba1565b81806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190612575565b156040518060400160405280600b81526020016a1413d3d317d4105554d15160aa1b8152509061084d5760405162461bcd60e51b815260040161084491906125cd565b60405180910390fd5b506001600160a01b03808416600090815260356020908152604080832086845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939492939192849290918491610100850191906108bf9061253b565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb9061253b565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561099a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161097c575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b909104161515608090910152905060016109f685856119ba565b6004811115610a0757610a076124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610a4a5760405162461bcd60e51b815260040161084491906125cd565b508051608001515115610af9576000805b82516080015151811015610ab157825160800151805133919083908110610a8457610a846125e0565b60200260200101516001600160a01b031603610a9f57600191505b80610aa9816125f6565b915050610a5b565b5060408051808201909152600f81526e1393d517d5d2125511531254d51151608a1b602082015281610af65760405162461bcd60e51b815260040161084491906125cd565b50505b8051602001516001600160a01b0316610bf35780515160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152903414610b525760405162461bcd60e51b815260040161084491906125cd565b508051516040516000916001600160a01b038716918381818185875af1925050503d8060008114610b9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ba4565b606091505b50509050806040518060400160405280600c81526020016b15d493d391d7d05353d5539560a21b81525090610bec5760405162461bcd60e51b815260040161084491906125cd565b5050610c16565b80518051602090910151610c16916001600160a01b039091169033908790611bfa565b610c208484611c5a565b603354604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b03166330c6faeb60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91610c939133913091349160040161261d565b600060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b505050505050610cd060018055565b5050565b805160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152600091610d195760405162461bcd60e51b815260040161084491906125cd565b5043826040015111604051806040016040528060128152602001712ba927a723afa12627a1a5afa72aa6a122a960711b81525090610d6a5760405162461bcd60e51b815260040161084491906125cd565b5060208201516001600160a01b03161580610dea5750600082602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906125b4565b115b6040518060400160405280601381526020017257524f4e475f544f4b454e5f4144445245535360681b81525090610e345760405162461bcd60e51b815260040161084491906125cd565b50600192915050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a91906125b4565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190612575565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906110435760405162461bcd60e51b815260040161084491906125cd565b50610cd08282611c5a565b816110598133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906110a35760405162461bcd60e51b815260040161084491906125cd565b50603354604051630db9619f60e31b81526001600160a01b0385811660048301526001921690636dcb0cf890602401602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611113919061265a565b6004811115611124576111246124fd565b14604051806040016040528060088152602001671393d517d413d3d360c21b815250906111645760405162461bcd60e51b815260040161084491906125cd565b5061116e82610cd4565b506040805161014081018252600060a0820181905260c0820181905260e0820181905260606101008301819052610120830181905260208084018381528285018490526080850184905233858701528785526001600160a01b03898116808652603484528786205492839052855260358352868520828652835293869020855180518255928301516001820180546001600160a01b031916919096161790945594810151600284015590810151929392849291908290600382019061123390826126c1565b506080820151805161124f916004840191602090910190612065565b50505060208281015160058301556040808401516006909301805460608601516080909601511515600160a81b0260ff60a81b19961515600160a01b026001600160a81b03199092166001600160a01b0396871617919091179590951694909417909355908716600090815260349091529081208054916112cf836125f6565b90915550506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190612597565b604051635a4c3ceb60e01b81526001600160a01b038881166004830152602482018590529190911690635a4c3ceb906044016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b791906125b4565b6001600160a01b0387166000818152603660209081526040808320878452825291829020849055815192835282018590529192507f6a39120258d0c412cb2b8a5731afda5aa7b25b23efbd037907ab4223ec73ee6c910160405180910390a16033546040516001600160a01b0390911690634dbb83fd9033903090600090632946ea8960e11b9061144e908d908d90602401612781565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e087901b90921682526114969493929160040161261d565b600060405180830381600087803b1580156114b057600080fd5b505af11580156114c4573d6000803e3d6000fd5b50505050505050505050565b816114db8133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906115255760405162461bcd60e51b815260040161084491906125cd565b506115308383611d31565b603354604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316635c33740960e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916115a4913391309160009160040161261d565b600060405180830381600087803b1580156115be57600080fd5b505af11580156115d2573d6000803e3d6000fd5b50505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116529190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173891906125b4565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561177a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179e9190612575565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906117e15760405162461bcd60e51b815260040161084491906125cd565b506117ec8282611d31565b603354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663862b7cbf60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91611860913391309160009160040161261d565b600060405180830381600087803b15801561187a57600080fd5b505af115801561188e573d6000803e3d6000fd5b505050505050565b600054610100900460ff16158080156118b65750600054600160ff909116105b806118d05750303b1580156118d0575060005460ff166001145b6119335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610844565b6000805460ff191660011790558015611956576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0384161790558015610cd0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b03808316600090815260356020908152604080832085845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939485948492849161010085019190611a279061253b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a539061253b565b8015611aa05780601f10611a7557610100808354040283529160200191611aa0565b820191906000526020600020905b815481529060010190602001808311611a8357829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611b0257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ae4575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b820481161515606080850191909152600160a81b90920416151560809092019190915281015190915015611b6c576002915050610790565b806080015115611b80576004915050610790565b805160400151431115611b97576003915050610790565b5060019392505050565b600260015403611bf35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610844565b6002600155565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c54908590611dfe565b50505050565b81816001611c6883836119ba565b6004811115611c7957611c796124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611cbc5760405162461bcd60e51b815260040161084491906125cd565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a01b1916600160a01b179055815192835282018590527f799d4ec405ca3d1ee291cbd8904cbccb4b8a0ecef447ddae03b2fbeddcc30cfb91015b60405180910390a150505050565b81816001611d3f83836119ba565b6004811115611d5057611d506124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611d935760405162461bcd60e51b815260040161084491906125cd565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a81b1916600160a81b179055815192835282018590527f9abf50c8342d18dbbf559ab00e917d3d8fe7f836797cf666bc944252e61469e39101611d23565b6000611e53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ed59092919063ffffffff16565b805190915015611ed05780806020019051810190611e719190612575565b611ed05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610844565b505050565b6060611ee48484600085611eec565b949350505050565b606082471015611f4d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610844565b600080866001600160a01b03168587604051611f6991906127a5565b60006040518083038185875af1925050503d8060008114611fa6576040519150601f19603f3d011682016040523d82523d6000602084013e611fab565b606091505b5091509150611fbc87838387611fc7565b979650505050505050565b6060831561203657825160000361202f576001600160a01b0385163b61202f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610844565b5081611ee4565b611ee4838381511561204b5781518083602001fd5b8060405162461bcd60e51b815260040161084491906125cd565b8280548282559060005260206000209081019282156120ba579160200282015b828111156120ba57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612085565b506120c69291506120ca565b5090565b5b808211156120c657600081556001016120cb565b6001600160a01b03811681146120f457600080fd5b50565b6000806040838503121561210a57600080fd5b8235612115816120df565b946020939093013593505050565b60005b8381101561213e578181015183820152602001612126565b50506000910152565b6000815180845261215f816020860160208601612123565b601f01601f19169290920160200192915050565b80518252600060208083015160018060a01b0380821683870152604085015160408701526060850151915060a060608701526121b260a0870183612147565b60808681015188830391890191909152805180835290850193506000918501905b808310156121f5578451841682529385019360019290920191908501906121d3565b50979650505050505050565b60a08152600061221460a0830188612173565b6020830196909652506001600160a01b0393909316604084015290151560608301521515608090910152919050565b6000806040838503121561225657600080fd5b8235612261816120df565b91506020830135612271816120df565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156122b5576122b561227c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156122e4576122e461227c565b604052919050565b600082601f8301126122fd57600080fd5b8135602067ffffffffffffffff8211156123195761231961227c565b8160051b6123288282016122bb565b928352848101820192828101908785111561234257600080fd5b83870192505b84831015611fbc57823561235b816120df565b82529183019190830190612348565b600060a0828403121561237c57600080fd5b612384612292565b905081358152602080830135612399816120df565b8282015260408381013590830152606083013567ffffffffffffffff808211156123c257600080fd5b818501915085601f8301126123d657600080fd5b8135818111156123e8576123e861227c565b6123fa601f8201601f191685016122bb565b818152878583860101111561240e57600080fd5b818585018683013760008583830101528060608701525050608085013592508083111561243a57600080fd5b5050612448848285016122ec565b60808301525092915050565b60006020828403121561246657600080fd5b813567ffffffffffffffff81111561247d57600080fd5b611ee48482850161236a565b60006020828403121561249b57600080fd5b81356124a6816120df565b9392505050565b600080604083850312156124c057600080fd5b82356124cb816120df565b9150602083013567ffffffffffffffff8111156124e757600080fd5b6124f38582860161236a565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061253557634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061254f57607f821691505b60208210810361256f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561258757600080fd5b815180151581146124a657600080fd5b6000602082840312156125a957600080fd5b81516124a6816120df565b6000602082840312156125c657600080fd5b5051919050565b6020815260006124a66020830184612147565b634e487b7160e01b600052603260045260246000fd5b60006001820161261657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061265090830184612147565b9695505050505050565b60006020828403121561266c57600080fd5b8151600581106124a657600080fd5b601f821115611ed057600081815260208120601f850160051c810160208610156126a25750805b601f850160051c820191505b8181101561188e578281556001016126ae565b815167ffffffffffffffff8111156126db576126db61227c565b6126ef816126e9845461253b565b8461267b565b602080601f831160018114612724576000841561270c5750858301515b600019600386901b1c1916600185901b17855561188e565b600085815260208120601f198616915b8281101561275357888601518255948401946001909101908401612734565b50858210156127715787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090611ee490830184612173565b600082516127b7818460208701612123565b919091019291505056fea264697066735822122070abe78a64e5c5e6f90a1323284b98f8340ef533c53006d7df177540c73b631864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063528dd5121161007f578063862b7cbf11610059578063862b7cbf146102395780639ad8ec5714610259578063c4d66de814610291578063de35f20c146102b157600080fd5b8063528dd512146101c15780635c337409146101e15780637b1039991461020157600080fd5b80630dad62fa146100c75780632b9542341461010157806330c6faeb14610131578063365fa35d146101465780633a1de8fc1461016657806341cec40e14610186575b600080fd5b3480156100d357600080fd5b506100e76100e23660046120f7565b6102de565b6040516100f8959493929190612201565b60405180910390f35b34801561010d57600080fd5b5061012161011c366004612243565b610453565b60405190151581526020016100f8565b61014461013f3660046120f7565b610796565b005b34801561015257600080fd5b50610121610161366004612454565b610cd4565b34801561017257600080fd5b506101446101813660046120f7565b610e3d565b34801561019257600080fd5b506101b36101a1366004612489565b60346020526000908152604090205481565b6040519081526020016100f8565b3480156101cd57600080fd5b506101446101dc3660046124ad565b61104e565b3480156101ed57600080fd5b506101446101fc3660046120f7565b6114d0565b34801561020d57600080fd5b50603354610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100f8565b34801561024557600080fd5b506101446102543660046120f7565b6115db565b34801561026557600080fd5b506101b36102743660046120f7565b603660209081526000928352604080842090915290825290205481565b34801561029d57600080fd5b506101446102ac366004612489565b611896565b3480156102bd57600080fd5b506102d16102cc3660046120f7565b6119ba565b6040516100f89190612513565b6035602090815260009283526040808420825291835291819020815160a0810183528154815260018201546001600160a01b0316938101939093526002810154918301919091526003810180549192918391606084019161033e9061253b565b80601f016020809104026020016040519081016040528092919081815260200182805461036a9061253b565b80156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561041957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103fb575b5050509190925250505060058201546006909201549091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041685565b6000826001600160a01b031663e47bfee86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190612575565b1580156105365750826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105219190612597565b6001600160a01b0316826001600160a01b0316145b1561054357506001610790565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba9190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906125b4565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f9190612575565b8061077f575060405163e8533e2960e01b81526001600160a01b03838116600483015284169063e8533e2990602401602060405180830381865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190612575565b1561078c57506001610790565b5060005b92915050565b61079e611ba1565b81806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190612575565b156040518060400160405280600b81526020016a1413d3d317d4105554d15160aa1b8152509061084d5760405162461bcd60e51b815260040161084491906125cd565b60405180910390fd5b506001600160a01b03808416600090815260356020908152604080832086845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939492939192849290918491610100850191906108bf9061253b565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb9061253b565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561099a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161097c575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b909104161515608090910152905060016109f685856119ba565b6004811115610a0757610a076124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090610a4a5760405162461bcd60e51b815260040161084491906125cd565b508051608001515115610af9576000805b82516080015151811015610ab157825160800151805133919083908110610a8457610a846125e0565b60200260200101516001600160a01b031603610a9f57600191505b80610aa9816125f6565b915050610a5b565b5060408051808201909152600f81526e1393d517d5d2125511531254d51151608a1b602082015281610af65760405162461bcd60e51b815260040161084491906125cd565b50505b8051602001516001600160a01b0316610bf35780515160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152903414610b525760405162461bcd60e51b815260040161084491906125cd565b508051516040516000916001600160a01b038716918381818185875af1925050503d8060008114610b9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ba4565b606091505b50509050806040518060400160405280600c81526020016b15d493d391d7d05353d5539560a21b81525090610bec5760405162461bcd60e51b815260040161084491906125cd565b5050610c16565b80518051602090910151610c16916001600160a01b039091169033908790611bfa565b610c208484611c5a565b603354604080516001600160a01b038781166024830152604480830188905283518084039091018152606490920183526020820180516001600160e01b03166330c6faeb60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91610c939133913091349160040161261d565b600060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b505050505050610cd060018055565b5050565b805160408051808201909152600c81526b15d493d391d7d05353d5539560a21b6020820152600091610d195760405162461bcd60e51b815260040161084491906125cd565b5043826040015111604051806040016040528060128152602001712ba927a723afa12627a1a5afa72aa6a122a960711b81525090610d6a5760405162461bcd60e51b815260040161084491906125cd565b5060208201516001600160a01b03161580610dea5750600082602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de891906125b4565b115b6040518060400160405280601381526020017257524f4e475f544f4b454e5f4144445245535360681b81525090610e345760405162461bcd60e51b815260040161084491906125cd565b50600192915050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a91906125b4565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190612575565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906110435760405162461bcd60e51b815260040161084491906125cd565b50610cd08282611c5a565b816110598133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906110a35760405162461bcd60e51b815260040161084491906125cd565b50603354604051630db9619f60e31b81526001600160a01b0385811660048301526001921690636dcb0cf890602401602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611113919061265a565b6004811115611124576111246124fd565b14604051806040016040528060088152602001671393d517d413d3d360c21b815250906111645760405162461bcd60e51b815260040161084491906125cd565b5061116e82610cd4565b506040805161014081018252600060a0820181905260c0820181905260e0820181905260606101008301819052610120830181905260208084018381528285018490526080850184905233858701528785526001600160a01b03898116808652603484528786205492839052855260358352868520828652835293869020855180518255928301516001820180546001600160a01b031916919096161790945594810151600284015590810151929392849291908290600382019061123390826126c1565b506080820151805161124f916004840191602090910190612065565b50505060208281015160058301556040808401516006909301805460608601516080909601511515600160a81b0260ff60a81b19961515600160a01b026001600160a81b03199092166001600160a01b0396871617919091179590951694909417909355908716600090815260349091529081208054916112cf836125f6565b90915550506033546040805163d598d4c960e01b815290516000926001600160a01b03169163d598d4c99160048083019260209291908290030181865afa15801561131e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113429190612597565b604051635a4c3ceb60e01b81526001600160a01b038881166004830152602482018590529190911690635a4c3ceb906044016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b791906125b4565b6001600160a01b0387166000818152603660209081526040808320878452825291829020849055815192835282018590529192507f6a39120258d0c412cb2b8a5731afda5aa7b25b23efbd037907ab4223ec73ee6c910160405180910390a16033546040516001600160a01b0390911690634dbb83fd9033903090600090632946ea8960e11b9061144e908d908d90602401612781565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e087901b90921682526114969493929160040161261d565b600060405180830381600087803b1580156114b057600080fd5b505af11580156114c4573d6000803e3d6000fd5b50505050505050505050565b816114db8133610453565b604051806040016040528060138152602001722727aa2fa4a72b27a4a1a2afa6a0a720a3a2a960691b815250906115255760405162461bcd60e51b815260040161084491906125cd565b506115308383611d31565b603354604080516001600160a01b038681166024830152604480830187905283518084039091018152606490920183526020820180516001600160e01b0316635c33740960e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd916115a4913391309160009160040161261d565b600060405180830381600087803b1580156115be57600080fd5b505af11580156115d2573d6000803e3d6000fd5b50505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116529190612597565b6001600160a01b03166391d14854603360009054906101000a90046001600160a01b03166001600160a01b031663d598d4c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190612597565b6001600160a01b031663c979e8a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173891906125b4565b6040516001600160e01b031960e084901b1681526004810191909152336024820152604401602060405180830381865afa15801561177a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179e9190612575565b6040518060400160405280600c81526020016b24a72b20a624a22faaa9a2a960a11b815250906117e15760405162461bcd60e51b815260040161084491906125cd565b506117ec8282611d31565b603354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663862b7cbf60e01b1790529151634dbb83fd60e01b81529190921691634dbb83fd91611860913391309160009160040161261d565b600060405180830381600087803b15801561187a57600080fd5b505af115801561188e573d6000803e3d6000fd5b505050505050565b600054610100900460ff16158080156118b65750600054600160ff909116105b806118d05750303b1580156118d0575060005460ff166001145b6119335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610844565b6000805460ff191660011790558015611956576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0384161790558015610cd0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b03808316600090815260356020908152604080832085845290915280822081516101408101909252805460a08301908152600182015490941660c0830152600281015460e0830152600381018054939485948492849161010085019190611a279061253b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a539061253b565b8015611aa05780601f10611a7557610100808354040283529160200191611aa0565b820191906000526020600020905b815481529060010190602001808311611a8357829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611b0257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ae4575b505050919092525050508152600582015460208201526006909101546001600160a01b038116604083015260ff600160a01b820481161515606080850191909152600160a81b90920416151560809092019190915281015190915015611b6c576002915050610790565b806080015115611b80576004915050610790565b805160400151431115611b97576003915050610790565b5060019392505050565b600260015403611bf35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610844565b6002600155565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611c54908590611dfe565b50505050565b81816001611c6883836119ba565b6004811115611c7957611c796124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611cbc5760405162461bcd60e51b815260040161084491906125cd565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a01b1916600160a01b179055815192835282018590527f799d4ec405ca3d1ee291cbd8904cbccb4b8a0ecef447ddae03b2fbeddcc30cfb91015b60405180910390a150505050565b81816001611d3f83836119ba565b6004811115611d5057611d506124fd565b146040518060400160405280600b81526020016a57524f4e475f535441544560a81b81525090611d935760405162461bcd60e51b815260040161084491906125cd565b506001600160a01b0384166000818152603560209081526040808320878452825291829020600601805460ff60a81b1916600160a81b179055815192835282018590527f9abf50c8342d18dbbf559ab00e917d3d8fe7f836797cf666bc944252e61469e39101611d23565b6000611e53826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ed59092919063ffffffff16565b805190915015611ed05780806020019051810190611e719190612575565b611ed05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610844565b505050565b6060611ee48484600085611eec565b949350505050565b606082471015611f4d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610844565b600080866001600160a01b03168587604051611f6991906127a5565b60006040518083038185875af1925050503d8060008114611fa6576040519150601f19603f3d011682016040523d82523d6000602084013e611fab565b606091505b5091509150611fbc87838387611fc7565b979650505050505050565b6060831561203657825160000361202f576001600160a01b0385163b61202f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610844565b5081611ee4565b611ee4838381511561204b5781518083602001fd5b8060405162461bcd60e51b815260040161084491906125cd565b8280548282559060005260206000209081019282156120ba579160200282015b828111156120ba57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612085565b506120c69291506120ca565b5090565b5b808211156120c657600081556001016120cb565b6001600160a01b03811681146120f457600080fd5b50565b6000806040838503121561210a57600080fd5b8235612115816120df565b946020939093013593505050565b60005b8381101561213e578181015183820152602001612126565b50506000910152565b6000815180845261215f816020860160208601612123565b601f01601f19169290920160200192915050565b80518252600060208083015160018060a01b0380821683870152604085015160408701526060850151915060a060608701526121b260a0870183612147565b60808681015188830391890191909152805180835290850193506000918501905b808310156121f5578451841682529385019360019290920191908501906121d3565b50979650505050505050565b60a08152600061221460a0830188612173565b6020830196909652506001600160a01b0393909316604084015290151560608301521515608090910152919050565b6000806040838503121561225657600080fd5b8235612261816120df565b91506020830135612271816120df565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156122b5576122b561227c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156122e4576122e461227c565b604052919050565b600082601f8301126122fd57600080fd5b8135602067ffffffffffffffff8211156123195761231961227c565b8160051b6123288282016122bb565b928352848101820192828101908785111561234257600080fd5b83870192505b84831015611fbc57823561235b816120df565b82529183019190830190612348565b600060a0828403121561237c57600080fd5b612384612292565b905081358152602080830135612399816120df565b8282015260408381013590830152606083013567ffffffffffffffff808211156123c257600080fd5b818501915085601f8301126123d657600080fd5b8135818111156123e8576123e861227c565b6123fa601f8201601f191685016122bb565b818152878583860101111561240e57600080fd5b818585018683013760008583830101528060608701525050608085013592508083111561243a57600080fd5b5050612448848285016122ec565b60808301525092915050565b60006020828403121561246657600080fd5b813567ffffffffffffffff81111561247d57600080fd5b611ee48482850161236a565b60006020828403121561249b57600080fd5b81356124a6816120df565b9392505050565b600080604083850312156124c057600080fd5b82356124cb816120df565b9150602083013567ffffffffffffffff8111156124e757600080fd5b6124f38582860161236a565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061253557634e487b7160e01b600052602160045260246000fd5b91905290565b600181811c9082168061254f57607f821691505b60208210810361256f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561258757600080fd5b815180151581146124a657600080fd5b6000602082840312156125a957600080fd5b81516124a6816120df565b6000602082840312156125c657600080fd5b5051919050565b6020815260006124a66020830184612147565b634e487b7160e01b600052603260045260246000fd5b60006001820161261657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061265090830184612147565b9695505050505050565b60006020828403121561266c57600080fd5b8151600581106124a657600080fd5b601f821115611ed057600081815260208120601f850160051c810160208610156126a25750805b601f850160051c820191505b8181101561188e578281556001016126ae565b815167ffffffffffffffff8111156126db576126db61227c565b6126ef816126e9845461253b565b8461267b565b602080601f831160018114612724576000841561270c5750858301515b600019600386901b1c1916600185901b17855561188e565b600085815260208120601f198616915b8281101561275357888601518255948401946001909101908401612734565b50858210156127715787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090611ee490830184612173565b600082516127b7818460208701612123565b919091019291505056fea264697066735822122070abe78a64e5c5e6f90a1323284b98f8340ef533c53006d7df177540c73b631864736f6c63430008110033",
  "devdoc": {
    "details": "It supports both trusted (payment confirmation off-chain by an authorized address) and trustless (on-chain payment) modes of operation. Regardless of the presence of Governance tokens in delegation or balance, and regardless of the owner/creator pool status, any address can act as an invoice payer. The following conditions must be met: - The structure Invoice.sol:invoices for the selected invoice number stores either an empty InvoiceInfo.core.whitelist[] (public invoice), or it contains the payer's address - The structure Invoice.sol:invoices for the selected invoice number has the values false in the fields InvoiceInfo.isPaid and InvoiceInfo.isCanceled (the invoice has not been canceled or paid by anyone yet) - The current network block is less than the InvoiceInfo.core.expirationBlock stored in the structure Invoice.sol:invoices for the selected invoice number When paying the invoice, the amount specified by the invoice creator is debited in the units they have chosen (ERC20 tokens or ETH)._Note. All the above is valid for on-chain invoice payments. For off-chain invoice payments, a 3rd party backend solution is used to verify the payment of the specified invoice and has its mechanisms for allowing or disallowing the user to pay, including KYC. There is no such blockchain payer in this approach; the invoice is marked as paid by the address assigned the role of SERVICE_MANAGER in the Service contract._",
    "events": {
      "InvoiceCanceled(address,uint256)": {
        "details": "Event emitted when invoice is canceled",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      },
      "InvoiceCreated(address,uint256)": {
        "details": "Event emitted on invoice creating",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      },
      "InvoicePaid(address,uint256)": {
        "details": "Event emitted when invoice is paid",
        "params": {
          "invoiceId": "InvoiceId for Pool",
          "pool": "Pool address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelInvoice(address,uint256)": {
        "details": "To cancel an invoice, the request must pass the onlyValidInvoiceManager modifier, which regulates who can manipulate the pool's invoices on behalf of the pool.After cancellation, the invoice receives an irreversible \"Canceled\" status.",
        "params": {
          "invoiceId": "Invoice identifier",
          "pool": "Address of the pool contract that issued the invoice"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "This contract uses OpenZeppelin upgrades and has no need for a constructor function. The constructor is replaced with an initializer function. This method disables the initializer feature of the OpenZeppelin upgrades plugin, preventing the initializer methods from being misused."
      },
      "createInvoice(address,(uint256,address,uint256,string,address[]))": {
        "details": "The onlyValidInvoiceManager modifier determines which accounts can create an invoice for the specified pool.After creation, the invoice receives an \"Active\" status.",
        "params": {
          "core": "Invoice payment data (described in the interface)",
          "pool": "Address of the pool contract that issues the invoice"
        }
      },
      "initialize(address)": {
        "details": "This method replaces the constructor for upgradeable contracts. It also sets the registry contract address in the contract's storage.",
        "params": {
          "registry_": "Protocol registry address"
        }
      },
      "invoiceState(address,uint256)": {
        "details": "This method returns the state of an invoice",
        "params": {
          "invoiceId": "The identifier of the invoice",
          "pool": "The address of the pool contract that issued the invoice"
        }
      },
      "isValidInvoiceManager(address,address)": {
        "details": "In order to create and cancel pool invoices, the account address must: - be listed in the pool's secretaries OR - have the \"SERVICE_MANAGER\" role in the Service contract OR - be the owner of the pool if the pool has not yet obtained DAO status",
        "params": {
          "account": "The account address",
          "pool": "The address of the pool contract"
        }
      },
      "payInvoice(address,uint256)": {
        "details": "In addition to the specified modifiers, there is also a check for the payer's wallet to be included in the whitelist of invoice payers.To allow the invoice to be paid by any wallet, the whitelist field should be left empty when creating the invoice.After successful payment, the invoice receives an irreversible \"Paid\" status.",
        "params": {
          "invoiceId": "Identifier of the invoice being paid",
          "pool": "Address of the pool contract that issued the invoice"
        }
      },
      "setInvoiceCanceled(address,uint256)": {
        "details": "Addresses that have the \"SERVICE_MANAGER\" role in the Service contract can cancel any active invoice of any pool.After cancellation, the invoice receives an irreversible \"Canceled\" status.",
        "params": {
          "invoiceId": "Invoice identifier",
          "pool": "Address of the pool contract that issued the invoice"
        }
      },
      "setInvoicePaid(address,uint256)": {
        "details": "Addresses that have the \"SERVICE_MANAGER\" role in the Service contract can change the status of any active invoice of any pool to \"Paid\", indicating a successful payment of the invoice through an off-chain payment method.After successful payment, the invoice receives an irreversible \"Paid\" status.",
        "params": {
          "invoiceId": "Invoice identifier",
          "pool": "Address of the pool contract that issued the invoice"
        }
      },
      "validateInvoiceCore((uint256,address,uint256,string,address[]))": {
        "details": "An invoice is considered valid if it meets the following criteria: - Non-zero payment amount (in any token, including the native network coin) - The expiration block has not yet been reached - The specified token for payment is a valid ERC20 contract",
        "params": {
          "core": "Invoice data represented by the structure described in the InvoiceCore interface"
        },
        "returns": {
          "_0": "True if the parameters are valid (reverts otherwise)"
        }
      }
    },
    "stateVariables": {
      "eventIndex": {
        "details": "For each pool and for each invoice issued by the pool, the mapping contains global event IDs under which the invoices were registered in the Registry contract."
      },
      "invoices": {
        "details": "Mapping that stores nested mappings of invoice structures for each pool (pool address is used as the key)"
      },
      "lastInvoiceIdForPool": {
        "details": "Маппинг, содержащий последний (максимальный) номер инвойса для каждого пула"
      }
    },
    "title": "Invoice Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelInvoice(address,uint256)": {
        "notice": "Cancel an invoice"
      },
      "constructor": {
        "notice": "Contract constructor."
      },
      "createInvoice(address,(uint256,address,uint256,string,address[]))": {
        "notice": "Create an invoice by a specified pool"
      },
      "eventIndex(address,uint256)": {
        "notice": "Global enumeration of invoices"
      },
      "initialize(address)": {
        "notice": "Contract initializer"
      },
      "invoices(address,uint256)": {
        "notice": "Invoice data (including their state)"
      },
      "isValidInvoiceManager(address,address)": {
        "notice": "This method checks the account's authority to manipulate pool invoices"
      },
      "lastInvoiceIdForPool(address)": {
        "notice": "Последние созданные пулами инвойсы"
      },
      "payInvoice(address,uint256)": {
        "notice": "On-chain payment of an invoice (trustless scenario)"
      },
      "registry()": {
        "notice": "Адрес контракта Registry"
      },
      "setInvoiceCanceled(address,uint256)": {
        "notice": "Canceling an invoice by the manager"
      },
      "setInvoicePaid(address,uint256)": {
        "notice": "Off-chain payment of an invoice (trusted scenario)"
      },
      "validateInvoiceCore((uint256,address,uint256,string,address[]))": {
        "notice": "This method checks the validity of invoice data during its creation"
      }
    },
    "notice": "This contract is designed for managing invoices issued by pools for payment.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 703,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 706,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1142,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1200,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3622,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRegistry)8058"
      },
      {
        "astId": 3627,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "lastInvoiceIdForPool",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3635,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "invoices",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(InvoiceInfo)6751_storage))"
      },
      {
        "astId": 3642,
        "contract": "contracts/Invoice.sol:Invoice",
        "label": "eventIndex",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)8058": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(InvoiceInfo)6751_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IInvoice.InvoiceInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InvoiceInfo)6751_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(InvoiceInfo)6751_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IInvoice.InvoiceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(InvoiceInfo)6751_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InvoiceCore)6739_storage": {
        "encoding": "inplace",
        "label": "struct IInvoice.InvoiceCore",
        "members": [
          {
            "astId": 6729,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6731,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "unitOfAccount",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6733,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "expirationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6735,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 6738,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "whitelist",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(InvoiceInfo)6751_storage": {
        "encoding": "inplace",
        "label": "struct IInvoice.InvoiceInfo",
        "members": [
          {
            "astId": 6742,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "core",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(InvoiceCore)6739_storage"
          },
          {
            "astId": 6744,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "invoiceId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6746,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "createdBy",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 6748,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "isPaid",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 6750,
            "contract": "contracts/Invoice.sol:Invoice",
            "label": "isCanceled",
            "offset": 21,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}